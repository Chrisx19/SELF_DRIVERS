
uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800a34c  0800a34c  0001a34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3ac  0800a3ac  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3ac  0800a3ac  0001a3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3b4  0800a3b4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3b4  0800a3b4  0001a3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3b8  0800a3b8  0001a3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a3bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000091c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009ac  200009ac  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a467  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d36  00000000  00000000  0003a527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  0003e260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001288  00000000  00000000  0003f648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a47  00000000  00000000  000408d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b26d  00000000  00000000  00065317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cddcc  00000000  00000000  00080584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014e350  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005768  00000000  00000000  0014e3a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a334 	.word	0x0800a334

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800a334 	.word	0x0800a334

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <parse>:

/* USER CODE BEGIN PV */
uint8_t txBuffer[8] = { 0x00 };
uint8_t rxBuffer[4] = { 0x00 };

uint16_t parse(uint8_t Rx[]) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	uint16_t result = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	82fb      	strh	r3, [r7, #22]

    for (int i = 0; i < strlen((char const *)Rx); i++) {
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	e015      	b.n	80005c2 <parse+0x3e>
    	uint16_t asciiChar = (Rx[i] - '0');
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	b29b      	uxth	r3, r3
 80005a0:	3b30      	subs	r3, #48	; 0x30
 80005a2:	81fb      	strh	r3, [r7, #14]
    	uint16_t tenth = (result << 3) + (result << 1);
 80005a4:	8afb      	ldrh	r3, [r7, #22]
 80005a6:	00db      	lsls	r3, r3, #3
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	8afb      	ldrh	r3, [r7, #22]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	4413      	add	r3, r2
 80005b2:	81bb      	strh	r3, [r7, #12]
        result = tenth + asciiChar;
 80005b4:	89ba      	ldrh	r2, [r7, #12]
 80005b6:	89fb      	ldrh	r3, [r7, #14]
 80005b8:	4413      	add	r3, r2
 80005ba:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < strlen((char const *)Rx); i++) {
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	3301      	adds	r3, #1
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f7ff fe04 	bl	80001d0 <strlen>
 80005c8:	4602      	mov	r2, r0
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d8e2      	bhi.n	8000596 <parse+0x12>
    }
    return result;
 80005d0:	8afb      	ldrh	r3, [r7, #22]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3718      	adds	r7, #24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <HAL_UART_RxCpltCallback>:

uint16_t buff = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <HAL_UART_RxCpltCallback+0x3c>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d106      	bne.n	80005fc <HAL_UART_RxCpltCallback+0x20>
		buff = parse(rxBuffer);
 80005ee:	480b      	ldr	r0, [pc, #44]	; (800061c <HAL_UART_RxCpltCallback+0x40>)
 80005f0:	f7ff ffc8 	bl	8000584 <parse>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_UART_RxCpltCallback+0x44>)
 80005fa:	801a      	strh	r2, [r3, #0]
	}
	memset(rxBuffer, 0x00, 4);
 80005fc:	2204      	movs	r2, #4
 80005fe:	2100      	movs	r1, #0
 8000600:	4806      	ldr	r0, [pc, #24]	; (800061c <HAL_UART_RxCpltCallback+0x40>)
 8000602:	f009 fa21 	bl	8009a48 <memset>
	HAL_UART_Receive_DMA(&huart2, rxBuffer, 4);
 8000606:	2204      	movs	r2, #4
 8000608:	4904      	ldr	r1, [pc, #16]	; (800061c <HAL_UART_RxCpltCallback+0x40>)
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <HAL_UART_RxCpltCallback+0x48>)
 800060c:	f004 fde4 	bl	80051d8 <HAL_UART_Receive_DMA>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40004400 	.word	0x40004400
 800061c:	200002ac 	.word	0x200002ac
 8000620:	200002b0 	.word	0x200002b0
 8000624:	200001a0 	.word	0x200001a0

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 fd46 	bl	80010bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f83e 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f000 f98c 	bl	8000950 <MX_GPIO_Init>
  MX_DMA_Init();
 8000638:	f000 f962 	bl	8000900 <MX_DMA_Init>
  MX_I2C1_Init();
 800063c:	f000 f8a2 	bl	8000784 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000640:	f000 f8ce 	bl	80007e0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000644:	f000 f8fc 	bl	8000840 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000648:	f008 febc 	bl	80093c4 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 800064c:	f000 f92e 	bl	80008ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, rxBuffer, 4);
 8000650:	2204      	movs	r2, #4
 8000652:	4912      	ldr	r1, [pc, #72]	; (800069c <main+0x74>)
 8000654:	4812      	ldr	r0, [pc, #72]	; (80006a0 <main+0x78>)
 8000656:	f004 fdbf 	bl	80051d8 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800065a:	f008 fed9 	bl	8009410 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
		if(buff) {
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <main+0x7c>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0f9      	beq.n	800065a <main+0x32>
			memset(txBuffer, 0x00, 8);
 8000666:	2208      	movs	r2, #8
 8000668:	2100      	movs	r1, #0
 800066a:	480f      	ldr	r0, [pc, #60]	; (80006a8 <main+0x80>)
 800066c:	f009 f9ec 	bl	8009a48 <memset>
			sprintf((char*) txBuffer, "%d\r\n", buff); //PID_val being sent to serial for debug if something happens
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <main+0x7c>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	490d      	ldr	r1, [pc, #52]	; (80006ac <main+0x84>)
 8000678:	480b      	ldr	r0, [pc, #44]	; (80006a8 <main+0x80>)
 800067a:	f009 fadd 	bl	8009c38 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, strlen((char*) txBuffer), HAL_MAX_DELAY);
 800067e:	480a      	ldr	r0, [pc, #40]	; (80006a8 <main+0x80>)
 8000680:	f7ff fda6 	bl	80001d0 <strlen>
 8000684:	4603      	mov	r3, r0
 8000686:	b29a      	uxth	r2, r3
 8000688:	f04f 33ff 	mov.w	r3, #4294967295
 800068c:	4906      	ldr	r1, [pc, #24]	; (80006a8 <main+0x80>)
 800068e:	4804      	ldr	r0, [pc, #16]	; (80006a0 <main+0x78>)
 8000690:	f004 fd10 	bl	80050b4 <HAL_UART_Transmit>
			buff = 0;
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <main+0x7c>)
 8000696:	2200      	movs	r2, #0
 8000698:	801a      	strh	r2, [r3, #0]
    MX_USB_HOST_Process();
 800069a:	e7de      	b.n	800065a <main+0x32>
 800069c:	200002ac 	.word	0x200002ac
 80006a0:	200001a0 	.word	0x200001a0
 80006a4:	200002b0 	.word	0x200002b0
 80006a8:	200002a4 	.word	0x200002a4
 80006ac:	0800a34c 	.word	0x0800a34c

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	; 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	; 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f009 f9c2 	bl	8009a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b28      	ldr	r3, [pc, #160]	; (800077c <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a27      	ldr	r2, [pc, #156]	; (800077c <SystemClock_Config+0xcc>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <SystemClock_Config+0xcc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a21      	ldr	r2, [pc, #132]	; (8000780 <SystemClock_Config+0xd0>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <SystemClock_Config+0xd0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070c:	2301      	movs	r3, #1
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000720:	2308      	movs	r3, #8
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000724:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000728:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800072e:	2307      	movs	r3, #7
 8000730:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	4618      	mov	r0, r3
 8000738:	f003 fe0e 	bl	8004358 <HAL_RCC_OscConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000742:	f000 fa03 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000746:	230f      	movs	r3, #15
 8000748:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074a:	2302      	movs	r3, #2
 800074c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000752:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000756:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2105      	movs	r1, #5
 8000764:	4618      	mov	r0, r3
 8000766:	f004 f86f 	bl	8004848 <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000770:	f000 f9ec 	bl	8000b4c <Error_Handler>
  }
}
 8000774:	bf00      	nop
 8000776:	3750      	adds	r7, #80	; 0x50
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_I2C1_Init+0x50>)
 800078a:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <MX_I2C1_Init+0x54>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_I2C1_Init+0x50>)
 8000790:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_I2C1_Init+0x58>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_I2C1_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_I2C1_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007c2:	f002 ffe5 	bl	8003790 <HAL_I2C_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007cc:	f000 f9be 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000ac 	.word	0x200000ac
 80007d8:	40005400 	.word	0x40005400
 80007dc:	000186a0 	.word	0x000186a0

080007e0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_I2S3_Init+0x54>)
 80007e6:	4a14      	ldr	r2, [pc, #80]	; (8000838 <MX_I2S3_Init+0x58>)
 80007e8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_I2S3_Init+0x54>)
 80007ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_I2S3_Init+0x54>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_I2S3_Init+0x54>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <MX_I2S3_Init+0x54>)
 8000800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000804:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_I2S3_Init+0x54>)
 8000808:	4a0c      	ldr	r2, [pc, #48]	; (800083c <MX_I2S3_Init+0x5c>)
 800080a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_I2S3_Init+0x54>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_I2S3_Init+0x54>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_I2S3_Init+0x54>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_I2S3_Init+0x54>)
 8000820:	f003 f8fa 	bl	8003a18 <HAL_I2S_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800082a:	f000 f98f 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000100 	.word	0x20000100
 8000838:	40003c00 	.word	0x40003c00
 800083c:	00017700 	.word	0x00017700

08000840 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000846:	4a18      	ldr	r2, [pc, #96]	; (80008a8 <MX_SPI1_Init+0x68>)
 8000848:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_SPI1_Init+0x64>)
 800084c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000850:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_SPI1_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_SPI1_Init+0x64>)
 800086c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000870:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_SPI1_Init+0x64>)
 800088c:	220a      	movs	r2, #10
 800088e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000892:	f004 fb39 	bl	8004f08 <HAL_SPI_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800089c:	f000 f956 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000148 	.word	0x20000148
 80008a8:	40013000 	.word	0x40013000

080008ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <MX_USART2_UART_Init+0x50>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008e4:	f004 fb99 	bl	800501a <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ee:	f000 f92d 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200001a0 	.word	0x200001a0
 80008fc:	40004400 	.word	0x40004400

08000900 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_DMA_Init+0x4c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a0f      	ldr	r2, [pc, #60]	; (800094c <MX_DMA_Init+0x4c>)
 8000910:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <MX_DMA_Init+0x4c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	2010      	movs	r0, #16
 8000928:	f000 fd39 	bl	800139e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800092c:	2010      	movs	r0, #16
 800092e:	f000 fd52 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	2011      	movs	r0, #17
 8000938:	f000 fd31 	bl	800139e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800093c:	2011      	movs	r0, #17
 800093e:	f000 fd4a 	bl	80013d6 <HAL_NVIC_EnableIRQ>

}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08c      	sub	sp, #48	; 0x30
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	4b72      	ldr	r3, [pc, #456]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a71      	ldr	r2, [pc, #452]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 8000970:	f043 0310 	orr.w	r3, r3, #16
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b6f      	ldr	r3, [pc, #444]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0310 	and.w	r3, r3, #16
 800097e:	61bb      	str	r3, [r7, #24]
 8000980:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	4b6b      	ldr	r3, [pc, #428]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a6a      	ldr	r2, [pc, #424]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b68      	ldr	r3, [pc, #416]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b64      	ldr	r3, [pc, #400]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a63      	ldr	r2, [pc, #396]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b61      	ldr	r3, [pc, #388]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b5d      	ldr	r3, [pc, #372]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a5c      	ldr	r2, [pc, #368]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b5a      	ldr	r3, [pc, #360]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	4b56      	ldr	r3, [pc, #344]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a55      	ldr	r2, [pc, #340]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b53      	ldr	r3, [pc, #332]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b4f      	ldr	r3, [pc, #316]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a4e      	ldr	r2, [pc, #312]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b4c      	ldr	r3, [pc, #304]	; (8000b34 <MX_GPIO_Init+0x1e4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2108      	movs	r1, #8
 8000a12:	4849      	ldr	r0, [pc, #292]	; (8000b38 <MX_GPIO_Init+0x1e8>)
 8000a14:	f001 fa98 	bl	8001f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	4847      	ldr	r0, [pc, #284]	; (8000b3c <MX_GPIO_Init+0x1ec>)
 8000a1e:	f001 fa93 	bl	8001f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a22:	2200      	movs	r2, #0
 8000a24:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a28:	4845      	ldr	r0, [pc, #276]	; (8000b40 <MX_GPIO_Init+0x1f0>)
 8000a2a:	f001 fa8d 	bl	8001f48 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a2e:	2308      	movs	r3, #8
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	483c      	ldr	r0, [pc, #240]	; (8000b38 <MX_GPIO_Init+0x1e8>)
 8000a46:	f001 f8e3 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4836      	ldr	r0, [pc, #216]	; (8000b3c <MX_GPIO_Init+0x1ec>)
 8000a62:	f001 f8d5 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a66:	2308      	movs	r3, #8
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a76:	2305      	movs	r3, #5
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	482e      	ldr	r0, [pc, #184]	; (8000b3c <MX_GPIO_Init+0x1ec>)
 8000a82:	f001 f8c5 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a8a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	482a      	ldr	r0, [pc, #168]	; (8000b44 <MX_GPIO_Init+0x1f4>)
 8000a9c:	f001 f8b8 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4825      	ldr	r0, [pc, #148]	; (8000b48 <MX_GPIO_Init+0x1f8>)
 8000ab4:	f001 f8ac 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aca:	2305      	movs	r3, #5
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	481c      	ldr	r0, [pc, #112]	; (8000b48 <MX_GPIO_Init+0x1f8>)
 8000ad6:	f001 f89b 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ada:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ade:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	4813      	ldr	r0, [pc, #76]	; (8000b40 <MX_GPIO_Init+0x1f0>)
 8000af4:	f001 f88c 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000af8:	2320      	movs	r3, #32
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480d      	ldr	r0, [pc, #52]	; (8000b40 <MX_GPIO_Init+0x1f0>)
 8000b0c:	f001 f880 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b14:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_GPIO_Init+0x1e8>)
 8000b26:	f001 f873 	bl	8001c10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3730      	adds	r7, #48	; 0x30
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	40020c00 	.word	0x40020c00
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40020400 	.word	0x40020400

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b96:	2007      	movs	r0, #7
 8000b98:	f000 fbf6 	bl	8001388 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a19      	ldr	r2, [pc, #100]	; (8000c2c <HAL_I2C_MspInit+0x84>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d12c      	bne.n	8000c24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <HAL_I2C_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <HAL_I2C_MspInit+0x88>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_I2C_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000be6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bec:	2312      	movs	r3, #18
 8000bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	480c      	ldr	r0, [pc, #48]	; (8000c34 <HAL_I2C_MspInit+0x8c>)
 8000c04:	f001 f804 	bl	8001c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_I2C_MspInit+0x88>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <HAL_I2C_MspInit+0x88>)
 8000c12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c16:	6413      	str	r3, [r2, #64]	; 0x40
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_I2C_MspInit+0x88>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40005400 	.word	0x40005400
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020400 	.word	0x40020400

08000c38 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08e      	sub	sp, #56	; 0x38
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a31      	ldr	r2, [pc, #196]	; (8000d28 <HAL_I2S_MspInit+0xf0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d15a      	bne.n	8000d1e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c6c:	23c0      	movs	r3, #192	; 0xc0
 8000c6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f004 f805 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c84:	f7ff ff62 	bl	8000b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <HAL_I2S_MspInit+0xf4>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	4a26      	ldr	r2, [pc, #152]	; (8000d2c <HAL_I2S_MspInit+0xf4>)
 8000c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c96:	6413      	str	r3, [r2, #64]	; 0x40
 8000c98:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <HAL_I2S_MspInit+0xf4>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <HAL_I2S_MspInit+0xf4>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	4a1f      	ldr	r2, [pc, #124]	; (8000d2c <HAL_I2S_MspInit+0xf4>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <HAL_I2S_MspInit+0xf4>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <HAL_I2S_MspInit+0xf4>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	4a18      	ldr	r2, [pc, #96]	; (8000d2c <HAL_I2S_MspInit+0xf4>)
 8000cca:	f043 0304 	orr.w	r3, r3, #4
 8000cce:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_I2S_MspInit+0xf4>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cdc:	2310      	movs	r3, #16
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cec:	2306      	movs	r3, #6
 8000cee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480e      	ldr	r0, [pc, #56]	; (8000d30 <HAL_I2S_MspInit+0xf8>)
 8000cf8:	f000 ff8a 	bl	8001c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cfc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d0e:	2306      	movs	r3, #6
 8000d10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	4806      	ldr	r0, [pc, #24]	; (8000d34 <HAL_I2S_MspInit+0xfc>)
 8000d1a:	f000 ff79 	bl	8001c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3738      	adds	r7, #56	; 0x38
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40003c00 	.word	0x40003c00
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000
 8000d34:	40020800 	.word	0x40020800

08000d38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <HAL_SPI_MspInit+0x84>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d12b      	bne.n	8000db2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <HAL_SPI_MspInit+0x88>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <HAL_SPI_MspInit+0x88>)
 8000d64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_SPI_MspInit+0x88>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_SPI_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <HAL_SPI_MspInit+0x88>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_SPI_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d92:	23e0      	movs	r3, #224	; 0xe0
 8000d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000da2:	2305      	movs	r3, #5
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <HAL_SPI_MspInit+0x8c>)
 8000dae:	f000 ff2f 	bl	8001c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	; 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40013000 	.word	0x40013000
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a4c      	ldr	r2, [pc, #304]	; (8000f18 <HAL_UART_MspInit+0x150>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	f040 8091 	bne.w	8000f0e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	4b4a      	ldr	r3, [pc, #296]	; (8000f1c <HAL_UART_MspInit+0x154>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	4a49      	ldr	r2, [pc, #292]	; (8000f1c <HAL_UART_MspInit+0x154>)
 8000df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfc:	4b47      	ldr	r3, [pc, #284]	; (8000f1c <HAL_UART_MspInit+0x154>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	4b43      	ldr	r3, [pc, #268]	; (8000f1c <HAL_UART_MspInit+0x154>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	4a42      	ldr	r2, [pc, #264]	; (8000f1c <HAL_UART_MspInit+0x154>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	6313      	str	r3, [r2, #48]	; 0x30
 8000e18:	4b40      	ldr	r3, [pc, #256]	; (8000f1c <HAL_UART_MspInit+0x154>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e24:	230c      	movs	r3, #12
 8000e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e34:	2307      	movs	r3, #7
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4838      	ldr	r0, [pc, #224]	; (8000f20 <HAL_UART_MspInit+0x158>)
 8000e40:	f000 fee6 	bl	8001c10 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000e44:	4b37      	ldr	r3, [pc, #220]	; (8000f24 <HAL_UART_MspInit+0x15c>)
 8000e46:	4a38      	ldr	r2, [pc, #224]	; (8000f28 <HAL_UART_MspInit+0x160>)
 8000e48:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000e4a:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <HAL_UART_MspInit+0x15c>)
 8000e4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e50:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e52:	4b34      	ldr	r3, [pc, #208]	; (8000f24 <HAL_UART_MspInit+0x15c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e58:	4b32      	ldr	r3, [pc, #200]	; (8000f24 <HAL_UART_MspInit+0x15c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e5e:	4b31      	ldr	r3, [pc, #196]	; (8000f24 <HAL_UART_MspInit+0x15c>)
 8000e60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e64:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e66:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <HAL_UART_MspInit+0x15c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <HAL_UART_MspInit+0x15c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000e72:	4b2c      	ldr	r3, [pc, #176]	; (8000f24 <HAL_UART_MspInit+0x15c>)
 8000e74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e78:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <HAL_UART_MspInit+0x15c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e80:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <HAL_UART_MspInit+0x15c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e86:	4827      	ldr	r0, [pc, #156]	; (8000f24 <HAL_UART_MspInit+0x15c>)
 8000e88:	f000 fac0 	bl	800140c <HAL_DMA_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000e92:	f7ff fe5b 	bl	8000b4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a22      	ldr	r2, [pc, #136]	; (8000f24 <HAL_UART_MspInit+0x15c>)
 8000e9a:	639a      	str	r2, [r3, #56]	; 0x38
 8000e9c:	4a21      	ldr	r2, [pc, #132]	; (8000f24 <HAL_UART_MspInit+0x15c>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000ea2:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <HAL_UART_MspInit+0x164>)
 8000ea4:	4a22      	ldr	r2, [pc, #136]	; (8000f30 <HAL_UART_MspInit+0x168>)
 8000ea6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000ea8:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <HAL_UART_MspInit+0x164>)
 8000eaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eae:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <HAL_UART_MspInit+0x164>)
 8000eb2:	2240      	movs	r2, #64	; 0x40
 8000eb4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_UART_MspInit+0x164>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <HAL_UART_MspInit+0x164>)
 8000ebe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <HAL_UART_MspInit+0x164>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <HAL_UART_MspInit+0x164>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_UART_MspInit+0x164>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_UART_MspInit+0x164>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_UART_MspInit+0x164>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000ee2:	4812      	ldr	r0, [pc, #72]	; (8000f2c <HAL_UART_MspInit+0x164>)
 8000ee4:	f000 fa92 	bl	800140c <HAL_DMA_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000eee:	f7ff fe2d 	bl	8000b4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <HAL_UART_MspInit+0x164>)
 8000ef6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ef8:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <HAL_UART_MspInit+0x164>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	2026      	movs	r0, #38	; 0x26
 8000f04:	f000 fa4b 	bl	800139e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f08:	2026      	movs	r0, #38	; 0x26
 8000f0a:	f000 fa64 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	; 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40004400 	.word	0x40004400
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020000 	.word	0x40020000
 8000f24:	200001e4 	.word	0x200001e4
 8000f28:	40026088 	.word	0x40026088
 8000f2c:	20000244 	.word	0x20000244
 8000f30:	400260a0 	.word	0x400260a0

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <NMI_Handler+0x4>

08000f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <HardFault_Handler+0x4>

08000f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <MemManage_Handler+0x4>

08000f46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f80:	f000 f8ee 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <DMA1_Stream5_IRQHandler+0x10>)
 8000f8e:	f000 fbd5 	bl	800173c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200001e4 	.word	0x200001e4

08000f9c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <DMA1_Stream6_IRQHandler+0x10>)
 8000fa2:	f000 fbcb 	bl	800173c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000244 	.word	0x20000244

08000fb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <USART2_IRQHandler+0x10>)
 8000fb6:	f004 f93f 	bl	8005238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200001a0 	.word	0x200001a0

08000fc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <OTG_FS_IRQHandler+0x10>)
 8000fca:	f001 fa41 	bl	8002450 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000698 	.word	0x20000698

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	; (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d207      	bcs.n	8001018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001008:	f008 fce4 	bl	80099d4 <__errno>
 800100c:	4603      	mov	r3, r0
 800100e:	220c      	movs	r2, #12
 8001010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	e009      	b.n	800102c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <_sbrk+0x64>)
 8001028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20020000 	.word	0x20020000
 8001038:	00000400 	.word	0x00000400
 800103c:	200002b4 	.word	0x200002b4
 8001040:	200009b0 	.word	0x200009b0

08001044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800106e:	490e      	ldr	r1, [pc, #56]	; (80010a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001070:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001084:	4c0b      	ldr	r4, [pc, #44]	; (80010b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001092:	f7ff ffd7 	bl	8001044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001096:	f008 fca3 	bl	80099e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109a:	f7ff fac5 	bl	8000628 <main>
  bx  lr    
 800109e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80010ac:	0800a3bc 	.word	0x0800a3bc
  ldr r2, =_sbss
 80010b0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80010b4:	200009ac 	.word	0x200009ac

080010b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC_IRQHandler>
	...

080010bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <HAL_Init+0x40>)
 80010c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <HAL_Init+0x40>)
 80010d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <HAL_Init+0x40>)
 80010de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f000 f94f 	bl	8001388 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 f808 	bl	8001100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f0:	f7ff fd32 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023c00 	.word	0x40023c00

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x54>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_InitTick+0x58>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	fbb3 f3f1 	udiv	r3, r3, r1
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f967 	bl	80013f2 <HAL_SYSTICK_Config>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e00e      	b.n	800114c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d80a      	bhi.n	800114a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	2200      	movs	r2, #0
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f000 f92f 	bl	800139e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4a06      	ldr	r2, [pc, #24]	; (800115c <HAL_InitTick+0x5c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000000 	.word	0x20000000
 8001158:	20000008 	.word	0x20000008
 800115c:	20000004 	.word	0x20000004

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008
 8001184:	200002b8 	.word	0x200002b8

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	200002b8 	.word	0x200002b8

080011a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff ffee 	bl	8001188 <HAL_GetTick>
 80011ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b8:	d005      	beq.n	80011c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_Delay+0x44>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c6:	bf00      	nop
 80011c8:	f7ff ffde 	bl	8001188 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d8f7      	bhi.n	80011c8 <HAL_Delay+0x28>
  {
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121a:	4a04      	ldr	r2, [pc, #16]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	60d3      	str	r3, [r2, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0b      	blt.n	8001276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4907      	ldr	r1, [pc, #28]	; (8001284 <__NVIC_EnableIRQ+0x38>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2001      	movs	r0, #1
 800126e:	fa00 f202 	lsl.w	r2, r0, r2
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	; (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	; (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
         );
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001354:	d301      	bcc.n	800135a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001356:	2301      	movs	r3, #1
 8001358:	e00f      	b.n	800137a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <SysTick_Config+0x40>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001362:	210f      	movs	r1, #15
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f7ff ff8e 	bl	8001288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <SysTick_Config+0x40>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <SysTick_Config+0x40>)
 8001374:	2207      	movs	r2, #7
 8001376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	e000e010 	.word	0xe000e010

08001388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff29 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b0:	f7ff ff3e 	bl	8001230 <__NVIC_GetPriorityGrouping>
 80013b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	6978      	ldr	r0, [r7, #20]
 80013bc:	f7ff ff8e 	bl	80012dc <NVIC_EncodePriority>
 80013c0:	4602      	mov	r2, r0
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff5d 	bl	8001288 <__NVIC_SetPriority>
}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff31 	bl	800124c <__NVIC_EnableIRQ>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ffa2 	bl	8001344 <SysTick_Config>
 8001400:	4603      	mov	r3, r0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff feb6 	bl	8001188 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e099      	b.n	800155c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2202      	movs	r2, #2
 800142c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0201 	bic.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001448:	e00f      	b.n	800146a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800144a:	f7ff fe9d 	bl	8001188 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b05      	cmp	r3, #5
 8001456:	d908      	bls.n	800146a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2220      	movs	r2, #32
 800145c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2203      	movs	r2, #3
 8001462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e078      	b.n	800155c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1e8      	bne.n	800144a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	4b38      	ldr	r3, [pc, #224]	; (8001564 <HAL_DMA_Init+0x158>)
 8001484:	4013      	ands	r3, r2
 8001486:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001496:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d107      	bne.n	80014d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	4313      	orrs	r3, r2
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f023 0307 	bic.w	r3, r3, #7
 80014ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d117      	bne.n	800152e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4313      	orrs	r3, r2
 8001506:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00e      	beq.n	800152e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fb01 	bl	8001b18 <DMA_CheckFifoParam>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d008      	beq.n	800152e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2240      	movs	r2, #64	; 0x40
 8001520:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800152a:	2301      	movs	r3, #1
 800152c:	e016      	b.n	800155c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 fab8 	bl	8001aac <DMA_CalcBaseAndBitshift>
 800153c:	4603      	mov	r3, r0
 800153e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001544:	223f      	movs	r2, #63	; 0x3f
 8001546:	409a      	lsls	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	f010803f 	.word	0xf010803f

08001568 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001586:	2b01      	cmp	r3, #1
 8001588:	d101      	bne.n	800158e <HAL_DMA_Start_IT+0x26>
 800158a:	2302      	movs	r3, #2
 800158c:	e040      	b.n	8001610 <HAL_DMA_Start_IT+0xa8>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d12f      	bne.n	8001602 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2202      	movs	r2, #2
 80015a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f000 fa4a 	bl	8001a50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c0:	223f      	movs	r2, #63	; 0x3f
 80015c2:	409a      	lsls	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0216 	orr.w	r2, r2, #22
 80015d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d007      	beq.n	80015f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0208 	orr.w	r2, r2, #8
 80015ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0201 	orr.w	r2, r2, #1
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	e005      	b.n	800160e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800160a:	2302      	movs	r3, #2
 800160c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800160e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001624:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001626:	f7ff fdaf 	bl	8001188 <HAL_GetTick>
 800162a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d008      	beq.n	800164a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e052      	b.n	80016f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0216 	bic.w	r2, r2, #22
 8001658:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	695a      	ldr	r2, [r3, #20]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001668:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	2b00      	cmp	r3, #0
 8001670:	d103      	bne.n	800167a <HAL_DMA_Abort+0x62>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0208 	bic.w	r2, r2, #8
 8001688:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0201 	bic.w	r2, r2, #1
 8001698:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800169a:	e013      	b.n	80016c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800169c:	f7ff fd74 	bl	8001188 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b05      	cmp	r3, #5
 80016a8:	d90c      	bls.n	80016c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2220      	movs	r2, #32
 80016ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2203      	movs	r2, #3
 80016b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e015      	b.n	80016f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1e4      	bne.n	800169c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d6:	223f      	movs	r2, #63	; 0x3f
 80016d8:	409a      	lsls	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d004      	beq.n	8001716 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2280      	movs	r2, #128	; 0x80
 8001710:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e00c      	b.n	8001730 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2205      	movs	r2, #5
 800171a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0201 	bic.w	r2, r2, #1
 800172c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001748:	4b8e      	ldr	r3, [pc, #568]	; (8001984 <HAL_DMA_IRQHandler+0x248>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a8e      	ldr	r2, [pc, #568]	; (8001988 <HAL_DMA_IRQHandler+0x24c>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	0a9b      	lsrs	r3, r3, #10
 8001754:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001766:	2208      	movs	r2, #8
 8001768:	409a      	lsls	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4013      	ands	r3, r2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d01a      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d013      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0204 	bic.w	r2, r2, #4
 800178e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001794:	2208      	movs	r2, #8
 8001796:	409a      	lsls	r2, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ac:	2201      	movs	r2, #1
 80017ae:	409a      	lsls	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d012      	beq.n	80017de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00b      	beq.n	80017de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ca:	2201      	movs	r2, #1
 80017cc:	409a      	lsls	r2, r3
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d6:	f043 0202 	orr.w	r2, r3, #2
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e2:	2204      	movs	r2, #4
 80017e4:	409a      	lsls	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d012      	beq.n	8001814 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00b      	beq.n	8001814 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001800:	2204      	movs	r2, #4
 8001802:	409a      	lsls	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180c:	f043 0204 	orr.w	r2, r3, #4
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001818:	2210      	movs	r2, #16
 800181a:	409a      	lsls	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d043      	beq.n	80018ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d03c      	beq.n	80018ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001836:	2210      	movs	r2, #16
 8001838:	409a      	lsls	r2, r3
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d018      	beq.n	800187e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d108      	bne.n	800186c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	2b00      	cmp	r3, #0
 8001860:	d024      	beq.n	80018ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	4798      	blx	r3
 800186a:	e01f      	b.n	80018ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001870:	2b00      	cmp	r3, #0
 8001872:	d01b      	beq.n	80018ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	4798      	blx	r3
 800187c:	e016      	b.n	80018ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001888:	2b00      	cmp	r3, #0
 800188a:	d107      	bne.n	800189c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0208 	bic.w	r2, r2, #8
 800189a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b0:	2220      	movs	r2, #32
 80018b2:	409a      	lsls	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 808f 	beq.w	80019dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0310 	and.w	r3, r3, #16
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 8087 	beq.w	80019dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d2:	2220      	movs	r2, #32
 80018d4:	409a      	lsls	r2, r3
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	d136      	bne.n	8001954 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0216 	bic.w	r2, r2, #22
 80018f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695a      	ldr	r2, [r3, #20]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001904:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	2b00      	cmp	r3, #0
 800190c:	d103      	bne.n	8001916 <HAL_DMA_IRQHandler+0x1da>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0208 	bic.w	r2, r2, #8
 8001924:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192a:	223f      	movs	r2, #63	; 0x3f
 800192c:	409a      	lsls	r2, r3
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001946:	2b00      	cmp	r3, #0
 8001948:	d07e      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	4798      	blx	r3
        }
        return;
 8001952:	e079      	b.n	8001a48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d01d      	beq.n	800199e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10d      	bne.n	800198c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	2b00      	cmp	r3, #0
 8001976:	d031      	beq.n	80019dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	4798      	blx	r3
 8001980:	e02c      	b.n	80019dc <HAL_DMA_IRQHandler+0x2a0>
 8001982:	bf00      	nop
 8001984:	20000000 	.word	0x20000000
 8001988:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001990:	2b00      	cmp	r3, #0
 8001992:	d023      	beq.n	80019dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
 800199c:	e01e      	b.n	80019dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10f      	bne.n	80019cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0210 	bic.w	r2, r2, #16
 80019ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d032      	beq.n	8001a4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d022      	beq.n	8001a36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2205      	movs	r2, #5
 80019f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0201 	bic.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d307      	bcc.n	8001a24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f2      	bne.n	8001a08 <HAL_DMA_IRQHandler+0x2cc>
 8001a22:	e000      	b.n	8001a26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	4798      	blx	r3
 8001a46:	e000      	b.n	8001a4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a48:	bf00      	nop
    }
  }
}
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b40      	cmp	r3, #64	; 0x40
 8001a7c:	d108      	bne.n	8001a90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a8e:	e007      	b.n	8001aa0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	60da      	str	r2, [r3, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	3b10      	subs	r3, #16
 8001abc:	4a14      	ldr	r2, [pc, #80]	; (8001b10 <DMA_CalcBaseAndBitshift+0x64>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ac6:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <DMA_CalcBaseAndBitshift+0x68>)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d909      	bls.n	8001aee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ae2:	f023 0303 	bic.w	r3, r3, #3
 8001ae6:	1d1a      	adds	r2, r3, #4
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	659a      	str	r2, [r3, #88]	; 0x58
 8001aec:	e007      	b.n	8001afe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001af6:	f023 0303 	bic.w	r3, r3, #3
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	aaaaaaab 	.word	0xaaaaaaab
 8001b14:	0800a370 	.word	0x0800a370

08001b18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d11f      	bne.n	8001b72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d856      	bhi.n	8001be6 <DMA_CheckFifoParam+0xce>
 8001b38:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <DMA_CheckFifoParam+0x28>)
 8001b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3e:	bf00      	nop
 8001b40:	08001b51 	.word	0x08001b51
 8001b44:	08001b63 	.word	0x08001b63
 8001b48:	08001b51 	.word	0x08001b51
 8001b4c:	08001be7 	.word	0x08001be7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d046      	beq.n	8001bea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b60:	e043      	b.n	8001bea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b6a:	d140      	bne.n	8001bee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b70:	e03d      	b.n	8001bee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b7a:	d121      	bne.n	8001bc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d837      	bhi.n	8001bf2 <DMA_CheckFifoParam+0xda>
 8001b82:	a201      	add	r2, pc, #4	; (adr r2, 8001b88 <DMA_CheckFifoParam+0x70>)
 8001b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b88:	08001b99 	.word	0x08001b99
 8001b8c:	08001b9f 	.word	0x08001b9f
 8001b90:	08001b99 	.word	0x08001b99
 8001b94:	08001bb1 	.word	0x08001bb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b9c:	e030      	b.n	8001c00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d025      	beq.n	8001bf6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bae:	e022      	b.n	8001bf6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bb8:	d11f      	bne.n	8001bfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bbe:	e01c      	b.n	8001bfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d903      	bls.n	8001bce <DMA_CheckFifoParam+0xb6>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d003      	beq.n	8001bd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bcc:	e018      	b.n	8001c00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8001bd2:	e015      	b.n	8001c00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00e      	beq.n	8001bfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
      break;
 8001be4:	e00b      	b.n	8001bfe <DMA_CheckFifoParam+0xe6>
      break;
 8001be6:	bf00      	nop
 8001be8:	e00a      	b.n	8001c00 <DMA_CheckFifoParam+0xe8>
      break;
 8001bea:	bf00      	nop
 8001bec:	e008      	b.n	8001c00 <DMA_CheckFifoParam+0xe8>
      break;
 8001bee:	bf00      	nop
 8001bf0:	e006      	b.n	8001c00 <DMA_CheckFifoParam+0xe8>
      break;
 8001bf2:	bf00      	nop
 8001bf4:	e004      	b.n	8001c00 <DMA_CheckFifoParam+0xe8>
      break;
 8001bf6:	bf00      	nop
 8001bf8:	e002      	b.n	8001c00 <DMA_CheckFifoParam+0xe8>
      break;   
 8001bfa:	bf00      	nop
 8001bfc:	e000      	b.n	8001c00 <DMA_CheckFifoParam+0xe8>
      break;
 8001bfe:	bf00      	nop
    }
  } 
  
  return status; 
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop

08001c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	e16b      	b.n	8001f04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	f040 815a 	bne.w	8001efe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d005      	beq.n	8001c62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d130      	bne.n	8001cc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c98:	2201      	movs	r2, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f003 0201 	and.w	r2, r3, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d017      	beq.n	8001d00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d123      	bne.n	8001d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	08da      	lsrs	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3208      	adds	r2, #8
 8001d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	220f      	movs	r2, #15
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	08da      	lsrs	r2, r3, #3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3208      	adds	r2, #8
 8001d4e:	69b9      	ldr	r1, [r7, #24]
 8001d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0203 	and.w	r2, r3, #3
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80b4 	beq.w	8001efe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	4b60      	ldr	r3, [pc, #384]	; (8001f1c <HAL_GPIO_Init+0x30c>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	4a5f      	ldr	r2, [pc, #380]	; (8001f1c <HAL_GPIO_Init+0x30c>)
 8001da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da4:	6453      	str	r3, [r2, #68]	; 0x44
 8001da6:	4b5d      	ldr	r3, [pc, #372]	; (8001f1c <HAL_GPIO_Init+0x30c>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001db2:	4a5b      	ldr	r2, [pc, #364]	; (8001f20 <HAL_GPIO_Init+0x310>)
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	3302      	adds	r3, #2
 8001dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	220f      	movs	r2, #15
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a52      	ldr	r2, [pc, #328]	; (8001f24 <HAL_GPIO_Init+0x314>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d02b      	beq.n	8001e36 <HAL_GPIO_Init+0x226>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a51      	ldr	r2, [pc, #324]	; (8001f28 <HAL_GPIO_Init+0x318>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d025      	beq.n	8001e32 <HAL_GPIO_Init+0x222>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a50      	ldr	r2, [pc, #320]	; (8001f2c <HAL_GPIO_Init+0x31c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d01f      	beq.n	8001e2e <HAL_GPIO_Init+0x21e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4f      	ldr	r2, [pc, #316]	; (8001f30 <HAL_GPIO_Init+0x320>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d019      	beq.n	8001e2a <HAL_GPIO_Init+0x21a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4e      	ldr	r2, [pc, #312]	; (8001f34 <HAL_GPIO_Init+0x324>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_GPIO_Init+0x216>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4d      	ldr	r2, [pc, #308]	; (8001f38 <HAL_GPIO_Init+0x328>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00d      	beq.n	8001e22 <HAL_GPIO_Init+0x212>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4c      	ldr	r2, [pc, #304]	; (8001f3c <HAL_GPIO_Init+0x32c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d007      	beq.n	8001e1e <HAL_GPIO_Init+0x20e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4b      	ldr	r2, [pc, #300]	; (8001f40 <HAL_GPIO_Init+0x330>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d101      	bne.n	8001e1a <HAL_GPIO_Init+0x20a>
 8001e16:	2307      	movs	r3, #7
 8001e18:	e00e      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e1a:	2308      	movs	r3, #8
 8001e1c:	e00c      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e1e:	2306      	movs	r3, #6
 8001e20:	e00a      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e22:	2305      	movs	r3, #5
 8001e24:	e008      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e26:	2304      	movs	r3, #4
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e004      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e36:	2300      	movs	r3, #0
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	f002 0203 	and.w	r2, r2, #3
 8001e3e:	0092      	lsls	r2, r2, #2
 8001e40:	4093      	lsls	r3, r2
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e48:	4935      	ldr	r1, [pc, #212]	; (8001f20 <HAL_GPIO_Init+0x310>)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e56:	4b3b      	ldr	r3, [pc, #236]	; (8001f44 <HAL_GPIO_Init+0x334>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e7a:	4a32      	ldr	r2, [pc, #200]	; (8001f44 <HAL_GPIO_Init+0x334>)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e80:	4b30      	ldr	r3, [pc, #192]	; (8001f44 <HAL_GPIO_Init+0x334>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ea4:	4a27      	ldr	r2, [pc, #156]	; (8001f44 <HAL_GPIO_Init+0x334>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eaa:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <HAL_GPIO_Init+0x334>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ece:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <HAL_GPIO_Init+0x334>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <HAL_GPIO_Init+0x334>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef8:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <HAL_GPIO_Init+0x334>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3301      	adds	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	2b0f      	cmp	r3, #15
 8001f08:	f67f ae90 	bls.w	8001c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3724      	adds	r7, #36	; 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40013800 	.word	0x40013800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40021400 	.word	0x40021400
 8001f3c:	40021800 	.word	0x40021800
 8001f40:	40021c00 	.word	0x40021c00
 8001f44:	40013c00 	.word	0x40013c00

08001f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
 8001f54:	4613      	mov	r3, r2
 8001f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f58:	787b      	ldrb	r3, [r7, #1]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5e:	887a      	ldrh	r2, [r7, #2]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f64:	e003      	b.n	8001f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f66:	887b      	ldrh	r3, [r7, #2]
 8001f68:	041a      	lsls	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	619a      	str	r2, [r3, #24]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f7c:	b08f      	sub	sp, #60	; 0x3c
 8001f7e:	af0a      	add	r7, sp, #40	; 0x28
 8001f80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e054      	b.n	8002036 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f007 fa6a 	bl	8009480 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2203      	movs	r2, #3
 8001fb0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f004 fa98 	bl	8006500 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	603b      	str	r3, [r7, #0]
 8001fd6:	687e      	ldr	r6, [r7, #4]
 8001fd8:	466d      	mov	r5, sp
 8001fda:	f106 0410 	add.w	r4, r6, #16
 8001fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fea:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fee:	1d33      	adds	r3, r6, #4
 8001ff0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ff2:	6838      	ldr	r0, [r7, #0]
 8001ff4:	f004 fa12 	bl	800641c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	4618      	mov	r0, r3
 8002000:	f004 fa8f 	bl	8006522 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	687e      	ldr	r6, [r7, #4]
 800200c:	466d      	mov	r5, sp
 800200e:	f106 0410 	add.w	r4, r6, #16
 8002012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002018:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800201a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800201e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002022:	1d33      	adds	r3, r6, #4
 8002024:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002026:	6838      	ldr	r0, [r7, #0]
 8002028:	f004 fc18 	bl	800685c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800203e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800203e:	b590      	push	{r4, r7, lr}
 8002040:	b089      	sub	sp, #36	; 0x24
 8002042:	af04      	add	r7, sp, #16
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	4608      	mov	r0, r1
 8002048:	4611      	mov	r1, r2
 800204a:	461a      	mov	r2, r3
 800204c:	4603      	mov	r3, r0
 800204e:	70fb      	strb	r3, [r7, #3]
 8002050:	460b      	mov	r3, r1
 8002052:	70bb      	strb	r3, [r7, #2]
 8002054:	4613      	mov	r3, r2
 8002056:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_HCD_HC_Init+0x28>
 8002062:	2302      	movs	r3, #2
 8002064:	e076      	b.n	8002154 <HAL_HCD_HC_Init+0x116>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	212c      	movs	r1, #44	; 0x2c
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	4413      	add	r3, r2
 800207a:	333d      	adds	r3, #61	; 0x3d
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	212c      	movs	r1, #44	; 0x2c
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	3338      	adds	r3, #56	; 0x38
 800208e:	787a      	ldrb	r2, [r7, #1]
 8002090:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	212c      	movs	r1, #44	; 0x2c
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	3340      	adds	r3, #64	; 0x40
 80020a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80020a2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	212c      	movs	r1, #44	; 0x2c
 80020aa:	fb01 f303 	mul.w	r3, r1, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	3339      	adds	r3, #57	; 0x39
 80020b2:	78fa      	ldrb	r2, [r7, #3]
 80020b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	333f      	adds	r3, #63	; 0x3f
 80020c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80020c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	78ba      	ldrb	r2, [r7, #2]
 80020ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020d2:	b2d0      	uxtb	r0, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	212c      	movs	r1, #44	; 0x2c
 80020d8:	fb01 f303 	mul.w	r3, r1, r3
 80020dc:	4413      	add	r3, r2
 80020de:	333a      	adds	r3, #58	; 0x3a
 80020e0:	4602      	mov	r2, r0
 80020e2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80020e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	da09      	bge.n	8002100 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	212c      	movs	r1, #44	; 0x2c
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	333b      	adds	r3, #59	; 0x3b
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	e008      	b.n	8002112 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	212c      	movs	r1, #44	; 0x2c
 8002106:	fb01 f303 	mul.w	r3, r1, r3
 800210a:	4413      	add	r3, r2
 800210c:	333b      	adds	r3, #59	; 0x3b
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	212c      	movs	r1, #44	; 0x2c
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	4413      	add	r3, r2
 800211e:	333c      	adds	r3, #60	; 0x3c
 8002120:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002124:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	787c      	ldrb	r4, [r7, #1]
 800212c:	78ba      	ldrb	r2, [r7, #2]
 800212e:	78f9      	ldrb	r1, [r7, #3]
 8002130:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002132:	9302      	str	r3, [sp, #8]
 8002134:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	4623      	mov	r3, r4
 8002142:	f004 fd11 	bl	8006b68 <USB_HC_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002152:	7bfb      	ldrb	r3, [r7, #15]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bd90      	pop	{r4, r7, pc}

0800215c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_HCD_HC_Halt+0x1e>
 8002176:	2302      	movs	r3, #2
 8002178:	e00f      	b.n	800219a <HAL_HCD_HC_Halt+0x3e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	78fa      	ldrb	r2, [r7, #3]
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f004 ff61 	bl	8007052 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	4608      	mov	r0, r1
 80021ae:	4611      	mov	r1, r2
 80021b0:	461a      	mov	r2, r3
 80021b2:	4603      	mov	r3, r0
 80021b4:	70fb      	strb	r3, [r7, #3]
 80021b6:	460b      	mov	r3, r1
 80021b8:	70bb      	strb	r3, [r7, #2]
 80021ba:	4613      	mov	r3, r2
 80021bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	212c      	movs	r1, #44	; 0x2c
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	333b      	adds	r3, #59	; 0x3b
 80021cc:	78ba      	ldrb	r2, [r7, #2]
 80021ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	212c      	movs	r1, #44	; 0x2c
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	333f      	adds	r3, #63	; 0x3f
 80021de:	787a      	ldrb	r2, [r7, #1]
 80021e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80021e2:	7c3b      	ldrb	r3, [r7, #16]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d112      	bne.n	800220e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	3342      	adds	r3, #66	; 0x42
 80021f6:	2203      	movs	r2, #3
 80021f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	212c      	movs	r1, #44	; 0x2c
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	333d      	adds	r3, #61	; 0x3d
 8002208:	7f3a      	ldrb	r2, [r7, #28]
 800220a:	701a      	strb	r2, [r3, #0]
 800220c:	e008      	b.n	8002220 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	212c      	movs	r1, #44	; 0x2c
 8002214:	fb01 f303 	mul.w	r3, r1, r3
 8002218:	4413      	add	r3, r2
 800221a:	3342      	adds	r3, #66	; 0x42
 800221c:	2202      	movs	r2, #2
 800221e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002220:	787b      	ldrb	r3, [r7, #1]
 8002222:	2b03      	cmp	r3, #3
 8002224:	f200 80c6 	bhi.w	80023b4 <HAL_HCD_HC_SubmitRequest+0x210>
 8002228:	a201      	add	r2, pc, #4	; (adr r2, 8002230 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800222a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222e:	bf00      	nop
 8002230:	08002241 	.word	0x08002241
 8002234:	080023a1 	.word	0x080023a1
 8002238:	080022a5 	.word	0x080022a5
 800223c:	08002323 	.word	0x08002323
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002240:	7c3b      	ldrb	r3, [r7, #16]
 8002242:	2b01      	cmp	r3, #1
 8002244:	f040 80b8 	bne.w	80023b8 <HAL_HCD_HC_SubmitRequest+0x214>
 8002248:	78bb      	ldrb	r3, [r7, #2]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f040 80b4 	bne.w	80023b8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002250:	8b3b      	ldrh	r3, [r7, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d108      	bne.n	8002268 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002256:	78fb      	ldrb	r3, [r7, #3]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	212c      	movs	r1, #44	; 0x2c
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	4413      	add	r3, r2
 8002262:	3355      	adds	r3, #85	; 0x55
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	212c      	movs	r1, #44	; 0x2c
 800226e:	fb01 f303 	mul.w	r3, r1, r3
 8002272:	4413      	add	r3, r2
 8002274:	3355      	adds	r3, #85	; 0x55
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	212c      	movs	r1, #44	; 0x2c
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4413      	add	r3, r2
 8002288:	3342      	adds	r3, #66	; 0x42
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800228e:	e093      	b.n	80023b8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	212c      	movs	r1, #44	; 0x2c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	3342      	adds	r3, #66	; 0x42
 800229e:	2202      	movs	r2, #2
 80022a0:	701a      	strb	r2, [r3, #0]
      break;
 80022a2:	e089      	b.n	80023b8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80022a4:	78bb      	ldrb	r3, [r7, #2]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d11d      	bne.n	80022e6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	212c      	movs	r1, #44	; 0x2c
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	3355      	adds	r3, #85	; 0x55
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	212c      	movs	r1, #44	; 0x2c
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	3342      	adds	r3, #66	; 0x42
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80022d0:	e073      	b.n	80023ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	212c      	movs	r1, #44	; 0x2c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	3342      	adds	r3, #66	; 0x42
 80022e0:	2202      	movs	r2, #2
 80022e2:	701a      	strb	r2, [r3, #0]
      break;
 80022e4:	e069      	b.n	80023ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	212c      	movs	r1, #44	; 0x2c
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	3354      	adds	r3, #84	; 0x54
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	3342      	adds	r3, #66	; 0x42
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
      break;
 800230c:	e055      	b.n	80023ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800230e:	78fb      	ldrb	r3, [r7, #3]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	3342      	adds	r3, #66	; 0x42
 800231c:	2202      	movs	r2, #2
 800231e:	701a      	strb	r2, [r3, #0]
      break;
 8002320:	e04b      	b.n	80023ba <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002322:	78bb      	ldrb	r3, [r7, #2]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d11d      	bne.n	8002364 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	3355      	adds	r3, #85	; 0x55
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d109      	bne.n	8002350 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	212c      	movs	r1, #44	; 0x2c
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	4413      	add	r3, r2
 8002348:	3342      	adds	r3, #66	; 0x42
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800234e:	e034      	b.n	80023ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	212c      	movs	r1, #44	; 0x2c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	3342      	adds	r3, #66	; 0x42
 800235e:	2202      	movs	r2, #2
 8002360:	701a      	strb	r2, [r3, #0]
      break;
 8002362:	e02a      	b.n	80023ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	212c      	movs	r1, #44	; 0x2c
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	3354      	adds	r3, #84	; 0x54
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d109      	bne.n	800238c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	212c      	movs	r1, #44	; 0x2c
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	3342      	adds	r3, #66	; 0x42
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
      break;
 800238a:	e016      	b.n	80023ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	3342      	adds	r3, #66	; 0x42
 800239a:	2202      	movs	r2, #2
 800239c:	701a      	strb	r2, [r3, #0]
      break;
 800239e:	e00c      	b.n	80023ba <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	3342      	adds	r3, #66	; 0x42
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
      break;
 80023b2:	e002      	b.n	80023ba <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80023b4:	bf00      	nop
 80023b6:	e000      	b.n	80023ba <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80023b8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80023ba:	78fb      	ldrb	r3, [r7, #3]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	212c      	movs	r1, #44	; 0x2c
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	3344      	adds	r3, #68	; 0x44
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	8b3a      	ldrh	r2, [r7, #24]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	202c      	movs	r0, #44	; 0x2c
 80023d4:	fb00 f303 	mul.w	r3, r0, r3
 80023d8:	440b      	add	r3, r1
 80023da:	334c      	adds	r3, #76	; 0x4c
 80023dc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	212c      	movs	r1, #44	; 0x2c
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	3360      	adds	r3, #96	; 0x60
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	212c      	movs	r1, #44	; 0x2c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	3350      	adds	r3, #80	; 0x50
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	3339      	adds	r3, #57	; 0x39
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	212c      	movs	r1, #44	; 0x2c
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	4413      	add	r3, r2
 8002420:	3361      	adds	r3, #97	; 0x61
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	78fb      	ldrb	r3, [r7, #3]
 800242c:	222c      	movs	r2, #44	; 0x2c
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	3338      	adds	r3, #56	; 0x38
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	18d1      	adds	r1, r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	f004 fcb4 	bl	8006dac <USB_HC_StartXfer>
 8002444:	4603      	mov	r3, r0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop

08002450 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f004 f9b5 	bl	80067d6 <USB_GetMode>
 800246c:	4603      	mov	r3, r0
 800246e:	2b01      	cmp	r3, #1
 8002470:	f040 80f6 	bne.w	8002660 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f004 f999 	bl	80067b0 <USB_ReadInterrupts>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80ec 	beq.w	800265e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f004 f990 	bl	80067b0 <USB_ReadInterrupts>
 8002490:	4603      	mov	r3, r0
 8002492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800249a:	d104      	bne.n	80024a6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80024a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f004 f980 	bl	80067b0 <USB_ReadInterrupts>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024ba:	d104      	bne.n	80024c6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f004 f970 	bl	80067b0 <USB_ReadInterrupts>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024da:	d104      	bne.n	80024e6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f004 f960 	bl	80067b0 <USB_ReadInterrupts>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d103      	bne.n	8002502 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2202      	movs	r2, #2
 8002500:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f004 f952 	bl	80067b0 <USB_ReadInterrupts>
 800250c:	4603      	mov	r3, r0
 800250e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002516:	d11c      	bne.n	8002552 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002520:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10f      	bne.n	8002552 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002532:	2110      	movs	r1, #16
 8002534:	6938      	ldr	r0, [r7, #16]
 8002536:	f004 f841 	bl	80065bc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800253a:	6938      	ldr	r0, [r7, #16]
 800253c:	f004 f872 	bl	8006624 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2101      	movs	r1, #1
 8002546:	4618      	mov	r0, r3
 8002548:	f004 fa48 	bl	80069dc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f007 f815 	bl	800957c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f004 f92a 	bl	80067b0 <USB_ReadInterrupts>
 800255c:	4603      	mov	r3, r0
 800255e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002562:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002566:	d102      	bne.n	800256e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f001 f89e 	bl	80036aa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f004 f91c 	bl	80067b0 <USB_ReadInterrupts>
 8002578:	4603      	mov	r3, r0
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b08      	cmp	r3, #8
 8002580:	d106      	bne.n	8002590 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f006 ffde 	bl	8009544 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2208      	movs	r2, #8
 800258e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f004 f90b 	bl	80067b0 <USB_ReadInterrupts>
 800259a:	4603      	mov	r3, r0
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	2b10      	cmp	r3, #16
 80025a2:	d101      	bne.n	80025a8 <HAL_HCD_IRQHandler+0x158>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <HAL_HCD_IRQHandler+0x15a>
 80025a8:	2300      	movs	r3, #0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d012      	beq.n	80025d4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699a      	ldr	r2, [r3, #24]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0210 	bic.w	r2, r2, #16
 80025bc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 ffa1 	bl	8003506 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699a      	ldr	r2, [r3, #24]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0210 	orr.w	r2, r2, #16
 80025d2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f004 f8e9 	bl	80067b0 <USB_ReadInterrupts>
 80025de:	4603      	mov	r3, r0
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025e8:	d13a      	bne.n	8002660 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f004 fd1e 	bl	8007030 <USB_HC_ReadInterrupt>
 80025f4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	e025      	b.n	8002648 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	fa22 f303 	lsr.w	r3, r2, r3
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d018      	beq.n	8002642 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002626:	d106      	bne.n	8002636 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	4619      	mov	r1, r3
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f8ab 	bl	800278a <HCD_HC_IN_IRQHandler>
 8002634:	e005      	b.n	8002642 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	4619      	mov	r1, r3
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 fbf9 	bl	8002e34 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3301      	adds	r3, #1
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	429a      	cmp	r2, r3
 8002650:	d3d4      	bcc.n	80025fc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800265a:	615a      	str	r2, [r3, #20]
 800265c:	e000      	b.n	8002660 <HAL_HCD_IRQHandler+0x210>
      return;
 800265e:	bf00      	nop
    }
  }
}
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_HCD_Start+0x16>
 8002678:	2302      	movs	r3, #2
 800267a:	e013      	b.n	80026a4 <HAL_HCD_Start+0x3e>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2101      	movs	r1, #1
 800268a:	4618      	mov	r0, r3
 800268c:	f004 fa0a 	bl	8006aa4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f003 ff22 	bl	80064de <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_HCD_Stop+0x16>
 80026be:	2302      	movs	r3, #2
 80026c0:	e00d      	b.n	80026de <HAL_HCD_Stop+0x32>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f004 fdf8 	bl	80072c4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f004 f9ac 	bl	8006a50 <USB_ResetPort>
 80026f8:	4603      	mov	r3, r0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	460b      	mov	r3, r1
 800270c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	3360      	adds	r3, #96	; 0x60
 800271c:	781b      	ldrb	r3, [r3, #0]
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	3350      	adds	r3, #80	; 0x50
 8002744:	681b      	ldr	r3, [r3, #0]
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f004 f9f0 	bl	8006b44 <USB_GetCurrentFrame>
 8002764:	4603      	mov	r3, r0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f004 f9cb 	bl	8006b16 <USB_GetHostSpeed>
 8002780:	4603      	mov	r3, r0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d11a      	bne.n	80027f0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c6:	461a      	mov	r2, r3
 80027c8:	2304      	movs	r3, #4
 80027ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	212c      	movs	r1, #44	; 0x2c
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	3361      	adds	r3, #97	; 0x61
 80027da:	2206      	movs	r2, #6
 80027dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f004 fc32 	bl	8007052 <USB_HC_Halt>
 80027ee:	e0af      	b.n	8002950 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002806:	d11b      	bne.n	8002840 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4413      	add	r3, r2
 8002810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002814:	461a      	mov	r2, r3
 8002816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800281a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	3361      	adds	r3, #97	; 0x61
 800282a:	2207      	movs	r2, #7
 800282c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f004 fc0a 	bl	8007052 <USB_HC_Halt>
 800283e:	e087      	b.n	8002950 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b20      	cmp	r3, #32
 8002854:	d109      	bne.n	800286a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002862:	461a      	mov	r2, r3
 8002864:	2320      	movs	r3, #32
 8002866:	6093      	str	r3, [r2, #8]
 8002868:	e072      	b.n	8002950 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4413      	add	r3, r2
 8002872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b08      	cmp	r3, #8
 800287e:	d11a      	bne.n	80028b6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4413      	add	r3, r2
 8002888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288c:	461a      	mov	r2, r3
 800288e:	2308      	movs	r3, #8
 8002890:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	3361      	adds	r3, #97	; 0x61
 80028a0:	2205      	movs	r2, #5
 80028a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f004 fbcf 	bl	8007052 <USB_HC_Halt>
 80028b4:	e04c      	b.n	8002950 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028cc:	d11b      	bne.n	8002906 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028da:	461a      	mov	r2, r3
 80028dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	3361      	adds	r3, #97	; 0x61
 80028f0:	2208      	movs	r2, #8
 80028f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f004 fba7 	bl	8007052 <USB_HC_Halt>
 8002904:	e024      	b.n	8002950 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4413      	add	r3, r2
 800290e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002918:	2b80      	cmp	r3, #128	; 0x80
 800291a:	d119      	bne.n	8002950 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002928:	461a      	mov	r2, r3
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	3361      	adds	r3, #97	; 0x61
 800293c:	2206      	movs	r2, #6
 800293e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	4611      	mov	r1, r2
 800294a:	4618      	mov	r0, r3
 800294c:	f004 fb81 	bl	8007052 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002966:	d112      	bne.n	800298e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f004 fb6d 	bl	8007052 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	461a      	mov	r2, r3
 8002986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800298a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800298c:	e24e      	b.n	8002e2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	f040 80df 	bne.w	8002b64 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d019      	beq.n	80029e2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3348      	adds	r3, #72	; 0x48
 80029bc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	0159      	lsls	r1, r3, #5
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	440b      	add	r3, r1
 80029c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80029d0:	1ad2      	subs	r2, r2, r3
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	202c      	movs	r0, #44	; 0x2c
 80029d8:	fb00 f303 	mul.w	r3, r0, r3
 80029dc:	440b      	add	r3, r1
 80029de:	3350      	adds	r3, #80	; 0x50
 80029e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	3361      	adds	r3, #97	; 0x61
 80029f0:	2201      	movs	r2, #1
 80029f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	335c      	adds	r3, #92	; 0x5c
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a12:	461a      	mov	r2, r3
 8002a14:	2301      	movs	r3, #1
 8002a16:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	333f      	adds	r3, #63	; 0x3f
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d009      	beq.n	8002a40 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	333f      	adds	r3, #63	; 0x3f
 8002a3a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d111      	bne.n	8002a64 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f004 fb01 	bl	8007052 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2310      	movs	r3, #16
 8002a60:	6093      	str	r3, [r2, #8]
 8002a62:	e03a      	b.n	8002ada <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	212c      	movs	r1, #44	; 0x2c
 8002a6a:	fb01 f303 	mul.w	r3, r1, r3
 8002a6e:	4413      	add	r3, r2
 8002a70:	333f      	adds	r3, #63	; 0x3f
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d009      	beq.n	8002a8c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	333f      	adds	r3, #63	; 0x3f
 8002a86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d126      	bne.n	8002ada <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	0151      	lsls	r1, r2, #5
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	440a      	add	r2, r1
 8002aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002aaa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3360      	adds	r3, #96	; 0x60
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	b2d9      	uxtb	r1, r3
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	202c      	movs	r0, #44	; 0x2c
 8002ac8:	fb00 f303 	mul.w	r3, r0, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	3360      	adds	r3, #96	; 0x60
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f006 fd5f 	bl	8009598 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d12b      	bne.n	8002b3a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	3348      	adds	r3, #72	; 0x48
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	202c      	movs	r0, #44	; 0x2c
 8002af8:	fb00 f202 	mul.w	r2, r0, r2
 8002afc:	440a      	add	r2, r1
 8002afe:	3240      	adds	r2, #64	; 0x40
 8002b00:	8812      	ldrh	r2, [r2, #0]
 8002b02:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 818e 	beq.w	8002e2c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3354      	adds	r3, #84	; 0x54
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	f083 0301 	eor.w	r3, r3, #1
 8002b24:	b2d8      	uxtb	r0, r3
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	3354      	adds	r3, #84	; 0x54
 8002b34:	4602      	mov	r2, r0
 8002b36:	701a      	strb	r2, [r3, #0]
}
 8002b38:	e178      	b.n	8002e2c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	3354      	adds	r3, #84	; 0x54
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	f083 0301 	eor.w	r3, r3, #1
 8002b4e:	b2d8      	uxtb	r0, r3
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3354      	adds	r3, #84	; 0x54
 8002b5e:	4602      	mov	r2, r0
 8002b60:	701a      	strb	r2, [r3, #0]
}
 8002b62:	e163      	b.n	8002e2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	f040 80f6 	bne.w	8002d68 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	3361      	adds	r3, #97	; 0x61
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d109      	bne.n	8002ba4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3360      	adds	r3, #96	; 0x60
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	e0c9      	b.n	8002d38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	212c      	movs	r1, #44	; 0x2c
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	3361      	adds	r3, #97	; 0x61
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b05      	cmp	r3, #5
 8002bb6:	d109      	bne.n	8002bcc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	212c      	movs	r1, #44	; 0x2c
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3360      	adds	r3, #96	; 0x60
 8002bc6:	2205      	movs	r2, #5
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	e0b5      	b.n	8002d38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	212c      	movs	r1, #44	; 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3361      	adds	r3, #97	; 0x61
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b06      	cmp	r3, #6
 8002bde:	d009      	beq.n	8002bf4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	3361      	adds	r3, #97	; 0x61
 8002bee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d150      	bne.n	8002c96 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	212c      	movs	r1, #44	; 0x2c
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	335c      	adds	r3, #92	; 0x5c
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	202c      	movs	r0, #44	; 0x2c
 8002c0c:	fb00 f303 	mul.w	r3, r0, r3
 8002c10:	440b      	add	r3, r1
 8002c12:	335c      	adds	r3, #92	; 0x5c
 8002c14:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	335c      	adds	r3, #92	; 0x5c
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d912      	bls.n	8002c50 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	335c      	adds	r3, #92	; 0x5c
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3360      	adds	r3, #96	; 0x60
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c4e:	e073      	b.n	8002d38 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3360      	adds	r3, #96	; 0x60
 8002c5e:	2202      	movs	r2, #2
 8002c60:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c78:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c80:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8e:	461a      	mov	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c94:	e050      	b.n	8002d38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	212c      	movs	r1, #44	; 0x2c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3361      	adds	r3, #97	; 0x61
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d122      	bne.n	8002cf0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	212c      	movs	r1, #44	; 0x2c
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3360      	adds	r3, #96	; 0x60
 8002cb8:	2202      	movs	r2, #2
 8002cba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cd2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cda:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	461a      	mov	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	e023      	b.n	8002d38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3361      	adds	r3, #97	; 0x61
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b07      	cmp	r3, #7
 8002d02:	d119      	bne.n	8002d38 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	335c      	adds	r3, #92	; 0x5c
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	202c      	movs	r0, #44	; 0x2c
 8002d1c:	fb00 f303 	mul.w	r3, r0, r3
 8002d20:	440b      	add	r3, r1
 8002d22:	335c      	adds	r3, #92	; 0x5c
 8002d24:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	212c      	movs	r1, #44	; 0x2c
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	3360      	adds	r3, #96	; 0x60
 8002d34:	2204      	movs	r2, #4
 8002d36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d44:	461a      	mov	r2, r3
 8002d46:	2302      	movs	r3, #2
 8002d48:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	b2d9      	uxtb	r1, r3
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	202c      	movs	r0, #44	; 0x2c
 8002d54:	fb00 f303 	mul.w	r3, r0, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3360      	adds	r3, #96	; 0x60
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f006 fc19 	bl	8009598 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d66:	e061      	b.n	8002e2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b10      	cmp	r3, #16
 8002d7c:	d156      	bne.n	8002e2c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	212c      	movs	r1, #44	; 0x2c
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	333f      	adds	r3, #63	; 0x3f
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d111      	bne.n	8002db6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	212c      	movs	r1, #44	; 0x2c
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	335c      	adds	r3, #92	; 0x5c
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f004 f94f 	bl	8007052 <USB_HC_Halt>
 8002db4:	e031      	b.n	8002e1a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	333f      	adds	r3, #63	; 0x3f
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d009      	beq.n	8002dde <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	333f      	adds	r3, #63	; 0x3f
 8002dd8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d11d      	bne.n	8002e1a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	335c      	adds	r3, #92	; 0x5c
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d110      	bne.n	8002e1a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3361      	adds	r3, #97	; 0x61
 8002e06:	2203      	movs	r2, #3
 8002e08:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f004 f91c 	bl	8007052 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	015a      	lsls	r2, r3, #5
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e26:	461a      	mov	r2, r3
 8002e28:	2310      	movs	r3, #16
 8002e2a:	6093      	str	r3, [r2, #8]
}
 8002e2c:	bf00      	nop
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d11a      	bne.n	8002e9a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e70:	461a      	mov	r2, r3
 8002e72:	2304      	movs	r3, #4
 8002e74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	212c      	movs	r1, #44	; 0x2c
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	4413      	add	r3, r2
 8002e82:	3361      	adds	r3, #97	; 0x61
 8002e84:	2206      	movs	r2, #6
 8002e86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f004 f8dd 	bl	8007052 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002e98:	e331      	b.n	80034fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d12e      	bne.n	8002f0e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	212c      	movs	r1, #44	; 0x2c
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	333d      	adds	r3, #61	; 0x3d
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	f040 8313 	bne.w	80034fe <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	212c      	movs	r1, #44	; 0x2c
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	333d      	adds	r3, #61	; 0x3d
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	212c      	movs	r1, #44	; 0x2c
 8002ef0:	fb01 f303 	mul.w	r3, r1, r3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3360      	adds	r3, #96	; 0x60
 8002ef8:	2202      	movs	r2, #2
 8002efa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f004 f8a3 	bl	8007052 <USB_HC_Halt>
}
 8002f0c:	e2f7      	b.n	80034fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f24:	d112      	bne.n	8002f4c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f32:	461a      	mov	r2, r3
 8002f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f38:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f004 f884 	bl	8007052 <USB_HC_Halt>
}
 8002f4a:	e2d8      	b.n	80034fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d140      	bne.n	8002fe4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	212c      	movs	r1, #44	; 0x2c
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	335c      	adds	r3, #92	; 0x5c
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f86:	2b40      	cmp	r3, #64	; 0x40
 8002f88:	d111      	bne.n	8002fae <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	212c      	movs	r1, #44	; 0x2c
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	4413      	add	r3, r2
 8002f96:	333d      	adds	r3, #61	; 0x3d
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2340      	movs	r3, #64	; 0x40
 8002fac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fba:	461a      	mov	r2, r3
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	212c      	movs	r1, #44	; 0x2c
 8002fc6:	fb01 f303 	mul.w	r3, r1, r3
 8002fca:	4413      	add	r3, r2
 8002fcc:	3361      	adds	r3, #97	; 0x61
 8002fce:	2201      	movs	r2, #1
 8002fd0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f004 f838 	bl	8007052 <USB_HC_Halt>
}
 8002fe2:	e28c      	b.n	80034fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff6:	2b40      	cmp	r3, #64	; 0x40
 8002ff8:	d12c      	bne.n	8003054 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	3361      	adds	r3, #97	; 0x61
 8003008:	2204      	movs	r2, #4
 800300a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	212c      	movs	r1, #44	; 0x2c
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	4413      	add	r3, r2
 8003018:	333d      	adds	r3, #61	; 0x3d
 800301a:	2201      	movs	r2, #1
 800301c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	212c      	movs	r1, #44	; 0x2c
 8003024:	fb01 f303 	mul.w	r3, r1, r3
 8003028:	4413      	add	r3, r2
 800302a:	335c      	adds	r3, #92	; 0x5c
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f004 f809 	bl	8007052 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304c:	461a      	mov	r2, r3
 800304e:	2340      	movs	r3, #64	; 0x40
 8003050:	6093      	str	r3, [r2, #8]
}
 8003052:	e254      	b.n	80034fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b08      	cmp	r3, #8
 8003068:	d11a      	bne.n	80030a0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	4413      	add	r3, r2
 8003072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003076:	461a      	mov	r2, r3
 8003078:	2308      	movs	r3, #8
 800307a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	212c      	movs	r1, #44	; 0x2c
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	4413      	add	r3, r2
 8003088:	3361      	adds	r3, #97	; 0x61
 800308a:	2205      	movs	r2, #5
 800308c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f003 ffda 	bl	8007052 <USB_HC_Halt>
}
 800309e:	e22e      	b.n	80034fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b10      	cmp	r3, #16
 80030b4:	d140      	bne.n	8003138 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	335c      	adds	r3, #92	; 0x5c
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	212c      	movs	r1, #44	; 0x2c
 80030ce:	fb01 f303 	mul.w	r3, r1, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	3361      	adds	r3, #97	; 0x61
 80030d6:	2203      	movs	r2, #3
 80030d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	212c      	movs	r1, #44	; 0x2c
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	4413      	add	r3, r2
 80030e6:	333d      	adds	r3, #61	; 0x3d
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d112      	bne.n	8003114 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	333c      	adds	r3, #60	; 0x3c
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d108      	bne.n	8003114 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	333d      	adds	r3, #61	; 0x3d
 8003110:	2201      	movs	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	4611      	mov	r1, r2
 800311e:	4618      	mov	r0, r3
 8003120:	f003 ff97 	bl	8007052 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	4413      	add	r3, r2
 800312c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003130:	461a      	mov	r2, r3
 8003132:	2310      	movs	r3, #16
 8003134:	6093      	str	r3, [r2, #8]
}
 8003136:	e1e2      	b.n	80034fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	4413      	add	r3, r2
 8003140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314a:	2b80      	cmp	r3, #128	; 0x80
 800314c:	d164      	bne.n	8003218 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d111      	bne.n	800317a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	212c      	movs	r1, #44	; 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	3361      	adds	r3, #97	; 0x61
 8003164:	2206      	movs	r2, #6
 8003166:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f003 ff6d 	bl	8007052 <USB_HC_Halt>
 8003178:	e044      	b.n	8003204 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	212c      	movs	r1, #44	; 0x2c
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	4413      	add	r3, r2
 8003186:	335c      	adds	r3, #92	; 0x5c
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	202c      	movs	r0, #44	; 0x2c
 8003192:	fb00 f303 	mul.w	r3, r0, r3
 8003196:	440b      	add	r3, r1
 8003198:	335c      	adds	r3, #92	; 0x5c
 800319a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	212c      	movs	r1, #44	; 0x2c
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	335c      	adds	r3, #92	; 0x5c
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d920      	bls.n	80031f2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	212c      	movs	r1, #44	; 0x2c
 80031b6:	fb01 f303 	mul.w	r3, r1, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	335c      	adds	r3, #92	; 0x5c
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	3360      	adds	r3, #96	; 0x60
 80031d0:	2204      	movs	r2, #4
 80031d2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	b2d9      	uxtb	r1, r3
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	202c      	movs	r0, #44	; 0x2c
 80031de:	fb00 f303 	mul.w	r3, r0, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	3360      	adds	r3, #96	; 0x60
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f006 f9d4 	bl	8009598 <HAL_HCD_HC_NotifyURBChange_Callback>
 80031f0:	e008      	b.n	8003204 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	3360      	adds	r3, #96	; 0x60
 8003200:	2202      	movs	r2, #2
 8003202:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	4413      	add	r3, r2
 800320c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003210:	461a      	mov	r2, r3
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	6093      	str	r3, [r2, #8]
}
 8003216:	e172      	b.n	80034fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	4413      	add	r3, r2
 8003220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322e:	d11b      	bne.n	8003268 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	212c      	movs	r1, #44	; 0x2c
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	4413      	add	r3, r2
 800323c:	3361      	adds	r3, #97	; 0x61
 800323e:	2208      	movs	r2, #8
 8003240:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f003 ff00 	bl	8007052 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	4413      	add	r3, r2
 800325a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325e:	461a      	mov	r2, r3
 8003260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003264:	6093      	str	r3, [r2, #8]
}
 8003266:	e14a      	b.n	80034fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	4413      	add	r3, r2
 8003270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b02      	cmp	r3, #2
 800327c:	f040 813f 	bne.w	80034fe <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	3361      	adds	r3, #97	; 0x61
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d17d      	bne.n	8003390 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	212c      	movs	r1, #44	; 0x2c
 800329a:	fb01 f303 	mul.w	r3, r1, r3
 800329e:	4413      	add	r3, r2
 80032a0:	3360      	adds	r3, #96	; 0x60
 80032a2:	2201      	movs	r2, #1
 80032a4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	212c      	movs	r1, #44	; 0x2c
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	4413      	add	r3, r2
 80032b2:	333f      	adds	r3, #63	; 0x3f
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d00a      	beq.n	80032d0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	212c      	movs	r1, #44	; 0x2c
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	4413      	add	r3, r2
 80032c6:	333f      	adds	r3, #63	; 0x3f
 80032c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	f040 8100 	bne.w	80034d0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d113      	bne.n	8003300 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	3355      	adds	r3, #85	; 0x55
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	f083 0301 	eor.w	r3, r3, #1
 80032ec:	b2d8      	uxtb	r0, r3
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	212c      	movs	r1, #44	; 0x2c
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	4413      	add	r3, r2
 80032fa:	3355      	adds	r3, #85	; 0x55
 80032fc:	4602      	mov	r2, r0
 80032fe:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	2b01      	cmp	r3, #1
 8003306:	f040 80e3 	bne.w	80034d0 <HCD_HC_OUT_IRQHandler+0x69c>
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	212c      	movs	r1, #44	; 0x2c
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	4413      	add	r3, r2
 8003316:	334c      	adds	r3, #76	; 0x4c
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 80d8 	beq.w	80034d0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	212c      	movs	r1, #44	; 0x2c
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	4413      	add	r3, r2
 800332c:	334c      	adds	r3, #76	; 0x4c
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	202c      	movs	r0, #44	; 0x2c
 8003336:	fb00 f202 	mul.w	r2, r0, r2
 800333a:	440a      	add	r2, r1
 800333c:	3240      	adds	r2, #64	; 0x40
 800333e:	8812      	ldrh	r2, [r2, #0]
 8003340:	4413      	add	r3, r2
 8003342:	3b01      	subs	r3, #1
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	202c      	movs	r0, #44	; 0x2c
 800334a:	fb00 f202 	mul.w	r2, r0, r2
 800334e:	440a      	add	r2, r1
 8003350:	3240      	adds	r2, #64	; 0x40
 8003352:	8812      	ldrh	r2, [r2, #0]
 8003354:	fbb3 f3f2 	udiv	r3, r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80b5 	beq.w	80034d0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	3355      	adds	r3, #85	; 0x55
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	f083 0301 	eor.w	r3, r3, #1
 800337a:	b2d8      	uxtb	r0, r3
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	212c      	movs	r1, #44	; 0x2c
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	4413      	add	r3, r2
 8003388:	3355      	adds	r3, #85	; 0x55
 800338a:	4602      	mov	r2, r0
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e09f      	b.n	80034d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	212c      	movs	r1, #44	; 0x2c
 8003396:	fb01 f303 	mul.w	r3, r1, r3
 800339a:	4413      	add	r3, r2
 800339c:	3361      	adds	r3, #97	; 0x61
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d109      	bne.n	80033b8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	212c      	movs	r1, #44	; 0x2c
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	3360      	adds	r3, #96	; 0x60
 80033b2:	2202      	movs	r2, #2
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	e08b      	b.n	80034d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	212c      	movs	r1, #44	; 0x2c
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	3361      	adds	r3, #97	; 0x61
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d109      	bne.n	80033e0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	212c      	movs	r1, #44	; 0x2c
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	3360      	adds	r3, #96	; 0x60
 80033da:	2202      	movs	r2, #2
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	e077      	b.n	80034d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	212c      	movs	r1, #44	; 0x2c
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	3361      	adds	r3, #97	; 0x61
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b05      	cmp	r3, #5
 80033f2:	d109      	bne.n	8003408 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	212c      	movs	r1, #44	; 0x2c
 80033fa:	fb01 f303 	mul.w	r3, r1, r3
 80033fe:	4413      	add	r3, r2
 8003400:	3360      	adds	r3, #96	; 0x60
 8003402:	2205      	movs	r2, #5
 8003404:	701a      	strb	r2, [r3, #0]
 8003406:	e063      	b.n	80034d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	212c      	movs	r1, #44	; 0x2c
 800340e:	fb01 f303 	mul.w	r3, r1, r3
 8003412:	4413      	add	r3, r2
 8003414:	3361      	adds	r3, #97	; 0x61
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b06      	cmp	r3, #6
 800341a:	d009      	beq.n	8003430 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	212c      	movs	r1, #44	; 0x2c
 8003422:	fb01 f303 	mul.w	r3, r1, r3
 8003426:	4413      	add	r3, r2
 8003428:	3361      	adds	r3, #97	; 0x61
 800342a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800342c:	2b08      	cmp	r3, #8
 800342e:	d14f      	bne.n	80034d0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	212c      	movs	r1, #44	; 0x2c
 8003436:	fb01 f303 	mul.w	r3, r1, r3
 800343a:	4413      	add	r3, r2
 800343c:	335c      	adds	r3, #92	; 0x5c
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	202c      	movs	r0, #44	; 0x2c
 8003448:	fb00 f303 	mul.w	r3, r0, r3
 800344c:	440b      	add	r3, r1
 800344e:	335c      	adds	r3, #92	; 0x5c
 8003450:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	212c      	movs	r1, #44	; 0x2c
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	4413      	add	r3, r2
 800345e:	335c      	adds	r3, #92	; 0x5c
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d912      	bls.n	800348c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	212c      	movs	r1, #44	; 0x2c
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	4413      	add	r3, r2
 8003472:	335c      	adds	r3, #92	; 0x5c
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	212c      	movs	r1, #44	; 0x2c
 800347e:	fb01 f303 	mul.w	r3, r1, r3
 8003482:	4413      	add	r3, r2
 8003484:	3360      	adds	r3, #96	; 0x60
 8003486:	2204      	movs	r2, #4
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	e021      	b.n	80034d0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	212c      	movs	r1, #44	; 0x2c
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	4413      	add	r3, r2
 8003498:	3360      	adds	r3, #96	; 0x60
 800349a:	2202      	movs	r2, #2
 800349c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034b4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034bc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	015a      	lsls	r2, r3, #5
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	4413      	add	r3, r2
 80034c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ca:	461a      	mov	r2, r3
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034dc:	461a      	mov	r2, r3
 80034de:	2302      	movs	r3, #2
 80034e0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	b2d9      	uxtb	r1, r3
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	202c      	movs	r0, #44	; 0x2c
 80034ec:	fb00 f303 	mul.w	r3, r0, r3
 80034f0:	4413      	add	r3, r2
 80034f2:	3360      	adds	r3, #96	; 0x60
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f006 f84d 	bl	8009598 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80034fe:	bf00      	nop
 8003500:	3720      	adds	r7, #32
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b08a      	sub	sp, #40	; 0x28
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	0c5b      	lsrs	r3, r3, #17
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800353a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d004      	beq.n	800354c <HCD_RXQLVL_IRQHandler+0x46>
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b05      	cmp	r3, #5
 8003546:	f000 80a9 	beq.w	800369c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800354a:	e0aa      	b.n	80036a2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 80a6 	beq.w	80036a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	212c      	movs	r1, #44	; 0x2c
 800355a:	fb01 f303 	mul.w	r3, r1, r3
 800355e:	4413      	add	r3, r2
 8003560:	3344      	adds	r3, #68	; 0x44
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 809b 	beq.w	80036a0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	212c      	movs	r1, #44	; 0x2c
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	4413      	add	r3, r2
 8003576:	3350      	adds	r3, #80	; 0x50
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	441a      	add	r2, r3
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	202c      	movs	r0, #44	; 0x2c
 8003584:	fb00 f303 	mul.w	r3, r0, r3
 8003588:	440b      	add	r3, r1
 800358a:	334c      	adds	r3, #76	; 0x4c
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d87a      	bhi.n	8003688 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	212c      	movs	r1, #44	; 0x2c
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	4413      	add	r3, r2
 80035a2:	3344      	adds	r3, #68	; 0x44
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	b292      	uxth	r2, r2
 80035aa:	4619      	mov	r1, r3
 80035ac:	f003 f8a8 	bl	8006700 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	212c      	movs	r1, #44	; 0x2c
 80035b6:	fb01 f303 	mul.w	r3, r1, r3
 80035ba:	4413      	add	r3, r2
 80035bc:	3344      	adds	r3, #68	; 0x44
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	441a      	add	r2, r3
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	202c      	movs	r0, #44	; 0x2c
 80035ca:	fb00 f303 	mul.w	r3, r0, r3
 80035ce:	440b      	add	r3, r1
 80035d0:	3344      	adds	r3, #68	; 0x44
 80035d2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	212c      	movs	r1, #44	; 0x2c
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	4413      	add	r3, r2
 80035e0:	3350      	adds	r3, #80	; 0x50
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	441a      	add	r2, r3
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	202c      	movs	r0, #44	; 0x2c
 80035ee:	fb00 f303 	mul.w	r3, r0, r3
 80035f2:	440b      	add	r3, r1
 80035f4:	3350      	adds	r3, #80	; 0x50
 80035f6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	0cdb      	lsrs	r3, r3, #19
 8003608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800360c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	212c      	movs	r1, #44	; 0x2c
 8003614:	fb01 f303 	mul.w	r3, r1, r3
 8003618:	4413      	add	r3, r2
 800361a:	3340      	adds	r3, #64	; 0x40
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4293      	cmp	r3, r2
 8003624:	d13c      	bne.n	80036a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d039      	beq.n	80036a0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	4413      	add	r3, r2
 8003634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003642:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800364a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	4413      	add	r3, r2
 8003654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003658:	461a      	mov	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	212c      	movs	r1, #44	; 0x2c
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	4413      	add	r3, r2
 800366a:	3354      	adds	r3, #84	; 0x54
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	f083 0301 	eor.w	r3, r3, #1
 8003672:	b2d8      	uxtb	r0, r3
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	212c      	movs	r1, #44	; 0x2c
 800367a:	fb01 f303 	mul.w	r3, r1, r3
 800367e:	4413      	add	r3, r2
 8003680:	3354      	adds	r3, #84	; 0x54
 8003682:	4602      	mov	r2, r0
 8003684:	701a      	strb	r2, [r3, #0]
      break;
 8003686:	e00b      	b.n	80036a0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	212c      	movs	r1, #44	; 0x2c
 800368e:	fb01 f303 	mul.w	r3, r1, r3
 8003692:	4413      	add	r3, r2
 8003694:	3360      	adds	r3, #96	; 0x60
 8003696:	2204      	movs	r2, #4
 8003698:	701a      	strb	r2, [r3, #0]
      break;
 800369a:	e001      	b.n	80036a0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800369c:	bf00      	nop
 800369e:	e000      	b.n	80036a2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80036a0:	bf00      	nop
  }
}
 80036a2:	bf00      	nop
 80036a4:	3728      	adds	r7, #40	; 0x28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b086      	sub	sp, #24
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80036d6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d10b      	bne.n	80036fa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d102      	bne.n	80036f2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f005 ff37 	bl	8009560 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f043 0302 	orr.w	r3, r3, #2
 80036f8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b08      	cmp	r3, #8
 8003702:	d132      	bne.n	800376a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f043 0308 	orr.w	r3, r3, #8
 800370a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b04      	cmp	r3, #4
 8003714:	d126      	bne.n	8003764 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d113      	bne.n	8003746 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003724:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003728:	d106      	bne.n	8003738 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2102      	movs	r1, #2
 8003730:	4618      	mov	r0, r3
 8003732:	f003 f953 	bl	80069dc <USB_InitFSLSPClkSel>
 8003736:	e011      	b.n	800375c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2101      	movs	r1, #1
 800373e:	4618      	mov	r0, r3
 8003740:	f003 f94c 	bl	80069dc <USB_InitFSLSPClkSel>
 8003744:	e00a      	b.n	800375c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d106      	bne.n	800375c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003754:	461a      	mov	r2, r3
 8003756:	f64e 2360 	movw	r3, #60000	; 0xea60
 800375a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f005 ff29 	bl	80095b4 <HAL_HCD_PortEnabled_Callback>
 8003762:	e002      	b.n	800376a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f005 ff33 	bl	80095d0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b20      	cmp	r3, #32
 8003772:	d103      	bne.n	800377c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f043 0320 	orr.w	r3, r3, #32
 800377a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003782:	461a      	mov	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	6013      	str	r3, [r2, #0]
}
 8003788:	bf00      	nop
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e12b      	b.n	80039fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fd f9f6 	bl	8000ba8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2224      	movs	r2, #36	; 0x24
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037f4:	f001 fa20 	bl	8004c38 <HAL_RCC_GetPCLK1Freq>
 80037f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4a81      	ldr	r2, [pc, #516]	; (8003a04 <HAL_I2C_Init+0x274>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d807      	bhi.n	8003814 <HAL_I2C_Init+0x84>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4a80      	ldr	r2, [pc, #512]	; (8003a08 <HAL_I2C_Init+0x278>)
 8003808:	4293      	cmp	r3, r2
 800380a:	bf94      	ite	ls
 800380c:	2301      	movls	r3, #1
 800380e:	2300      	movhi	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	e006      	b.n	8003822 <HAL_I2C_Init+0x92>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4a7d      	ldr	r2, [pc, #500]	; (8003a0c <HAL_I2C_Init+0x27c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	bf94      	ite	ls
 800381c:	2301      	movls	r3, #1
 800381e:	2300      	movhi	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e0e7      	b.n	80039fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4a78      	ldr	r2, [pc, #480]	; (8003a10 <HAL_I2C_Init+0x280>)
 800382e:	fba2 2303 	umull	r2, r3, r2, r3
 8003832:	0c9b      	lsrs	r3, r3, #18
 8003834:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4a6a      	ldr	r2, [pc, #424]	; (8003a04 <HAL_I2C_Init+0x274>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d802      	bhi.n	8003864 <HAL_I2C_Init+0xd4>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	3301      	adds	r3, #1
 8003862:	e009      	b.n	8003878 <HAL_I2C_Init+0xe8>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800386a:	fb02 f303 	mul.w	r3, r2, r3
 800386e:	4a69      	ldr	r2, [pc, #420]	; (8003a14 <HAL_I2C_Init+0x284>)
 8003870:	fba2 2303 	umull	r2, r3, r2, r3
 8003874:	099b      	lsrs	r3, r3, #6
 8003876:	3301      	adds	r3, #1
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	430b      	orrs	r3, r1
 800387e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800388a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	495c      	ldr	r1, [pc, #368]	; (8003a04 <HAL_I2C_Init+0x274>)
 8003894:	428b      	cmp	r3, r1
 8003896:	d819      	bhi.n	80038cc <HAL_I2C_Init+0x13c>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1e59      	subs	r1, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a6:	1c59      	adds	r1, r3, #1
 80038a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038ac:	400b      	ands	r3, r1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_I2C_Init+0x138>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1e59      	subs	r1, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80038c0:	3301      	adds	r3, #1
 80038c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c6:	e051      	b.n	800396c <HAL_I2C_Init+0x1dc>
 80038c8:	2304      	movs	r3, #4
 80038ca:	e04f      	b.n	800396c <HAL_I2C_Init+0x1dc>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d111      	bne.n	80038f8 <HAL_I2C_Init+0x168>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1e58      	subs	r0, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6859      	ldr	r1, [r3, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	440b      	add	r3, r1
 80038e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e6:	3301      	adds	r3, #1
 80038e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	e012      	b.n	800391e <HAL_I2C_Init+0x18e>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	1e58      	subs	r0, r3, #1
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6859      	ldr	r1, [r3, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	0099      	lsls	r1, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	fbb0 f3f3 	udiv	r3, r0, r3
 800390e:	3301      	adds	r3, #1
 8003910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003914:	2b00      	cmp	r3, #0
 8003916:	bf0c      	ite	eq
 8003918:	2301      	moveq	r3, #1
 800391a:	2300      	movne	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_I2C_Init+0x196>
 8003922:	2301      	movs	r3, #1
 8003924:	e022      	b.n	800396c <HAL_I2C_Init+0x1dc>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10e      	bne.n	800394c <HAL_I2C_Init+0x1bc>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1e58      	subs	r0, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6859      	ldr	r1, [r3, #4]
 8003936:	460b      	mov	r3, r1
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	440b      	add	r3, r1
 800393c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003940:	3301      	adds	r3, #1
 8003942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800394a:	e00f      	b.n	800396c <HAL_I2C_Init+0x1dc>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	1e58      	subs	r0, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6859      	ldr	r1, [r3, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	0099      	lsls	r1, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003962:	3301      	adds	r3, #1
 8003964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003968:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	6809      	ldr	r1, [r1, #0]
 8003970:	4313      	orrs	r3, r2
 8003972:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69da      	ldr	r2, [r3, #28]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800399a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6911      	ldr	r1, [r2, #16]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68d2      	ldr	r2, [r2, #12]
 80039a6:	4311      	orrs	r1, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	430b      	orrs	r3, r1
 80039ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695a      	ldr	r2, [r3, #20]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	000186a0 	.word	0x000186a0
 8003a08:	001e847f 	.word	0x001e847f
 8003a0c:	003d08ff 	.word	0x003d08ff
 8003a10:	431bde83 	.word	0x431bde83
 8003a14:	10624dd3 	.word	0x10624dd3

08003a18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e128      	b.n	8003c7c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a90      	ldr	r2, [pc, #576]	; (8003c84 <HAL_I2S_Init+0x26c>)
 8003a42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7fd f8f7 	bl	8000c38 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a60:	f023 030f 	bic.w	r3, r3, #15
 8003a64:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d060      	beq.n	8003b38 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d102      	bne.n	8003a84 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a7e:	2310      	movs	r3, #16
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	e001      	b.n	8003a88 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a84:	2320      	movs	r3, #32
 8003a86:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d802      	bhi.n	8003a96 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a96:	2001      	movs	r0, #1
 8003a98:	f001 f9d8 	bl	8004e4c <HAL_RCCEx_GetPeriphCLKFreq>
 8003a9c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa6:	d125      	bne.n	8003af4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d010      	beq.n	8003ad2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003acc:	3305      	adds	r3, #5
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	e01f      	b.n	8003b12 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aee:	3305      	adds	r3, #5
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	e00e      	b.n	8003b12 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	461a      	mov	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0e:	3305      	adds	r3, #5
 8003b10:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4a5c      	ldr	r2, [pc, #368]	; (8003c88 <HAL_I2S_Init+0x270>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	08db      	lsrs	r3, r3, #3
 8003b1c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	021b      	lsls	r3, r3, #8
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	e003      	b.n	8003b40 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d902      	bls.n	8003b4c <HAL_I2S_Init+0x134>
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	2bff      	cmp	r3, #255	; 0xff
 8003b4a:	d907      	bls.n	8003b5c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b50:	f043 0210 	orr.w	r2, r3, #16
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e08f      	b.n	8003c7c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	ea42 0103 	orr.w	r1, r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b7a:	f023 030f 	bic.w	r3, r3, #15
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6851      	ldr	r1, [r2, #4]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6892      	ldr	r2, [r2, #8]
 8003b86:	4311      	orrs	r1, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	68d2      	ldr	r2, [r2, #12]
 8003b8c:	4311      	orrs	r1, r2
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6992      	ldr	r2, [r2, #24]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b9e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d161      	bne.n	8003c6c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a38      	ldr	r2, [pc, #224]	; (8003c8c <HAL_I2S_Init+0x274>)
 8003bac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a37      	ldr	r2, [pc, #220]	; (8003c90 <HAL_I2S_Init+0x278>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d101      	bne.n	8003bbc <HAL_I2S_Init+0x1a4>
 8003bb8:	4b36      	ldr	r3, [pc, #216]	; (8003c94 <HAL_I2S_Init+0x27c>)
 8003bba:	e001      	b.n	8003bc0 <HAL_I2S_Init+0x1a8>
 8003bbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6812      	ldr	r2, [r2, #0]
 8003bc6:	4932      	ldr	r1, [pc, #200]	; (8003c90 <HAL_I2S_Init+0x278>)
 8003bc8:	428a      	cmp	r2, r1
 8003bca:	d101      	bne.n	8003bd0 <HAL_I2S_Init+0x1b8>
 8003bcc:	4a31      	ldr	r2, [pc, #196]	; (8003c94 <HAL_I2S_Init+0x27c>)
 8003bce:	e001      	b.n	8003bd4 <HAL_I2S_Init+0x1bc>
 8003bd0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003bd4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bd8:	f023 030f 	bic.w	r3, r3, #15
 8003bdc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a2b      	ldr	r2, [pc, #172]	; (8003c90 <HAL_I2S_Init+0x278>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d101      	bne.n	8003bec <HAL_I2S_Init+0x1d4>
 8003be8:	4b2a      	ldr	r3, [pc, #168]	; (8003c94 <HAL_I2S_Init+0x27c>)
 8003bea:	e001      	b.n	8003bf0 <HAL_I2S_Init+0x1d8>
 8003bec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a25      	ldr	r2, [pc, #148]	; (8003c90 <HAL_I2S_Init+0x278>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d101      	bne.n	8003c02 <HAL_I2S_Init+0x1ea>
 8003bfe:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <HAL_I2S_Init+0x27c>)
 8003c00:	e001      	b.n	8003c06 <HAL_I2S_Init+0x1ee>
 8003c02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c12:	d003      	beq.n	8003c1c <HAL_I2S_Init+0x204>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d103      	bne.n	8003c24 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	e001      	b.n	8003c28 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c24:	2300      	movs	r3, #0
 8003c26:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c32:	4313      	orrs	r3, r2
 8003c34:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c46:	4313      	orrs	r3, r2
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	897b      	ldrh	r3, [r7, #10]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c54:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a0d      	ldr	r2, [pc, #52]	; (8003c90 <HAL_I2S_Init+0x278>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d101      	bne.n	8003c64 <HAL_I2S_Init+0x24c>
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <HAL_I2S_Init+0x27c>)
 8003c62:	e001      	b.n	8003c68 <HAL_I2S_Init+0x250>
 8003c64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c68:	897a      	ldrh	r2, [r7, #10]
 8003c6a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3720      	adds	r7, #32
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	08003d8f 	.word	0x08003d8f
 8003c88:	cccccccd 	.word	0xcccccccd
 8003c8c:	08003ea5 	.word	0x08003ea5
 8003c90:	40003800 	.word	0x40003800
 8003c94:	40003400 	.word	0x40003400

08003c98 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	881a      	ldrh	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	1c9a      	adds	r2, r3, #2
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10e      	bne.n	8003d28 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d18:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff ffb8 	bl	8003c98 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d28:	bf00      	nop
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	b292      	uxth	r2, r2
 8003d44:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	1c9a      	adds	r2, r3, #2
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10e      	bne.n	8003d86 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d76:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ff93 	bl	8003cac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b086      	sub	sp, #24
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d13a      	bne.n	8003e20 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d109      	bne.n	8003dc8 <I2S_IRQHandler+0x3a>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b40      	cmp	r3, #64	; 0x40
 8003dc0:	d102      	bne.n	8003dc8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff ffb4 	bl	8003d30 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	2b40      	cmp	r3, #64	; 0x40
 8003dd0:	d126      	bne.n	8003e20 <I2S_IRQHandler+0x92>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d11f      	bne.n	8003e20 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003df0:	2300      	movs	r3, #0
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	f043 0202 	orr.w	r2, r3, #2
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff ff50 	bl	8003cc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d136      	bne.n	8003e9a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d109      	bne.n	8003e4a <I2S_IRQHandler+0xbc>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e40:	2b80      	cmp	r3, #128	; 0x80
 8003e42:	d102      	bne.n	8003e4a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ff45 	bl	8003cd4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d122      	bne.n	8003e9a <I2S_IRQHandler+0x10c>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b20      	cmp	r3, #32
 8003e60:	d11b      	bne.n	8003e9a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e70:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8c:	f043 0204 	orr.w	r2, r3, #4
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff ff13 	bl	8003cc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e9a:	bf00      	nop
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a92      	ldr	r2, [pc, #584]	; (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d101      	bne.n	8003ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003ebe:	4b92      	ldr	r3, [pc, #584]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ec0:	e001      	b.n	8003ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003ec2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a8b      	ldr	r2, [pc, #556]	; (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d101      	bne.n	8003ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003edc:	4b8a      	ldr	r3, [pc, #552]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ede:	e001      	b.n	8003ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ee0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef0:	d004      	beq.n	8003efc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f040 8099 	bne.w	800402e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d107      	bne.n	8003f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f925 	bl	8004160 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d107      	bne.n	8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f9c8 	bl	80042c0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	d13a      	bne.n	8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d035      	beq.n	8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a6e      	ldr	r2, [pc, #440]	; (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d101      	bne.n	8003f52 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f4e:	4b6e      	ldr	r3, [pc, #440]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f50:	e001      	b.n	8003f56 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4969      	ldr	r1, [pc, #420]	; (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f5e:	428b      	cmp	r3, r1
 8003f60:	d101      	bne.n	8003f66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f62:	4b69      	ldr	r3, [pc, #420]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f64:	e001      	b.n	8003f6a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f6e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f7e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f80:	2300      	movs	r3, #0
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	f043 0202 	orr.w	r2, r3, #2
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff fe88 	bl	8003cc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	f040 80c3 	bne.w	8004142 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 80bd 	beq.w	8004142 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fd6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a49      	ldr	r2, [pc, #292]	; (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d101      	bne.n	8003fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003fe2:	4b49      	ldr	r3, [pc, #292]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fe4:	e001      	b.n	8003fea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003fe6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4944      	ldr	r1, [pc, #272]	; (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff2:	428b      	cmp	r3, r1
 8003ff4:	d101      	bne.n	8003ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003ff6:	4b44      	ldr	r3, [pc, #272]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ff8:	e001      	b.n	8003ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003ffa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ffe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004002:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004004:	2300      	movs	r3, #0
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	60bb      	str	r3, [r7, #8]
 8004010:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	f043 0204 	orr.w	r2, r3, #4
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff fe4a 	bl	8003cc0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800402c:	e089      	b.n	8004142 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b02      	cmp	r3, #2
 8004036:	d107      	bne.n	8004048 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f8be 	bl	80041c4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b01      	cmp	r3, #1
 8004050:	d107      	bne.n	8004062 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f8fd 	bl	800425c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b40      	cmp	r3, #64	; 0x40
 800406a:	d12f      	bne.n	80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b00      	cmp	r3, #0
 8004074:	d02a      	beq.n	80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004084:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a1e      	ldr	r2, [pc, #120]	; (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d101      	bne.n	8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004090:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004092:	e001      	b.n	8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004094:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4919      	ldr	r1, [pc, #100]	; (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040a0:	428b      	cmp	r3, r1
 80040a2:	d101      	bne.n	80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80040a4:	4b18      	ldr	r3, [pc, #96]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040a6:	e001      	b.n	80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80040a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	f043 0202 	orr.w	r2, r3, #2
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff fdfa 	bl	8003cc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d136      	bne.n	8004144 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d031      	beq.n	8004144 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a07      	ldr	r2, [pc, #28]	; (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d101      	bne.n	80040ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80040ea:	4b07      	ldr	r3, [pc, #28]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040ec:	e001      	b.n	80040f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80040ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4902      	ldr	r1, [pc, #8]	; (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040fa:	428b      	cmp	r3, r1
 80040fc:	d106      	bne.n	800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80040fe:	4b02      	ldr	r3, [pc, #8]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004100:	e006      	b.n	8004110 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004102:	bf00      	nop
 8004104:	40003800 	.word	0x40003800
 8004108:	40003400 	.word	0x40003400
 800410c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004110:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004114:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004124:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	f043 0204 	orr.w	r2, r3, #4
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff fdc0 	bl	8003cc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004140:	e000      	b.n	8004144 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004142:	bf00      	nop
}
 8004144:	bf00      	nop
 8004146:	3720      	adds	r7, #32
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	1c99      	adds	r1, r3, #2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6251      	str	r1, [r2, #36]	; 0x24
 8004172:	881a      	ldrh	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d113      	bne.n	80041ba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d106      	bne.n	80041ba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff ffc9 	bl	800414c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	1c99      	adds	r1, r3, #2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6251      	str	r1, [r2, #36]	; 0x24
 80041d6:	8819      	ldrh	r1, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1d      	ldr	r2, [pc, #116]	; (8004254 <I2SEx_TxISR_I2SExt+0x90>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d101      	bne.n	80041e6 <I2SEx_TxISR_I2SExt+0x22>
 80041e2:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <I2SEx_TxISR_I2SExt+0x94>)
 80041e4:	e001      	b.n	80041ea <I2SEx_TxISR_I2SExt+0x26>
 80041e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ea:	460a      	mov	r2, r1
 80041ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d121      	bne.n	800424a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a12      	ldr	r2, [pc, #72]	; (8004254 <I2SEx_TxISR_I2SExt+0x90>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d101      	bne.n	8004214 <I2SEx_TxISR_I2SExt+0x50>
 8004210:	4b11      	ldr	r3, [pc, #68]	; (8004258 <I2SEx_TxISR_I2SExt+0x94>)
 8004212:	e001      	b.n	8004218 <I2SEx_TxISR_I2SExt+0x54>
 8004214:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	490d      	ldr	r1, [pc, #52]	; (8004254 <I2SEx_TxISR_I2SExt+0x90>)
 8004220:	428b      	cmp	r3, r1
 8004222:	d101      	bne.n	8004228 <I2SEx_TxISR_I2SExt+0x64>
 8004224:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <I2SEx_TxISR_I2SExt+0x94>)
 8004226:	e001      	b.n	800422c <I2SEx_TxISR_I2SExt+0x68>
 8004228:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800422c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004230:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d106      	bne.n	800424a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff ff81 	bl	800414c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40003800 	.word	0x40003800
 8004258:	40003400 	.word	0x40003400

0800425c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68d8      	ldr	r0, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426e:	1c99      	adds	r1, r3, #2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004274:	b282      	uxth	r2, r0
 8004276:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d113      	bne.n	80042b8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800429e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff ff4a 	bl	800414c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042b8:	bf00      	nop
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a20      	ldr	r2, [pc, #128]	; (8004350 <I2SEx_RxISR_I2SExt+0x90>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d101      	bne.n	80042d6 <I2SEx_RxISR_I2SExt+0x16>
 80042d2:	4b20      	ldr	r3, [pc, #128]	; (8004354 <I2SEx_RxISR_I2SExt+0x94>)
 80042d4:	e001      	b.n	80042da <I2SEx_RxISR_I2SExt+0x1a>
 80042d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042da:	68d8      	ldr	r0, [r3, #12]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	1c99      	adds	r1, r3, #2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80042e6:	b282      	uxth	r2, r0
 80042e8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d121      	bne.n	8004346 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a12      	ldr	r2, [pc, #72]	; (8004350 <I2SEx_RxISR_I2SExt+0x90>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d101      	bne.n	8004310 <I2SEx_RxISR_I2SExt+0x50>
 800430c:	4b11      	ldr	r3, [pc, #68]	; (8004354 <I2SEx_RxISR_I2SExt+0x94>)
 800430e:	e001      	b.n	8004314 <I2SEx_RxISR_I2SExt+0x54>
 8004310:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	490d      	ldr	r1, [pc, #52]	; (8004350 <I2SEx_RxISR_I2SExt+0x90>)
 800431c:	428b      	cmp	r3, r1
 800431e:	d101      	bne.n	8004324 <I2SEx_RxISR_I2SExt+0x64>
 8004320:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <I2SEx_RxISR_I2SExt+0x94>)
 8004322:	e001      	b.n	8004328 <I2SEx_RxISR_I2SExt+0x68>
 8004324:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004328:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800432c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d106      	bne.n	8004346 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7ff ff03 	bl	800414c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004346:	bf00      	nop
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40003800 	.word	0x40003800
 8004354:	40003400 	.word	0x40003400

08004358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e267      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d075      	beq.n	8004462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004376:	4b88      	ldr	r3, [pc, #544]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b04      	cmp	r3, #4
 8004380:	d00c      	beq.n	800439c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004382:	4b85      	ldr	r3, [pc, #532]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800438a:	2b08      	cmp	r3, #8
 800438c:	d112      	bne.n	80043b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800438e:	4b82      	ldr	r3, [pc, #520]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800439a:	d10b      	bne.n	80043b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439c:	4b7e      	ldr	r3, [pc, #504]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d05b      	beq.n	8004460 <HAL_RCC_OscConfig+0x108>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d157      	bne.n	8004460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e242      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043bc:	d106      	bne.n	80043cc <HAL_RCC_OscConfig+0x74>
 80043be:	4b76      	ldr	r3, [pc, #472]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a75      	ldr	r2, [pc, #468]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	e01d      	b.n	8004408 <HAL_RCC_OscConfig+0xb0>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043d4:	d10c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x98>
 80043d6:	4b70      	ldr	r3, [pc, #448]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a6f      	ldr	r2, [pc, #444]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	4b6d      	ldr	r3, [pc, #436]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a6c      	ldr	r2, [pc, #432]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	e00b      	b.n	8004408 <HAL_RCC_OscConfig+0xb0>
 80043f0:	4b69      	ldr	r3, [pc, #420]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a68      	ldr	r2, [pc, #416]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	4b66      	ldr	r3, [pc, #408]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a65      	ldr	r2, [pc, #404]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d013      	beq.n	8004438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004410:	f7fc feba 	bl	8001188 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004418:	f7fc feb6 	bl	8001188 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	; 0x64
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e207      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442a:	4b5b      	ldr	r3, [pc, #364]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0xc0>
 8004436:	e014      	b.n	8004462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004438:	f7fc fea6 	bl	8001188 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004440:	f7fc fea2 	bl	8001188 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e1f3      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004452:	4b51      	ldr	r3, [pc, #324]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0xe8>
 800445e:	e000      	b.n	8004462 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d063      	beq.n	8004536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800446e:	4b4a      	ldr	r3, [pc, #296]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00b      	beq.n	8004492 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800447a:	4b47      	ldr	r3, [pc, #284]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004482:	2b08      	cmp	r3, #8
 8004484:	d11c      	bne.n	80044c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004486:	4b44      	ldr	r3, [pc, #272]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d116      	bne.n	80044c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004492:	4b41      	ldr	r3, [pc, #260]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d005      	beq.n	80044aa <HAL_RCC_OscConfig+0x152>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d001      	beq.n	80044aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e1c7      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044aa:	4b3b      	ldr	r3, [pc, #236]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4937      	ldr	r1, [pc, #220]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044be:	e03a      	b.n	8004536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d020      	beq.n	800450a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044c8:	4b34      	ldr	r3, [pc, #208]	; (800459c <HAL_RCC_OscConfig+0x244>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ce:	f7fc fe5b 	bl	8001188 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044d6:	f7fc fe57 	bl	8001188 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e1a8      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e8:	4b2b      	ldr	r3, [pc, #172]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f4:	4b28      	ldr	r3, [pc, #160]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4925      	ldr	r1, [pc, #148]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004504:	4313      	orrs	r3, r2
 8004506:	600b      	str	r3, [r1, #0]
 8004508:	e015      	b.n	8004536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800450a:	4b24      	ldr	r3, [pc, #144]	; (800459c <HAL_RCC_OscConfig+0x244>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fc fe3a 	bl	8001188 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004518:	f7fc fe36 	bl	8001188 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e187      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452a:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f0      	bne.n	8004518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d036      	beq.n	80045b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d016      	beq.n	8004578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800454a:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <HAL_RCC_OscConfig+0x248>)
 800454c:	2201      	movs	r2, #1
 800454e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004550:	f7fc fe1a 	bl	8001188 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004558:	f7fc fe16 	bl	8001188 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e167      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800456c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f0      	beq.n	8004558 <HAL_RCC_OscConfig+0x200>
 8004576:	e01b      	b.n	80045b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004578:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <HAL_RCC_OscConfig+0x248>)
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800457e:	f7fc fe03 	bl	8001188 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004584:	e00e      	b.n	80045a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004586:	f7fc fdff 	bl	8001188 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d907      	bls.n	80045a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e150      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
 8004598:	40023800 	.word	0x40023800
 800459c:	42470000 	.word	0x42470000
 80045a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a4:	4b88      	ldr	r3, [pc, #544]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1ea      	bne.n	8004586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 8097 	beq.w	80046ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045be:	2300      	movs	r3, #0
 80045c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045c2:	4b81      	ldr	r3, [pc, #516]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10f      	bne.n	80045ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	4b7d      	ldr	r3, [pc, #500]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	4a7c      	ldr	r2, [pc, #496]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045dc:	6413      	str	r3, [r2, #64]	; 0x40
 80045de:	4b7a      	ldr	r3, [pc, #488]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e6:	60bb      	str	r3, [r7, #8]
 80045e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ea:	2301      	movs	r3, #1
 80045ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ee:	4b77      	ldr	r3, [pc, #476]	; (80047cc <HAL_RCC_OscConfig+0x474>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d118      	bne.n	800462c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045fa:	4b74      	ldr	r3, [pc, #464]	; (80047cc <HAL_RCC_OscConfig+0x474>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a73      	ldr	r2, [pc, #460]	; (80047cc <HAL_RCC_OscConfig+0x474>)
 8004600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004606:	f7fc fdbf 	bl	8001188 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800460e:	f7fc fdbb 	bl	8001188 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e10c      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004620:	4b6a      	ldr	r3, [pc, #424]	; (80047cc <HAL_RCC_OscConfig+0x474>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0f0      	beq.n	800460e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d106      	bne.n	8004642 <HAL_RCC_OscConfig+0x2ea>
 8004634:	4b64      	ldr	r3, [pc, #400]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	4a63      	ldr	r2, [pc, #396]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	6713      	str	r3, [r2, #112]	; 0x70
 8004640:	e01c      	b.n	800467c <HAL_RCC_OscConfig+0x324>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b05      	cmp	r3, #5
 8004648:	d10c      	bne.n	8004664 <HAL_RCC_OscConfig+0x30c>
 800464a:	4b5f      	ldr	r3, [pc, #380]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464e:	4a5e      	ldr	r2, [pc, #376]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004650:	f043 0304 	orr.w	r3, r3, #4
 8004654:	6713      	str	r3, [r2, #112]	; 0x70
 8004656:	4b5c      	ldr	r3, [pc, #368]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	4a5b      	ldr	r2, [pc, #364]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	6713      	str	r3, [r2, #112]	; 0x70
 8004662:	e00b      	b.n	800467c <HAL_RCC_OscConfig+0x324>
 8004664:	4b58      	ldr	r3, [pc, #352]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	4a57      	ldr	r2, [pc, #348]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	6713      	str	r3, [r2, #112]	; 0x70
 8004670:	4b55      	ldr	r3, [pc, #340]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	4a54      	ldr	r2, [pc, #336]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004676:	f023 0304 	bic.w	r3, r3, #4
 800467a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d015      	beq.n	80046b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004684:	f7fc fd80 	bl	8001188 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468a:	e00a      	b.n	80046a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800468c:	f7fc fd7c 	bl	8001188 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f241 3288 	movw	r2, #5000	; 0x1388
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e0cb      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a2:	4b49      	ldr	r3, [pc, #292]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0ee      	beq.n	800468c <HAL_RCC_OscConfig+0x334>
 80046ae:	e014      	b.n	80046da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b0:	f7fc fd6a 	bl	8001188 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b8:	f7fc fd66 	bl	8001188 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e0b5      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ce:	4b3e      	ldr	r3, [pc, #248]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1ee      	bne.n	80046b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046da:	7dfb      	ldrb	r3, [r7, #23]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d105      	bne.n	80046ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e0:	4b39      	ldr	r3, [pc, #228]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	4a38      	ldr	r2, [pc, #224]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 80a1 	beq.w	8004838 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046f6:	4b34      	ldr	r3, [pc, #208]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d05c      	beq.n	80047bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d141      	bne.n	800478e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470a:	4b31      	ldr	r3, [pc, #196]	; (80047d0 <HAL_RCC_OscConfig+0x478>)
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004710:	f7fc fd3a 	bl	8001188 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004718:	f7fc fd36 	bl	8001188 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e087      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472a:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69da      	ldr	r2, [r3, #28]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	019b      	lsls	r3, r3, #6
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	3b01      	subs	r3, #1
 8004750:	041b      	lsls	r3, r3, #16
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	061b      	lsls	r3, r3, #24
 800475a:	491b      	ldr	r1, [pc, #108]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800475c:	4313      	orrs	r3, r2
 800475e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004760:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <HAL_RCC_OscConfig+0x478>)
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004766:	f7fc fd0f 	bl	8001188 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476e:	f7fc fd0b 	bl	8001188 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e05c      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004780:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x416>
 800478c:	e054      	b.n	8004838 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478e:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <HAL_RCC_OscConfig+0x478>)
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fc fcf8 	bl	8001188 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800479c:	f7fc fcf4 	bl	8001188 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e045      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x444>
 80047ba:	e03d      	b.n	8004838 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d107      	bne.n	80047d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e038      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40007000 	.word	0x40007000
 80047d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047d4:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <HAL_RCC_OscConfig+0x4ec>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d028      	beq.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d121      	bne.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d11a      	bne.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004804:	4013      	ands	r3, r2
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800480a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800480c:	4293      	cmp	r3, r2
 800480e:	d111      	bne.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	085b      	lsrs	r3, r3, #1
 800481c:	3b01      	subs	r3, #1
 800481e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004820:	429a      	cmp	r2, r3
 8004822:	d107      	bne.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40023800 	.word	0x40023800

08004848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0cc      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800485c:	4b68      	ldr	r3, [pc, #416]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d90c      	bls.n	8004884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	4b65      	ldr	r3, [pc, #404]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004872:	4b63      	ldr	r3, [pc, #396]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0b8      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d020      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800489c:	4b59      	ldr	r3, [pc, #356]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	4a58      	ldr	r2, [pc, #352]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048b4:	4b53      	ldr	r3, [pc, #332]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	4a52      	ldr	r2, [pc, #328]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c0:	4b50      	ldr	r3, [pc, #320]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	494d      	ldr	r1, [pc, #308]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d044      	beq.n	8004968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d107      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e6:	4b47      	ldr	r3, [pc, #284]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d119      	bne.n	8004926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e07f      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d003      	beq.n	8004906 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004902:	2b03      	cmp	r3, #3
 8004904:	d107      	bne.n	8004916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004906:	4b3f      	ldr	r3, [pc, #252]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e06f      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004916:	4b3b      	ldr	r3, [pc, #236]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e067      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004926:	4b37      	ldr	r3, [pc, #220]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f023 0203 	bic.w	r2, r3, #3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	4934      	ldr	r1, [pc, #208]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	4313      	orrs	r3, r2
 8004936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004938:	f7fc fc26 	bl	8001188 <HAL_GetTick>
 800493c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493e:	e00a      	b.n	8004956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004940:	f7fc fc22 	bl	8001188 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	f241 3288 	movw	r2, #5000	; 0x1388
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e04f      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004956:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 020c 	and.w	r2, r3, #12
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	429a      	cmp	r2, r3
 8004966:	d1eb      	bne.n	8004940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004968:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d20c      	bcs.n	8004990 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004976:	4b22      	ldr	r3, [pc, #136]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	4b20      	ldr	r3, [pc, #128]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e032      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800499c:	4b19      	ldr	r3, [pc, #100]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	4916      	ldr	r1, [pc, #88]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d009      	beq.n	80049ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ba:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	490e      	ldr	r1, [pc, #56]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ce:	f000 f821 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 80049d2:	4602      	mov	r2, r0
 80049d4:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	091b      	lsrs	r3, r3, #4
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	490a      	ldr	r1, [pc, #40]	; (8004a08 <HAL_RCC_ClockConfig+0x1c0>)
 80049e0:	5ccb      	ldrb	r3, [r1, r3]
 80049e2:	fa22 f303 	lsr.w	r3, r2, r3
 80049e6:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <HAL_RCC_ClockConfig+0x1c4>)
 80049e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ea:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <HAL_RCC_ClockConfig+0x1c8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fc fb86 	bl	8001100 <HAL_InitTick>

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40023c00 	.word	0x40023c00
 8004a04:	40023800 	.word	0x40023800
 8004a08:	0800a358 	.word	0x0800a358
 8004a0c:	20000000 	.word	0x20000000
 8004a10:	20000004 	.word	0x20000004

08004a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a18:	b094      	sub	sp, #80	; 0x50
 8004a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a20:	2300      	movs	r3, #0
 8004a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a24:	2300      	movs	r3, #0
 8004a26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a2c:	4b79      	ldr	r3, [pc, #484]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 030c 	and.w	r3, r3, #12
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d00d      	beq.n	8004a54 <HAL_RCC_GetSysClockFreq+0x40>
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	f200 80e1 	bhi.w	8004c00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0x34>
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d003      	beq.n	8004a4e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a46:	e0db      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a48:	4b73      	ldr	r3, [pc, #460]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a4c:	e0db      	b.n	8004c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a4e:	4b73      	ldr	r3, [pc, #460]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x208>)
 8004a50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a52:	e0d8      	b.n	8004c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a54:	4b6f      	ldr	r3, [pc, #444]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a5e:	4b6d      	ldr	r3, [pc, #436]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d063      	beq.n	8004b32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a6a:	4b6a      	ldr	r3, [pc, #424]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	099b      	lsrs	r3, r3, #6
 8004a70:	2200      	movs	r2, #0
 8004a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a7e:	2300      	movs	r3, #0
 8004a80:	637b      	str	r3, [r7, #52]	; 0x34
 8004a82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a86:	4622      	mov	r2, r4
 8004a88:	462b      	mov	r3, r5
 8004a8a:	f04f 0000 	mov.w	r0, #0
 8004a8e:	f04f 0100 	mov.w	r1, #0
 8004a92:	0159      	lsls	r1, r3, #5
 8004a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a98:	0150      	lsls	r0, r2, #5
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	1a51      	subs	r1, r2, r1
 8004aa2:	6139      	str	r1, [r7, #16]
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ab8:	4659      	mov	r1, fp
 8004aba:	018b      	lsls	r3, r1, #6
 8004abc:	4651      	mov	r1, sl
 8004abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ac2:	4651      	mov	r1, sl
 8004ac4:	018a      	lsls	r2, r1, #6
 8004ac6:	4651      	mov	r1, sl
 8004ac8:	ebb2 0801 	subs.w	r8, r2, r1
 8004acc:	4659      	mov	r1, fp
 8004ace:	eb63 0901 	sbc.w	r9, r3, r1
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ade:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ae2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ae6:	4690      	mov	r8, r2
 8004ae8:	4699      	mov	r9, r3
 8004aea:	4623      	mov	r3, r4
 8004aec:	eb18 0303 	adds.w	r3, r8, r3
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	462b      	mov	r3, r5
 8004af4:	eb49 0303 	adc.w	r3, r9, r3
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b06:	4629      	mov	r1, r5
 8004b08:	024b      	lsls	r3, r1, #9
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b10:	4621      	mov	r1, r4
 8004b12:	024a      	lsls	r2, r1, #9
 8004b14:	4610      	mov	r0, r2
 8004b16:	4619      	mov	r1, r3
 8004b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b24:	f7fb fbac 	bl	8000280 <__aeabi_uldivmod>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b30:	e058      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b32:	4b38      	ldr	r3, [pc, #224]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	099b      	lsrs	r3, r3, #6
 8004b38:	2200      	movs	r2, #0
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b42:	623b      	str	r3, [r7, #32]
 8004b44:	2300      	movs	r3, #0
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
 8004b48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b4c:	4642      	mov	r2, r8
 8004b4e:	464b      	mov	r3, r9
 8004b50:	f04f 0000 	mov.w	r0, #0
 8004b54:	f04f 0100 	mov.w	r1, #0
 8004b58:	0159      	lsls	r1, r3, #5
 8004b5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b5e:	0150      	lsls	r0, r2, #5
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4641      	mov	r1, r8
 8004b66:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b84:	ebb2 040a 	subs.w	r4, r2, sl
 8004b88:	eb63 050b 	sbc.w	r5, r3, fp
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	00eb      	lsls	r3, r5, #3
 8004b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b9a:	00e2      	lsls	r2, r4, #3
 8004b9c:	4614      	mov	r4, r2
 8004b9e:	461d      	mov	r5, r3
 8004ba0:	4643      	mov	r3, r8
 8004ba2:	18e3      	adds	r3, r4, r3
 8004ba4:	603b      	str	r3, [r7, #0]
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	eb45 0303 	adc.w	r3, r5, r3
 8004bac:	607b      	str	r3, [r7, #4]
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bba:	4629      	mov	r1, r5
 8004bbc:	028b      	lsls	r3, r1, #10
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	028a      	lsls	r2, r1, #10
 8004bc8:	4610      	mov	r0, r2
 8004bca:	4619      	mov	r1, r3
 8004bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bce:	2200      	movs	r2, #0
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	61fa      	str	r2, [r7, #28]
 8004bd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bd8:	f7fb fb52 	bl	8000280 <__aeabi_uldivmod>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4613      	mov	r3, r2
 8004be2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004be4:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	0c1b      	lsrs	r3, r3, #16
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	3301      	adds	r3, #1
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004bf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bfe:	e002      	b.n	8004c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c00:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3750      	adds	r7, #80	; 0x50
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c12:	bf00      	nop
 8004c14:	40023800 	.word	0x40023800
 8004c18:	00f42400 	.word	0x00f42400
 8004c1c:	007a1200 	.word	0x007a1200

08004c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c24:	4b03      	ldr	r3, [pc, #12]	; (8004c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c26:	681b      	ldr	r3, [r3, #0]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20000000 	.word	0x20000000

08004c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c3c:	f7ff fff0 	bl	8004c20 <HAL_RCC_GetHCLKFreq>
 8004c40:	4602      	mov	r2, r0
 8004c42:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	0a9b      	lsrs	r3, r3, #10
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	4903      	ldr	r1, [pc, #12]	; (8004c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c4e:	5ccb      	ldrb	r3, [r1, r3]
 8004c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	0800a368 	.word	0x0800a368

08004c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c64:	f7ff ffdc 	bl	8004c20 <HAL_RCC_GetHCLKFreq>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	0b5b      	lsrs	r3, r3, #13
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	4903      	ldr	r1, [pc, #12]	; (8004c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c76:	5ccb      	ldrb	r3, [r1, r3]
 8004c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40023800 	.word	0x40023800
 8004c84:	0800a368 	.word	0x0800a368

08004c88 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d105      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d035      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cb0:	4b62      	ldr	r3, [pc, #392]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cb6:	f7fc fa67 	bl	8001188 <HAL_GetTick>
 8004cba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cbe:	f7fc fa63 	bl	8001188 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e0b0      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cd0:	4b5b      	ldr	r3, [pc, #364]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1f0      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	019a      	lsls	r2, r3, #6
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	071b      	lsls	r3, r3, #28
 8004ce8:	4955      	ldr	r1, [pc, #340]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cf0:	4b52      	ldr	r3, [pc, #328]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cf6:	f7fc fa47 	bl	8001188 <HAL_GetTick>
 8004cfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cfe:	f7fc fa43 	bl	8001188 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e090      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d10:	4b4b      	ldr	r3, [pc, #300]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 8083 	beq.w	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	4b44      	ldr	r3, [pc, #272]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	4a43      	ldr	r2, [pc, #268]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d38:	6413      	str	r3, [r2, #64]	; 0x40
 8004d3a:	4b41      	ldr	r3, [pc, #260]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d46:	4b3f      	ldr	r3, [pc, #252]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a3e      	ldr	r2, [pc, #248]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d52:	f7fc fa19 	bl	8001188 <HAL_GetTick>
 8004d56:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d58:	e008      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d5a:	f7fc fa15 	bl	8001188 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e062      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d6c:	4b35      	ldr	r3, [pc, #212]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0f0      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d78:	4b31      	ldr	r3, [pc, #196]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d80:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d02f      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d028      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d96:	4b2a      	ldr	r3, [pc, #168]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004da0:	4b29      	ldr	r3, [pc, #164]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004da2:	2201      	movs	r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004da6:	4b28      	ldr	r3, [pc, #160]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004dac:	4a24      	ldr	r2, [pc, #144]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004db2:	4b23      	ldr	r3, [pc, #140]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d114      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004dbe:	f7fc f9e3 	bl	8001188 <HAL_GetTick>
 8004dc2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc4:	e00a      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dc6:	f7fc f9df 	bl	8001188 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e02a      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ddc:	4b18      	ldr	r3, [pc, #96]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0ee      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004df4:	d10d      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004df6:	4b12      	ldr	r3, [pc, #72]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e0a:	490d      	ldr	r1, [pc, #52]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	608b      	str	r3, [r1, #8]
 8004e10:	e005      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e12:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	4a0a      	ldr	r2, [pc, #40]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e18:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e1c:	6093      	str	r3, [r2, #8]
 8004e1e:	4b08      	ldr	r3, [pc, #32]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e2a:	4905      	ldr	r1, [pc, #20]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	42470068 	.word	0x42470068
 8004e40:	40023800 	.word	0x40023800
 8004e44:	40007000 	.word	0x40007000
 8004e48:	42470e40 	.word	0x42470e40

08004e4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d13e      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e6a:	4b23      	ldr	r3, [pc, #140]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d12f      	bne.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e80:	4b1e      	ldr	r3, [pc, #120]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e82:	617b      	str	r3, [r7, #20]
          break;
 8004e84:	e02f      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e86:	4b1c      	ldr	r3, [pc, #112]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e92:	d108      	bne.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e94:	4b18      	ldr	r3, [pc, #96]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e9c:	4a18      	ldr	r2, [pc, #96]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea2:	613b      	str	r3, [r7, #16]
 8004ea4:	e007      	b.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ea6:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eae:	4a15      	ldr	r2, [pc, #84]	; (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004eb6:	4b10      	ldr	r3, [pc, #64]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ebc:	099b      	lsrs	r3, r3, #6
 8004ebe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	fb02 f303 	mul.w	r3, r2, r3
 8004ec8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004eca:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed0:	0f1b      	lsrs	r3, r3, #28
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004edc:	617b      	str	r3, [r7, #20]
          break;
 8004ede:	e002      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
          break;
 8004ee4:	bf00      	nop
        }
      }
      break;
 8004ee6:	bf00      	nop
    }
  }
  return frequency;
 8004ee8:	697b      	ldr	r3, [r7, #20]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	00bb8000 	.word	0x00bb8000
 8004f00:	007a1200 	.word	0x007a1200
 8004f04:	00f42400 	.word	0x00f42400

08004f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e07b      	b.n	8005012 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d108      	bne.n	8004f34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f2a:	d009      	beq.n	8004f40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	61da      	str	r2, [r3, #28]
 8004f32:	e005      	b.n	8004f40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7fb feec 	bl	8000d38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc4:	ea42 0103 	orr.w	r1, r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	0c1b      	lsrs	r3, r3, #16
 8004fde:	f003 0104 	and.w	r1, r3, #4
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	f003 0210 	and.w	r2, r3, #16
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005000:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b082      	sub	sp, #8
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e03f      	b.n	80050ac <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d106      	bne.n	8005046 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7fb fec1 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2224      	movs	r2, #36	; 0x24
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800505c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 ff68 	bl	8005f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005072:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695a      	ldr	r2, [r3, #20]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005082:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005092:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08a      	sub	sp, #40	; 0x28
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	4613      	mov	r3, r2
 80050c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b20      	cmp	r3, #32
 80050d2:	d17c      	bne.n	80051ce <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d002      	beq.n	80050e0 <HAL_UART_Transmit+0x2c>
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e075      	b.n	80051d0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_UART_Transmit+0x3e>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e06e      	b.n	80051d0 <HAL_UART_Transmit+0x11c>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2221      	movs	r2, #33	; 0x21
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005108:	f7fc f83e 	bl	8001188 <HAL_GetTick>
 800510c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	88fa      	ldrh	r2, [r7, #6]
 8005112:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	88fa      	ldrh	r2, [r7, #6]
 8005118:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005122:	d108      	bne.n	8005136 <HAL_UART_Transmit+0x82>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d104      	bne.n	8005136 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	61bb      	str	r3, [r7, #24]
 8005134:	e003      	b.n	800513e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800513a:	2300      	movs	r3, #0
 800513c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005146:	e02a      	b.n	800519e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2200      	movs	r2, #0
 8005150:	2180      	movs	r1, #128	; 0x80
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 fc20 	bl	8005998 <UART_WaitOnFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e036      	b.n	80051d0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10b      	bne.n	8005180 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	461a      	mov	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005176:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	3302      	adds	r3, #2
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	e007      	b.n	8005190 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	781a      	ldrb	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	3301      	adds	r3, #1
 800518e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1cf      	bne.n	8005148 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2200      	movs	r2, #0
 80051b0:	2140      	movs	r1, #64	; 0x40
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 fbf0 	bl	8005998 <UART_WaitOnFlagUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e006      	b.n	80051d0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	e000      	b.n	80051d0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80051ce:	2302      	movs	r3, #2
  }
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	4613      	mov	r3, r2
 80051e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	d11d      	bne.n	800522e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <HAL_UART_Receive_DMA+0x26>
 80051f8:	88fb      	ldrh	r3, [r7, #6]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e016      	b.n	8005230 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_UART_Receive_DMA+0x38>
 800520c:	2302      	movs	r3, #2
 800520e:	e00f      	b.n	8005230 <HAL_UART_Receive_DMA+0x58>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	461a      	mov	r2, r3
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 fc25 	bl	8005a74 <UART_Start_Receive_DMA>
 800522a:	4603      	mov	r3, r0
 800522c:	e000      	b.n	8005230 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800522e:	2302      	movs	r3, #2
  }
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b0ba      	sub	sp, #232	; 0xe8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800525e:	2300      	movs	r3, #0
 8005260:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005264:	2300      	movs	r3, #0
 8005266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800526a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005276:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10f      	bne.n	800529e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800527e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	d009      	beq.n	800529e <HAL_UART_IRQHandler+0x66>
 800528a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fd91 	bl	8005dbe <UART_Receive_IT>
      return;
 800529c:	e256      	b.n	800574c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800529e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80de 	beq.w	8005464 <HAL_UART_IRQHandler+0x22c>
 80052a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d106      	bne.n	80052c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 80d1 	beq.w	8005464 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00b      	beq.n	80052e6 <HAL_UART_IRQHandler+0xae>
 80052ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d005      	beq.n	80052e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	f043 0201 	orr.w	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00b      	beq.n	800530a <HAL_UART_IRQHandler+0xd2>
 80052f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d005      	beq.n	800530a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	f043 0202 	orr.w	r2, r3, #2
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800530a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00b      	beq.n	800532e <HAL_UART_IRQHandler+0xf6>
 8005316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d005      	beq.n	800532e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f043 0204 	orr.w	r2, r3, #4
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800532e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d011      	beq.n	800535e <HAL_UART_IRQHandler+0x126>
 800533a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d105      	bne.n	8005352 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d005      	beq.n	800535e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	f043 0208 	orr.w	r2, r3, #8
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 81ed 	beq.w	8005742 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d008      	beq.n	8005386 <HAL_UART_IRQHandler+0x14e>
 8005374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fd1c 	bl	8005dbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	bf0c      	ite	eq
 8005394:	2301      	moveq	r3, #1
 8005396:	2300      	movne	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d103      	bne.n	80053b2 <HAL_UART_IRQHandler+0x17a>
 80053aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d04f      	beq.n	8005452 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fc24 	bl	8005c00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c2:	2b40      	cmp	r3, #64	; 0x40
 80053c4:	d141      	bne.n	800544a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3314      	adds	r3, #20
 80053cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3314      	adds	r3, #20
 80053ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800540a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1d9      	bne.n	80053c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	2b00      	cmp	r3, #0
 8005418:	d013      	beq.n	8005442 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541e:	4a7d      	ldr	r2, [pc, #500]	; (8005614 <HAL_UART_IRQHandler+0x3dc>)
 8005420:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005426:	4618      	mov	r0, r3
 8005428:	f7fc f966 	bl	80016f8 <HAL_DMA_Abort_IT>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d016      	beq.n	8005460 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800543c:	4610      	mov	r0, r2
 800543e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005440:	e00e      	b.n	8005460 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f99a 	bl	800577c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005448:	e00a      	b.n	8005460 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f996 	bl	800577c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005450:	e006      	b.n	8005460 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f992 	bl	800577c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800545e:	e170      	b.n	8005742 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005460:	bf00      	nop
    return;
 8005462:	e16e      	b.n	8005742 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	2b01      	cmp	r3, #1
 800546a:	f040 814a 	bne.w	8005702 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800546e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005472:	f003 0310 	and.w	r3, r3, #16
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 8143 	beq.w	8005702 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800547c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 813c 	beq.w	8005702 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800548a:	2300      	movs	r3, #0
 800548c:	60bb      	str	r3, [r7, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054aa:	2b40      	cmp	r3, #64	; 0x40
 80054ac:	f040 80b4 	bne.w	8005618 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 8140 	beq.w	8005746 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054ce:	429a      	cmp	r2, r3
 80054d0:	f080 8139 	bcs.w	8005746 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e6:	f000 8088 	beq.w	80055fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	330c      	adds	r3, #12
 80054f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054f8:	e853 3f00 	ldrex	r3, [r3]
 80054fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005500:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005508:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	330c      	adds	r3, #12
 8005512:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005516:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800551a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005522:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800552e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1d9      	bne.n	80054ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3314      	adds	r3, #20
 800553c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005546:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005548:	f023 0301 	bic.w	r3, r3, #1
 800554c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3314      	adds	r3, #20
 8005556:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800555a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800555e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005562:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800556c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e1      	bne.n	8005536 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3314      	adds	r3, #20
 8005578:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005588:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3314      	adds	r3, #20
 8005592:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005596:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005598:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800559c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e3      	bne.n	8005572 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	330c      	adds	r3, #12
 80055be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ca:	f023 0310 	bic.w	r3, r3, #16
 80055ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	330c      	adds	r3, #12
 80055d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80055dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80055de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e3      	bne.n	80055b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fc f80f 	bl	8001618 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005602:	b29b      	uxth	r3, r3
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	b29b      	uxth	r3, r3
 8005608:	4619      	mov	r1, r3
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f8c0 	bl	8005790 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005610:	e099      	b.n	8005746 <HAL_UART_IRQHandler+0x50e>
 8005612:	bf00      	nop
 8005614:	08005cc7 	.word	0x08005cc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005620:	b29b      	uxth	r3, r3
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 808b 	beq.w	800574a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005634:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 8086 	beq.w	800574a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	330c      	adds	r3, #12
 8005644:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800564e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005650:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005654:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005662:	647a      	str	r2, [r7, #68]	; 0x44
 8005664:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005668:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e3      	bne.n	800563e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3314      	adds	r3, #20
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	623b      	str	r3, [r7, #32]
   return(result);
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3314      	adds	r3, #20
 8005696:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800569a:	633a      	str	r2, [r7, #48]	; 0x30
 800569c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e3      	bne.n	8005676 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	330c      	adds	r3, #12
 80056c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0310 	bic.w	r3, r3, #16
 80056d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	330c      	adds	r3, #12
 80056dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80056e0:	61fa      	str	r2, [r7, #28]
 80056e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	69b9      	ldr	r1, [r7, #24]
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	e841 2300 	strex	r3, r2, [r1]
 80056ec:	617b      	str	r3, [r7, #20]
   return(result);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e3      	bne.n	80056bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056f8:	4619      	mov	r1, r3
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f848 	bl	8005790 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005700:	e023      	b.n	800574a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570a:	2b00      	cmp	r3, #0
 800570c:	d009      	beq.n	8005722 <HAL_UART_IRQHandler+0x4ea>
 800570e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fae7 	bl	8005cee <UART_Transmit_IT>
    return;
 8005720:	e014      	b.n	800574c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00e      	beq.n	800574c <HAL_UART_IRQHandler+0x514>
 800572e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005736:	2b00      	cmp	r3, #0
 8005738:	d008      	beq.n	800574c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fb27 	bl	8005d8e <UART_EndTransmit_IT>
    return;
 8005740:	e004      	b.n	800574c <HAL_UART_IRQHandler+0x514>
    return;
 8005742:	bf00      	nop
 8005744:	e002      	b.n	800574c <HAL_UART_IRQHandler+0x514>
      return;
 8005746:	bf00      	nop
 8005748:	e000      	b.n	800574c <HAL_UART_IRQHandler+0x514>
      return;
 800574a:	bf00      	nop
  }
}
 800574c:	37e8      	adds	r7, #232	; 0xe8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop

08005754 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b09c      	sub	sp, #112	; 0x70
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d172      	bne.n	80058aa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80057c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c6:	2200      	movs	r2, #0
 80057c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	330c      	adds	r3, #12
 80057d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80057e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	330c      	adds	r3, #12
 80057e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80057ec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e5      	bne.n	80057ca <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3314      	adds	r3, #20
 8005804:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800580e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005810:	f023 0301 	bic.w	r3, r3, #1
 8005814:	667b      	str	r3, [r7, #100]	; 0x64
 8005816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3314      	adds	r3, #20
 800581c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800581e:	647a      	str	r2, [r7, #68]	; 0x44
 8005820:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005824:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005826:	e841 2300 	strex	r3, r2, [r1]
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800582c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1e5      	bne.n	80057fe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3314      	adds	r3, #20
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	623b      	str	r3, [r7, #32]
   return(result);
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005848:	663b      	str	r3, [r7, #96]	; 0x60
 800584a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3314      	adds	r3, #20
 8005850:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005852:	633a      	str	r2, [r7, #48]	; 0x30
 8005854:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800585a:	e841 2300 	strex	r3, r2, [r1]
 800585e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e5      	bne.n	8005832 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005868:	2220      	movs	r2, #32
 800586a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800586e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	2b01      	cmp	r3, #1
 8005874:	d119      	bne.n	80058aa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	330c      	adds	r3, #12
 800587c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	60fb      	str	r3, [r7, #12]
   return(result);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f023 0310 	bic.w	r3, r3, #16
 800588c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800588e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	330c      	adds	r3, #12
 8005894:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005896:	61fa      	str	r2, [r7, #28]
 8005898:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	69b9      	ldr	r1, [r7, #24]
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	617b      	str	r3, [r7, #20]
   return(result);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e5      	bne.n	8005876 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d106      	bne.n	80058c0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058b6:	4619      	mov	r1, r3
 80058b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80058ba:	f7ff ff69 	bl	8005790 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058be:	e002      	b.n	80058c6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80058c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80058c2:	f7fa fe8b 	bl	80005dc <HAL_UART_RxCpltCallback>
}
 80058c6:	bf00      	nop
 80058c8:	3770      	adds	r7, #112	; 0x70
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058da:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d108      	bne.n	80058f6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058e8:	085b      	lsrs	r3, r3, #1
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	4619      	mov	r1, r3
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f7ff ff4e 	bl	8005790 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058f4:	e002      	b.n	80058fc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f7ff ff36 	bl	8005768 <HAL_UART_RxHalfCpltCallback>
}
 80058fc:	bf00      	nop
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800590c:	2300      	movs	r3, #0
 800590e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005920:	2b80      	cmp	r3, #128	; 0x80
 8005922:	bf0c      	ite	eq
 8005924:	2301      	moveq	r3, #1
 8005926:	2300      	movne	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b21      	cmp	r3, #33	; 0x21
 8005936:	d108      	bne.n	800594a <UART_DMAError+0x46>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d005      	beq.n	800594a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2200      	movs	r2, #0
 8005942:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005944:	68b8      	ldr	r0, [r7, #8]
 8005946:	f000 f933 	bl	8005bb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005954:	2b40      	cmp	r3, #64	; 0x40
 8005956:	bf0c      	ite	eq
 8005958:	2301      	moveq	r3, #1
 800595a:	2300      	movne	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b22      	cmp	r3, #34	; 0x22
 800596a:	d108      	bne.n	800597e <UART_DMAError+0x7a>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d005      	beq.n	800597e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2200      	movs	r2, #0
 8005976:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005978:	68b8      	ldr	r0, [r7, #8]
 800597a:	f000 f941 	bl	8005c00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f043 0210 	orr.w	r2, r3, #16
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800598a:	68b8      	ldr	r0, [r7, #8]
 800598c:	f7ff fef6 	bl	800577c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005990:	bf00      	nop
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b090      	sub	sp, #64	; 0x40
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	4613      	mov	r3, r2
 80059a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a8:	e050      	b.n	8005a4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d04c      	beq.n	8005a4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80059b8:	f7fb fbe6 	bl	8001188 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d241      	bcs.n	8005a4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	330c      	adds	r3, #12
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059e8:	637a      	str	r2, [r7, #52]	; 0x34
 80059ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e5      	bne.n	80059c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3314      	adds	r3, #20
 8005a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f023 0301 	bic.w	r3, r3, #1
 8005a12:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3314      	adds	r3, #20
 8005a1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a1c:	623a      	str	r2, [r7, #32]
 8005a1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	69f9      	ldr	r1, [r7, #28]
 8005a22:	6a3a      	ldr	r2, [r7, #32]
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e5      	bne.n	80059fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e00f      	b.n	8005a6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	4013      	ands	r3, r2
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	bf0c      	ite	eq
 8005a5c:	2301      	moveq	r3, #1
 8005a5e:	2300      	movne	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	461a      	mov	r2, r3
 8005a64:	79fb      	ldrb	r3, [r7, #7]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d09f      	beq.n	80059aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3740      	adds	r7, #64	; 0x40
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b098      	sub	sp, #96	; 0x60
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	88fa      	ldrh	r2, [r7, #6]
 8005a8c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2222      	movs	r2, #34	; 0x22
 8005a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa0:	4a40      	ldr	r2, [pc, #256]	; (8005ba4 <UART_Start_Receive_DMA+0x130>)
 8005aa2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa8:	4a3f      	ldr	r2, [pc, #252]	; (8005ba8 <UART_Start_Receive_DMA+0x134>)
 8005aaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab0:	4a3e      	ldr	r2, [pc, #248]	; (8005bac <UART_Start_Receive_DMA+0x138>)
 8005ab2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab8:	2200      	movs	r2, #0
 8005aba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005abc:	f107 0308 	add.w	r3, r7, #8
 8005ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3304      	adds	r3, #4
 8005acc:	4619      	mov	r1, r3
 8005ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	88fb      	ldrh	r3, [r7, #6]
 8005ad4:	f7fb fd48 	bl	8001568 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005ad8:	2300      	movs	r3, #0
 8005ada:	613b      	str	r3, [r7, #16]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	613b      	str	r3, [r7, #16]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	613b      	str	r3, [r7, #16]
 8005aec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d019      	beq.n	8005b32 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	330c      	adds	r3, #12
 8005b04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b14:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	330c      	adds	r3, #12
 8005b1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b1e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005b20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005b24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b26:	e841 2300 	strex	r3, r2, [r1]
 8005b2a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1e5      	bne.n	8005afe <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3314      	adds	r3, #20
 8005b38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3c:	e853 3f00 	ldrex	r3, [r3]
 8005b40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b44:	f043 0301 	orr.w	r3, r3, #1
 8005b48:	657b      	str	r3, [r7, #84]	; 0x54
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3314      	adds	r3, #20
 8005b50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b52:	63ba      	str	r2, [r7, #56]	; 0x38
 8005b54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e5      	bne.n	8005b32 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3314      	adds	r3, #20
 8005b6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	617b      	str	r3, [r7, #20]
   return(result);
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b7c:	653b      	str	r3, [r7, #80]	; 0x50
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3314      	adds	r3, #20
 8005b84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b86:	627a      	str	r2, [r7, #36]	; 0x24
 8005b88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	6a39      	ldr	r1, [r7, #32]
 8005b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e5      	bne.n	8005b66 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3760      	adds	r7, #96	; 0x60
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	080057a9 	.word	0x080057a9
 8005ba8:	080058cf 	.word	0x080058cf
 8005bac:	08005905 	.word	0x08005905

08005bb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b089      	sub	sp, #36	; 0x24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	e853 3f00 	ldrex	r3, [r3]
 8005bc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005bce:	61fb      	str	r3, [r7, #28]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	330c      	adds	r3, #12
 8005bd6:	69fa      	ldr	r2, [r7, #28]
 8005bd8:	61ba      	str	r2, [r7, #24]
 8005bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bdc:	6979      	ldr	r1, [r7, #20]
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	e841 2300 	strex	r3, r2, [r1]
 8005be4:	613b      	str	r3, [r7, #16]
   return(result);
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e5      	bne.n	8005bb8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005bf4:	bf00      	nop
 8005bf6:	3724      	adds	r7, #36	; 0x24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b095      	sub	sp, #84	; 0x54
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	330c      	adds	r3, #12
 8005c0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c12:	e853 3f00 	ldrex	r3, [r3]
 8005c16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	330c      	adds	r3, #12
 8005c26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c28:	643a      	str	r2, [r7, #64]	; 0x40
 8005c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c30:	e841 2300 	strex	r3, r2, [r1]
 8005c34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1e5      	bne.n	8005c08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3314      	adds	r3, #20
 8005c42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	f023 0301 	bic.w	r3, r3, #1
 8005c52:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3314      	adds	r3, #20
 8005c5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c64:	e841 2300 	strex	r3, r2, [r1]
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e5      	bne.n	8005c3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d119      	bne.n	8005cac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	e853 3f00 	ldrex	r3, [r3]
 8005c86:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f023 0310 	bic.w	r3, r3, #16
 8005c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	330c      	adds	r3, #12
 8005c96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c98:	61ba      	str	r2, [r7, #24]
 8005c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	6979      	ldr	r1, [r7, #20]
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	e841 2300 	strex	r3, r2, [r1]
 8005ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1e5      	bne.n	8005c78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005cba:	bf00      	nop
 8005cbc:	3754      	adds	r7, #84	; 0x54
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f7ff fd4b 	bl	800577c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ce6:	bf00      	nop
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b21      	cmp	r3, #33	; 0x21
 8005d00:	d13e      	bne.n	8005d80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0a:	d114      	bne.n	8005d36 <UART_Transmit_IT+0x48>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d110      	bne.n	8005d36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	1c9a      	adds	r2, r3, #2
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	621a      	str	r2, [r3, #32]
 8005d34:	e008      	b.n	8005d48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	1c59      	adds	r1, r3, #1
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6211      	str	r1, [r2, #32]
 8005d40:	781a      	ldrb	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	4619      	mov	r1, r3
 8005d56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10f      	bne.n	8005d7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	e000      	b.n	8005d82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d80:	2302      	movs	r3, #2
  }
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff fcd0 	bl	8005754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b08c      	sub	sp, #48	; 0x30
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b22      	cmp	r3, #34	; 0x22
 8005dd0:	f040 80ab 	bne.w	8005f2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ddc:	d117      	bne.n	8005e0e <UART_Receive_IT+0x50>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d113      	bne.n	8005e0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e06:	1c9a      	adds	r2, r3, #2
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	629a      	str	r2, [r3, #40]	; 0x28
 8005e0c:	e026      	b.n	8005e5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e14:	2300      	movs	r3, #0
 8005e16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e20:	d007      	beq.n	8005e32 <UART_Receive_IT+0x74>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10a      	bne.n	8005e40 <UART_Receive_IT+0x82>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d106      	bne.n	8005e40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3c:	701a      	strb	r2, [r3, #0]
 8005e3e:	e008      	b.n	8005e52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	3b01      	subs	r3, #1
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	4619      	mov	r1, r3
 8005e6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d15a      	bne.n	8005f26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0220 	bic.w	r2, r2, #32
 8005e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695a      	ldr	r2, [r3, #20]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d135      	bne.n	8005f1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	330c      	adds	r3, #12
 8005ebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	e853 3f00 	ldrex	r3, [r3]
 8005ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f023 0310 	bic.w	r3, r3, #16
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	330c      	adds	r3, #12
 8005ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed6:	623a      	str	r2, [r7, #32]
 8005ed8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eda:	69f9      	ldr	r1, [r7, #28]
 8005edc:	6a3a      	ldr	r2, [r7, #32]
 8005ede:	e841 2300 	strex	r3, r2, [r1]
 8005ee2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1e5      	bne.n	8005eb6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0310 	and.w	r3, r3, #16
 8005ef4:	2b10      	cmp	r3, #16
 8005ef6:	d10a      	bne.n	8005f0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f12:	4619      	mov	r1, r3
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7ff fc3b 	bl	8005790 <HAL_UARTEx_RxEventCallback>
 8005f1a:	e002      	b.n	8005f22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7fa fb5d 	bl	80005dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	e002      	b.n	8005f2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	e000      	b.n	8005f2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005f2a:	2302      	movs	r3, #2
  }
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3730      	adds	r7, #48	; 0x30
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f38:	b0c0      	sub	sp, #256	; 0x100
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f50:	68d9      	ldr	r1, [r3, #12]
 8005f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	ea40 0301 	orr.w	r3, r0, r1
 8005f5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f8c:	f021 010c 	bic.w	r1, r1, #12
 8005f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f9a:	430b      	orrs	r3, r1
 8005f9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fae:	6999      	ldr	r1, [r3, #24]
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	ea40 0301 	orr.w	r3, r0, r1
 8005fba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	4b8f      	ldr	r3, [pc, #572]	; (8006200 <UART_SetConfig+0x2cc>)
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d005      	beq.n	8005fd4 <UART_SetConfig+0xa0>
 8005fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	4b8d      	ldr	r3, [pc, #564]	; (8006204 <UART_SetConfig+0x2d0>)
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d104      	bne.n	8005fde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fd4:	f7fe fe44 	bl	8004c60 <HAL_RCC_GetPCLK2Freq>
 8005fd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005fdc:	e003      	b.n	8005fe6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fde:	f7fe fe2b 	bl	8004c38 <HAL_RCC_GetPCLK1Freq>
 8005fe2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ff0:	f040 810c 	bne.w	800620c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ffe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006002:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006006:	4622      	mov	r2, r4
 8006008:	462b      	mov	r3, r5
 800600a:	1891      	adds	r1, r2, r2
 800600c:	65b9      	str	r1, [r7, #88]	; 0x58
 800600e:	415b      	adcs	r3, r3
 8006010:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006012:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006016:	4621      	mov	r1, r4
 8006018:	eb12 0801 	adds.w	r8, r2, r1
 800601c:	4629      	mov	r1, r5
 800601e:	eb43 0901 	adc.w	r9, r3, r1
 8006022:	f04f 0200 	mov.w	r2, #0
 8006026:	f04f 0300 	mov.w	r3, #0
 800602a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800602e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006036:	4690      	mov	r8, r2
 8006038:	4699      	mov	r9, r3
 800603a:	4623      	mov	r3, r4
 800603c:	eb18 0303 	adds.w	r3, r8, r3
 8006040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006044:	462b      	mov	r3, r5
 8006046:	eb49 0303 	adc.w	r3, r9, r3
 800604a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800604e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800605a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800605e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006062:	460b      	mov	r3, r1
 8006064:	18db      	adds	r3, r3, r3
 8006066:	653b      	str	r3, [r7, #80]	; 0x50
 8006068:	4613      	mov	r3, r2
 800606a:	eb42 0303 	adc.w	r3, r2, r3
 800606e:	657b      	str	r3, [r7, #84]	; 0x54
 8006070:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006074:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006078:	f7fa f902 	bl	8000280 <__aeabi_uldivmod>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4b61      	ldr	r3, [pc, #388]	; (8006208 <UART_SetConfig+0x2d4>)
 8006082:	fba3 2302 	umull	r2, r3, r3, r2
 8006086:	095b      	lsrs	r3, r3, #5
 8006088:	011c      	lsls	r4, r3, #4
 800608a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800608e:	2200      	movs	r2, #0
 8006090:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006094:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006098:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800609c:	4642      	mov	r2, r8
 800609e:	464b      	mov	r3, r9
 80060a0:	1891      	adds	r1, r2, r2
 80060a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80060a4:	415b      	adcs	r3, r3
 80060a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060ac:	4641      	mov	r1, r8
 80060ae:	eb12 0a01 	adds.w	sl, r2, r1
 80060b2:	4649      	mov	r1, r9
 80060b4:	eb43 0b01 	adc.w	fp, r3, r1
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060cc:	4692      	mov	sl, r2
 80060ce:	469b      	mov	fp, r3
 80060d0:	4643      	mov	r3, r8
 80060d2:	eb1a 0303 	adds.w	r3, sl, r3
 80060d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060da:	464b      	mov	r3, r9
 80060dc:	eb4b 0303 	adc.w	r3, fp, r3
 80060e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80060f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80060f8:	460b      	mov	r3, r1
 80060fa:	18db      	adds	r3, r3, r3
 80060fc:	643b      	str	r3, [r7, #64]	; 0x40
 80060fe:	4613      	mov	r3, r2
 8006100:	eb42 0303 	adc.w	r3, r2, r3
 8006104:	647b      	str	r3, [r7, #68]	; 0x44
 8006106:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800610a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800610e:	f7fa f8b7 	bl	8000280 <__aeabi_uldivmod>
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	4611      	mov	r1, r2
 8006118:	4b3b      	ldr	r3, [pc, #236]	; (8006208 <UART_SetConfig+0x2d4>)
 800611a:	fba3 2301 	umull	r2, r3, r3, r1
 800611e:	095b      	lsrs	r3, r3, #5
 8006120:	2264      	movs	r2, #100	; 0x64
 8006122:	fb02 f303 	mul.w	r3, r2, r3
 8006126:	1acb      	subs	r3, r1, r3
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800612e:	4b36      	ldr	r3, [pc, #216]	; (8006208 <UART_SetConfig+0x2d4>)
 8006130:	fba3 2302 	umull	r2, r3, r3, r2
 8006134:	095b      	lsrs	r3, r3, #5
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800613c:	441c      	add	r4, r3
 800613e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006142:	2200      	movs	r2, #0
 8006144:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006148:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800614c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006150:	4642      	mov	r2, r8
 8006152:	464b      	mov	r3, r9
 8006154:	1891      	adds	r1, r2, r2
 8006156:	63b9      	str	r1, [r7, #56]	; 0x38
 8006158:	415b      	adcs	r3, r3
 800615a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800615c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006160:	4641      	mov	r1, r8
 8006162:	1851      	adds	r1, r2, r1
 8006164:	6339      	str	r1, [r7, #48]	; 0x30
 8006166:	4649      	mov	r1, r9
 8006168:	414b      	adcs	r3, r1
 800616a:	637b      	str	r3, [r7, #52]	; 0x34
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	f04f 0300 	mov.w	r3, #0
 8006174:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006178:	4659      	mov	r1, fp
 800617a:	00cb      	lsls	r3, r1, #3
 800617c:	4651      	mov	r1, sl
 800617e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006182:	4651      	mov	r1, sl
 8006184:	00ca      	lsls	r2, r1, #3
 8006186:	4610      	mov	r0, r2
 8006188:	4619      	mov	r1, r3
 800618a:	4603      	mov	r3, r0
 800618c:	4642      	mov	r2, r8
 800618e:	189b      	adds	r3, r3, r2
 8006190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006194:	464b      	mov	r3, r9
 8006196:	460a      	mov	r2, r1
 8006198:	eb42 0303 	adc.w	r3, r2, r3
 800619c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80061b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80061b4:	460b      	mov	r3, r1
 80061b6:	18db      	adds	r3, r3, r3
 80061b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ba:	4613      	mov	r3, r2
 80061bc:	eb42 0303 	adc.w	r3, r2, r3
 80061c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80061ca:	f7fa f859 	bl	8000280 <__aeabi_uldivmod>
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	4b0d      	ldr	r3, [pc, #52]	; (8006208 <UART_SetConfig+0x2d4>)
 80061d4:	fba3 1302 	umull	r1, r3, r3, r2
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	2164      	movs	r1, #100	; 0x64
 80061dc:	fb01 f303 	mul.w	r3, r1, r3
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	3332      	adds	r3, #50	; 0x32
 80061e6:	4a08      	ldr	r2, [pc, #32]	; (8006208 <UART_SetConfig+0x2d4>)
 80061e8:	fba2 2303 	umull	r2, r3, r2, r3
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	f003 0207 	and.w	r2, r3, #7
 80061f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4422      	add	r2, r4
 80061fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80061fc:	e105      	b.n	800640a <UART_SetConfig+0x4d6>
 80061fe:	bf00      	nop
 8006200:	40011000 	.word	0x40011000
 8006204:	40011400 	.word	0x40011400
 8006208:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800620c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006210:	2200      	movs	r2, #0
 8006212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006216:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800621a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800621e:	4642      	mov	r2, r8
 8006220:	464b      	mov	r3, r9
 8006222:	1891      	adds	r1, r2, r2
 8006224:	6239      	str	r1, [r7, #32]
 8006226:	415b      	adcs	r3, r3
 8006228:	627b      	str	r3, [r7, #36]	; 0x24
 800622a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800622e:	4641      	mov	r1, r8
 8006230:	1854      	adds	r4, r2, r1
 8006232:	4649      	mov	r1, r9
 8006234:	eb43 0501 	adc.w	r5, r3, r1
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	00eb      	lsls	r3, r5, #3
 8006242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006246:	00e2      	lsls	r2, r4, #3
 8006248:	4614      	mov	r4, r2
 800624a:	461d      	mov	r5, r3
 800624c:	4643      	mov	r3, r8
 800624e:	18e3      	adds	r3, r4, r3
 8006250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006254:	464b      	mov	r3, r9
 8006256:	eb45 0303 	adc.w	r3, r5, r3
 800625a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800625e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800626a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	f04f 0300 	mov.w	r3, #0
 8006276:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800627a:	4629      	mov	r1, r5
 800627c:	008b      	lsls	r3, r1, #2
 800627e:	4621      	mov	r1, r4
 8006280:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006284:	4621      	mov	r1, r4
 8006286:	008a      	lsls	r2, r1, #2
 8006288:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800628c:	f7f9 fff8 	bl	8000280 <__aeabi_uldivmod>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4b60      	ldr	r3, [pc, #384]	; (8006418 <UART_SetConfig+0x4e4>)
 8006296:	fba3 2302 	umull	r2, r3, r3, r2
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	011c      	lsls	r4, r3, #4
 800629e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a2:	2200      	movs	r2, #0
 80062a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80062ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80062b0:	4642      	mov	r2, r8
 80062b2:	464b      	mov	r3, r9
 80062b4:	1891      	adds	r1, r2, r2
 80062b6:	61b9      	str	r1, [r7, #24]
 80062b8:	415b      	adcs	r3, r3
 80062ba:	61fb      	str	r3, [r7, #28]
 80062bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062c0:	4641      	mov	r1, r8
 80062c2:	1851      	adds	r1, r2, r1
 80062c4:	6139      	str	r1, [r7, #16]
 80062c6:	4649      	mov	r1, r9
 80062c8:	414b      	adcs	r3, r1
 80062ca:	617b      	str	r3, [r7, #20]
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062d8:	4659      	mov	r1, fp
 80062da:	00cb      	lsls	r3, r1, #3
 80062dc:	4651      	mov	r1, sl
 80062de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062e2:	4651      	mov	r1, sl
 80062e4:	00ca      	lsls	r2, r1, #3
 80062e6:	4610      	mov	r0, r2
 80062e8:	4619      	mov	r1, r3
 80062ea:	4603      	mov	r3, r0
 80062ec:	4642      	mov	r2, r8
 80062ee:	189b      	adds	r3, r3, r2
 80062f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062f4:	464b      	mov	r3, r9
 80062f6:	460a      	mov	r2, r1
 80062f8:	eb42 0303 	adc.w	r3, r2, r3
 80062fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	67bb      	str	r3, [r7, #120]	; 0x78
 800630a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006318:	4649      	mov	r1, r9
 800631a:	008b      	lsls	r3, r1, #2
 800631c:	4641      	mov	r1, r8
 800631e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006322:	4641      	mov	r1, r8
 8006324:	008a      	lsls	r2, r1, #2
 8006326:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800632a:	f7f9 ffa9 	bl	8000280 <__aeabi_uldivmod>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	4b39      	ldr	r3, [pc, #228]	; (8006418 <UART_SetConfig+0x4e4>)
 8006334:	fba3 1302 	umull	r1, r3, r3, r2
 8006338:	095b      	lsrs	r3, r3, #5
 800633a:	2164      	movs	r1, #100	; 0x64
 800633c:	fb01 f303 	mul.w	r3, r1, r3
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	3332      	adds	r3, #50	; 0x32
 8006346:	4a34      	ldr	r2, [pc, #208]	; (8006418 <UART_SetConfig+0x4e4>)
 8006348:	fba2 2303 	umull	r2, r3, r2, r3
 800634c:	095b      	lsrs	r3, r3, #5
 800634e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006352:	441c      	add	r4, r3
 8006354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006358:	2200      	movs	r2, #0
 800635a:	673b      	str	r3, [r7, #112]	; 0x70
 800635c:	677a      	str	r2, [r7, #116]	; 0x74
 800635e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006362:	4642      	mov	r2, r8
 8006364:	464b      	mov	r3, r9
 8006366:	1891      	adds	r1, r2, r2
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	415b      	adcs	r3, r3
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006372:	4641      	mov	r1, r8
 8006374:	1851      	adds	r1, r2, r1
 8006376:	6039      	str	r1, [r7, #0]
 8006378:	4649      	mov	r1, r9
 800637a:	414b      	adcs	r3, r1
 800637c:	607b      	str	r3, [r7, #4]
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	f04f 0300 	mov.w	r3, #0
 8006386:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800638a:	4659      	mov	r1, fp
 800638c:	00cb      	lsls	r3, r1, #3
 800638e:	4651      	mov	r1, sl
 8006390:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006394:	4651      	mov	r1, sl
 8006396:	00ca      	lsls	r2, r1, #3
 8006398:	4610      	mov	r0, r2
 800639a:	4619      	mov	r1, r3
 800639c:	4603      	mov	r3, r0
 800639e:	4642      	mov	r2, r8
 80063a0:	189b      	adds	r3, r3, r2
 80063a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80063a4:	464b      	mov	r3, r9
 80063a6:	460a      	mov	r2, r1
 80063a8:	eb42 0303 	adc.w	r3, r2, r3
 80063ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	663b      	str	r3, [r7, #96]	; 0x60
 80063b8:	667a      	str	r2, [r7, #100]	; 0x64
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80063c6:	4649      	mov	r1, r9
 80063c8:	008b      	lsls	r3, r1, #2
 80063ca:	4641      	mov	r1, r8
 80063cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063d0:	4641      	mov	r1, r8
 80063d2:	008a      	lsls	r2, r1, #2
 80063d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80063d8:	f7f9 ff52 	bl	8000280 <__aeabi_uldivmod>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4b0d      	ldr	r3, [pc, #52]	; (8006418 <UART_SetConfig+0x4e4>)
 80063e2:	fba3 1302 	umull	r1, r3, r3, r2
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	2164      	movs	r1, #100	; 0x64
 80063ea:	fb01 f303 	mul.w	r3, r1, r3
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	3332      	adds	r3, #50	; 0x32
 80063f4:	4a08      	ldr	r2, [pc, #32]	; (8006418 <UART_SetConfig+0x4e4>)
 80063f6:	fba2 2303 	umull	r2, r3, r2, r3
 80063fa:	095b      	lsrs	r3, r3, #5
 80063fc:	f003 020f 	and.w	r2, r3, #15
 8006400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4422      	add	r2, r4
 8006408:	609a      	str	r2, [r3, #8]
}
 800640a:	bf00      	nop
 800640c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006410:	46bd      	mov	sp, r7
 8006412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006416:	bf00      	nop
 8006418:	51eb851f 	.word	0x51eb851f

0800641c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800641c:	b084      	sub	sp, #16
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	f107 001c 	add.w	r0, r7, #28
 800642a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	2b01      	cmp	r3, #1
 8006432:	d122      	bne.n	800647a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006438:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800645c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800645e:	2b01      	cmp	r3, #1
 8006460:	d105      	bne.n	800646e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f9c0 	bl	80067f4 <USB_CoreReset>
 8006474:	4603      	mov	r3, r0
 8006476:	73fb      	strb	r3, [r7, #15]
 8006478:	e01a      	b.n	80064b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f9b4 	bl	80067f4 <USB_CoreReset>
 800648c:	4603      	mov	r3, r0
 800648e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006492:	2b00      	cmp	r3, #0
 8006494:	d106      	bne.n	80064a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	639a      	str	r2, [r3, #56]	; 0x38
 80064a2:	e005      	b.n	80064b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d10b      	bne.n	80064ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f043 0206 	orr.w	r2, r3, #6
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f043 0220 	orr.w	r2, r3, #32
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064da:	b004      	add	sp, #16
 80064dc:	4770      	bx	lr

080064de <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f043 0201 	orr.w	r2, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f023 0201 	bic.w	r2, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	460b      	mov	r3, r1
 800652c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800653e:	78fb      	ldrb	r3, [r7, #3]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d115      	bne.n	8006570 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006550:	2001      	movs	r0, #1
 8006552:	f7fa fe25 	bl	80011a0 <HAL_Delay>
      ms++;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3301      	adds	r3, #1
 800655a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f93a 	bl	80067d6 <USB_GetMode>
 8006562:	4603      	mov	r3, r0
 8006564:	2b01      	cmp	r3, #1
 8006566:	d01e      	beq.n	80065a6 <USB_SetCurrentMode+0x84>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b31      	cmp	r3, #49	; 0x31
 800656c:	d9f0      	bls.n	8006550 <USB_SetCurrentMode+0x2e>
 800656e:	e01a      	b.n	80065a6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d115      	bne.n	80065a2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006582:	2001      	movs	r0, #1
 8006584:	f7fa fe0c 	bl	80011a0 <HAL_Delay>
      ms++;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3301      	adds	r3, #1
 800658c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f921 	bl	80067d6 <USB_GetMode>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d005      	beq.n	80065a6 <USB_SetCurrentMode+0x84>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b31      	cmp	r3, #49	; 0x31
 800659e:	d9f0      	bls.n	8006582 <USB_SetCurrentMode+0x60>
 80065a0:	e001      	b.n	80065a6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e005      	b.n	80065b2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b32      	cmp	r3, #50	; 0x32
 80065aa:	d101      	bne.n	80065b0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e000      	b.n	80065b2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3301      	adds	r3, #1
 80065ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4a13      	ldr	r2, [pc, #76]	; (8006620 <USB_FlushTxFifo+0x64>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d901      	bls.n	80065dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e01b      	b.n	8006614 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	daf2      	bge.n	80065ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	019b      	lsls	r3, r3, #6
 80065ec:	f043 0220 	orr.w	r2, r3, #32
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3301      	adds	r3, #1
 80065f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4a08      	ldr	r2, [pc, #32]	; (8006620 <USB_FlushTxFifo+0x64>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d901      	bls.n	8006606 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e006      	b.n	8006614 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	2b20      	cmp	r3, #32
 8006610:	d0f0      	beq.n	80065f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	00030d40 	.word	0x00030d40

08006624 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3301      	adds	r3, #1
 8006634:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4a11      	ldr	r2, [pc, #68]	; (8006680 <USB_FlushRxFifo+0x5c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d901      	bls.n	8006642 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e018      	b.n	8006674 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	daf2      	bge.n	8006630 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2210      	movs	r2, #16
 8006652:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	3301      	adds	r3, #1
 8006658:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4a08      	ldr	r2, [pc, #32]	; (8006680 <USB_FlushRxFifo+0x5c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d901      	bls.n	8006666 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e006      	b.n	8006674 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 0310 	and.w	r3, r3, #16
 800666e:	2b10      	cmp	r3, #16
 8006670:	d0f0      	beq.n	8006654 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	00030d40 	.word	0x00030d40

08006684 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006684:	b480      	push	{r7}
 8006686:	b089      	sub	sp, #36	; 0x24
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	4611      	mov	r1, r2
 8006690:	461a      	mov	r2, r3
 8006692:	460b      	mov	r3, r1
 8006694:	71fb      	strb	r3, [r7, #7]
 8006696:	4613      	mov	r3, r2
 8006698:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80066a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d123      	bne.n	80066f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80066aa:	88bb      	ldrh	r3, [r7, #4]
 80066ac:	3303      	adds	r3, #3
 80066ae:	089b      	lsrs	r3, r3, #2
 80066b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80066b2:	2300      	movs	r3, #0
 80066b4:	61bb      	str	r3, [r7, #24]
 80066b6:	e018      	b.n	80066ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066b8:	79fb      	ldrb	r3, [r7, #7]
 80066ba:	031a      	lsls	r2, r3, #12
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066c4:	461a      	mov	r2, r3
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	3301      	adds	r3, #1
 80066d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	3301      	adds	r3, #1
 80066d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	3301      	adds	r3, #1
 80066dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	3301      	adds	r3, #1
 80066e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	3301      	adds	r3, #1
 80066e8:	61bb      	str	r3, [r7, #24]
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d3e2      	bcc.n	80066b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3724      	adds	r7, #36	; 0x24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006700:	b480      	push	{r7}
 8006702:	b08b      	sub	sp, #44	; 0x2c
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	4613      	mov	r3, r2
 800670c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006716:	88fb      	ldrh	r3, [r7, #6]
 8006718:	089b      	lsrs	r3, r3, #2
 800671a:	b29b      	uxth	r3, r3
 800671c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800671e:	88fb      	ldrh	r3, [r7, #6]
 8006720:	f003 0303 	and.w	r3, r3, #3
 8006724:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006726:	2300      	movs	r3, #0
 8006728:	623b      	str	r3, [r7, #32]
 800672a:	e014      	b.n	8006756 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	601a      	str	r2, [r3, #0]
    pDest++;
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	3301      	adds	r3, #1
 800673c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	3301      	adds	r3, #1
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	3301      	adds	r3, #1
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	3301      	adds	r3, #1
 800674e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	3301      	adds	r3, #1
 8006754:	623b      	str	r3, [r7, #32]
 8006756:	6a3a      	ldr	r2, [r7, #32]
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	429a      	cmp	r2, r3
 800675c:	d3e6      	bcc.n	800672c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800675e:	8bfb      	ldrh	r3, [r7, #30]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d01e      	beq.n	80067a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006764:	2300      	movs	r3, #0
 8006766:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800676e:	461a      	mov	r2, r3
 8006770:	f107 0310 	add.w	r3, r7, #16
 8006774:	6812      	ldr	r2, [r2, #0]
 8006776:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	b2db      	uxtb	r3, r3
 800677e:	00db      	lsls	r3, r3, #3
 8006780:	fa22 f303 	lsr.w	r3, r2, r3
 8006784:	b2da      	uxtb	r2, r3
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	701a      	strb	r2, [r3, #0]
      i++;
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	3301      	adds	r3, #1
 800678e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	3301      	adds	r3, #1
 8006794:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006796:	8bfb      	ldrh	r3, [r7, #30]
 8006798:	3b01      	subs	r3, #1
 800679a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800679c:	8bfb      	ldrh	r3, [r7, #30]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1ea      	bne.n	8006778 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	372c      	adds	r7, #44	; 0x2c
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4013      	ands	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067c8:	68fb      	ldr	r3, [r7, #12]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	f003 0301 	and.w	r3, r3, #1
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
	...

080067f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3301      	adds	r3, #1
 8006804:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4a13      	ldr	r2, [pc, #76]	; (8006858 <USB_CoreReset+0x64>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d901      	bls.n	8006812 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e01b      	b.n	800684a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	daf2      	bge.n	8006800 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800681a:	2300      	movs	r3, #0
 800681c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f043 0201 	orr.w	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3301      	adds	r3, #1
 800682e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4a09      	ldr	r2, [pc, #36]	; (8006858 <USB_CoreReset+0x64>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d901      	bls.n	800683c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e006      	b.n	800684a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b01      	cmp	r3, #1
 8006846:	d0f0      	beq.n	800682a <USB_CoreReset+0x36>

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	00030d40 	.word	0x00030d40

0800685c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800685c:	b084      	sub	sp, #16
 800685e:	b580      	push	{r7, lr}
 8006860:	b086      	sub	sp, #24
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800686a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800687c:	461a      	mov	r2, r3
 800687e:	2300      	movs	r3, #0
 8006880:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006886:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006892:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d018      	beq.n	80068e4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80068b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d10a      	bne.n	80068ce <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068c6:	f043 0304 	orr.w	r3, r3, #4
 80068ca:	6013      	str	r3, [r2, #0]
 80068cc:	e014      	b.n	80068f8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068dc:	f023 0304 	bic.w	r3, r3, #4
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	e009      	b.n	80068f8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068f2:	f023 0304 	bic.w	r3, r3, #4
 80068f6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068f8:	2110      	movs	r1, #16
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff fe5e 	bl	80065bc <USB_FlushTxFifo>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff fe8a 	bl	8006624 <USB_FlushRxFifo>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800691a:	2300      	movs	r3, #0
 800691c:	613b      	str	r3, [r7, #16]
 800691e:	e015      	b.n	800694c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692c:	461a      	mov	r2, r3
 800692e:	f04f 33ff 	mov.w	r3, #4294967295
 8006932:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4413      	add	r3, r2
 800693c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006940:	461a      	mov	r2, r3
 8006942:	2300      	movs	r3, #0
 8006944:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	3301      	adds	r3, #1
 800694a:	613b      	str	r3, [r7, #16]
 800694c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	429a      	cmp	r2, r3
 8006952:	d3e5      	bcc.n	8006920 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f04f 32ff 	mov.w	r2, #4294967295
 8006960:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006974:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a13      	ldr	r2, [pc, #76]	; (80069c8 <USB_HostInit+0x16c>)
 800697a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a13      	ldr	r2, [pc, #76]	; (80069cc <USB_HostInit+0x170>)
 8006980:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006984:	e009      	b.n	800699a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2280      	movs	r2, #128	; 0x80
 800698a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a10      	ldr	r2, [pc, #64]	; (80069d0 <USB_HostInit+0x174>)
 8006990:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a0f      	ldr	r2, [pc, #60]	; (80069d4 <USB_HostInit+0x178>)
 8006996:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	2b00      	cmp	r3, #0
 800699e:	d105      	bne.n	80069ac <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f043 0210 	orr.w	r2, r3, #16
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	699a      	ldr	r2, [r3, #24]
 80069b0:	4b09      	ldr	r3, [pc, #36]	; (80069d8 <USB_HostInit+0x17c>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80069b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069c4:	b004      	add	sp, #16
 80069c6:	4770      	bx	lr
 80069c8:	01000200 	.word	0x01000200
 80069cc:	00e00300 	.word	0x00e00300
 80069d0:	00600080 	.word	0x00600080
 80069d4:	004000e0 	.word	0x004000e0
 80069d8:	a3200008 	.word	0xa3200008

080069dc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	460b      	mov	r3, r1
 80069e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069fa:	f023 0303 	bic.w	r3, r3, #3
 80069fe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	68f9      	ldr	r1, [r7, #12]
 8006a10:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a14:	4313      	orrs	r3, r2
 8006a16:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d107      	bne.n	8006a2e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a24:	461a      	mov	r2, r3
 8006a26:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006a2a:	6053      	str	r3, [r2, #4]
 8006a2c:	e009      	b.n	8006a42 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006a2e:	78fb      	ldrb	r3, [r7, #3]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d106      	bne.n	8006a42 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006a40:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006a70:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a7e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006a80:	2064      	movs	r0, #100	; 0x64
 8006a82:	f7fa fb8d 	bl	80011a0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a92:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006a94:	200a      	movs	r0, #10
 8006a96:	f7fa fb83 	bl	80011a0 <HAL_Delay>

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ac8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d109      	bne.n	8006ae8 <USB_DriveVbus+0x44>
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d106      	bne.n	8006ae8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ae2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ae6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af2:	d109      	bne.n	8006b08 <USB_DriveVbus+0x64>
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d106      	bne.n	8006b08 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b06:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b085      	sub	sp, #20
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	0c5b      	lsrs	r3, r3, #17
 8006b34:	f003 0303 	and.w	r3, r3, #3
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	b29b      	uxth	r3, r3
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
	...

08006b68 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	4608      	mov	r0, r1
 8006b72:	4611      	mov	r1, r2
 8006b74:	461a      	mov	r2, r3
 8006b76:	4603      	mov	r3, r0
 8006b78:	70fb      	strb	r3, [r7, #3]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	70bb      	strb	r3, [r7, #2]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006b8a:	78fb      	ldrb	r3, [r7, #3]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b96:	461a      	mov	r2, r3
 8006b98:	f04f 33ff 	mov.w	r3, #4294967295
 8006b9c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006b9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d87e      	bhi.n	8006ca4 <USB_HC_Init+0x13c>
 8006ba6:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <USB_HC_Init+0x44>)
 8006ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bac:	08006bbd 	.word	0x08006bbd
 8006bb0:	08006c67 	.word	0x08006c67
 8006bb4:	08006bbd 	.word	0x08006bbd
 8006bb8:	08006c29 	.word	0x08006c29
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc8:	461a      	mov	r2, r3
 8006bca:	f240 439d 	movw	r3, #1181	; 0x49d
 8006bce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006bd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	da10      	bge.n	8006bfa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	78fa      	ldrb	r2, [r7, #3]
 8006be8:	0151      	lsls	r1, r2, #5
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	440a      	add	r2, r1
 8006bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bf6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006bf8:	e057      	b.n	8006caa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d051      	beq.n	8006caa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006c06:	78fb      	ldrb	r3, [r7, #3]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	78fa      	ldrb	r2, [r7, #3]
 8006c16:	0151      	lsls	r1, r2, #5
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	440a      	add	r2, r1
 8006c1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c24:	60d3      	str	r3, [r2, #12]
      break;
 8006c26:	e040      	b.n	8006caa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c34:	461a      	mov	r2, r3
 8006c36:	f240 639d 	movw	r3, #1693	; 0x69d
 8006c3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	da34      	bge.n	8006cae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c44:	78fb      	ldrb	r3, [r7, #3]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	78fa      	ldrb	r2, [r7, #3]
 8006c54:	0151      	lsls	r1, r2, #5
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	440a      	add	r2, r1
 8006c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c62:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006c64:	e023      	b.n	8006cae <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c66:	78fb      	ldrb	r3, [r7, #3]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c72:	461a      	mov	r2, r3
 8006c74:	f240 2325 	movw	r3, #549	; 0x225
 8006c78:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	da17      	bge.n	8006cb2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006c82:	78fb      	ldrb	r3, [r7, #3]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	78fa      	ldrb	r2, [r7, #3]
 8006c92:	0151      	lsls	r1, r2, #5
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	440a      	add	r2, r1
 8006c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c9c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006ca0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006ca2:	e006      	b.n	8006cb2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	77fb      	strb	r3, [r7, #31]
      break;
 8006ca8:	e004      	b.n	8006cb4 <USB_HC_Init+0x14c>
      break;
 8006caa:	bf00      	nop
 8006cac:	e002      	b.n	8006cb4 <USB_HC_Init+0x14c>
      break;
 8006cae:	bf00      	nop
 8006cb0:	e000      	b.n	8006cb4 <USB_HC_Init+0x14c>
      break;
 8006cb2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	78fa      	ldrb	r2, [r7, #3]
 8006cc4:	0151      	lsls	r1, r2, #5
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	440a      	add	r2, r1
 8006cca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cce:	f043 0302 	orr.w	r3, r3, #2
 8006cd2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cda:	699a      	ldr	r2, [r3, #24]
 8006cdc:	78fb      	ldrb	r3, [r7, #3]
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce8:	6939      	ldr	r1, [r7, #16]
 8006cea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006cfe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	da03      	bge.n	8006d0e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d0a:	61bb      	str	r3, [r7, #24]
 8006d0c:	e001      	b.n	8006d12 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff feff 	bl	8006b16 <USB_GetHostSpeed>
 8006d18:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006d1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d106      	bne.n	8006d30 <USB_HC_Init+0x1c8>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d003      	beq.n	8006d30 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	e001      	b.n	8006d34 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d34:	787b      	ldrb	r3, [r7, #1]
 8006d36:	059b      	lsls	r3, r3, #22
 8006d38:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d3c:	78bb      	ldrb	r3, [r7, #2]
 8006d3e:	02db      	lsls	r3, r3, #11
 8006d40:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d44:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d4a:	049b      	lsls	r3, r3, #18
 8006d4c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d50:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d52:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006d54:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d58:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d5e:	78fb      	ldrb	r3, [r7, #3]
 8006d60:	0159      	lsls	r1, r3, #5
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	440b      	add	r3, r1
 8006d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d6a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d70:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006d72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d003      	beq.n	8006d82 <USB_HC_Init+0x21a>
 8006d7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d10f      	bne.n	8006da2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006d82:	78fb      	ldrb	r3, [r7, #3]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	78fa      	ldrb	r2, [r7, #3]
 8006d92:	0151      	lsls	r1, r2, #5
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	440a      	add	r2, r1
 8006d98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006da0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006da2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3720      	adds	r7, #32
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08c      	sub	sp, #48	; 0x30
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	4613      	mov	r3, r2
 8006db8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	785b      	ldrb	r3, [r3, #1]
 8006dc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dc8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d02d      	beq.n	8006e32 <USB_HC_StartXfer+0x86>
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	791b      	ldrb	r3, [r3, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d129      	bne.n	8006e32 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006dde:	79fb      	ldrb	r3, [r7, #7]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d117      	bne.n	8006e14 <USB_HC_StartXfer+0x68>
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	79db      	ldrb	r3, [r3, #7]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <USB_HC_StartXfer+0x48>
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	79db      	ldrb	r3, [r3, #7]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d10f      	bne.n	8006e14 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	69fa      	ldr	r2, [r7, #28]
 8006e04:	0151      	lsls	r1, r2, #5
 8006e06:	6a3a      	ldr	r2, [r7, #32]
 8006e08:	440a      	add	r2, r1
 8006e0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e12:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006e14:	79fb      	ldrb	r3, [r7, #7]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10b      	bne.n	8006e32 <USB_HC_StartXfer+0x86>
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	795b      	ldrb	r3, [r3, #5]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d107      	bne.n	8006e32 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	785b      	ldrb	r3, [r3, #1]
 8006e26:	4619      	mov	r1, r3
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 fa0f 	bl	800724c <USB_DoPing>
      return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e0f8      	b.n	8007024 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d018      	beq.n	8006e6c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	8912      	ldrh	r2, [r2, #8]
 8006e42:	4413      	add	r3, r2
 8006e44:	3b01      	subs	r3, #1
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	8912      	ldrh	r2, [r2, #8]
 8006e4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e4e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006e50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e52:	8b7b      	ldrh	r3, [r7, #26]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d90b      	bls.n	8006e70 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006e58:	8b7b      	ldrh	r3, [r7, #26]
 8006e5a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	8912      	ldrh	r2, [r2, #8]
 8006e62:	fb03 f202 	mul.w	r2, r3, r2
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	611a      	str	r2, [r3, #16]
 8006e6a:	e001      	b.n	8006e70 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	78db      	ldrb	r3, [r3, #3]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d007      	beq.n	8006e88 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	8912      	ldrh	r2, [r2, #8]
 8006e7e:	fb03 f202 	mul.w	r2, r3, r2
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	611a      	str	r2, [r3, #16]
 8006e86:	e003      	b.n	8006e90 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	695a      	ldr	r2, [r3, #20]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e9a:	04d9      	lsls	r1, r3, #19
 8006e9c:	4b63      	ldr	r3, [pc, #396]	; (800702c <USB_HC_StartXfer+0x280>)
 8006e9e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ea0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	7a9b      	ldrb	r3, [r3, #10]
 8006ea6:	075b      	lsls	r3, r3, #29
 8006ea8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006eac:	69f9      	ldr	r1, [r7, #28]
 8006eae:	0148      	lsls	r0, r1, #5
 8006eb0:	6a39      	ldr	r1, [r7, #32]
 8006eb2:	4401      	add	r1, r0
 8006eb4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006eb8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006eba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d009      	beq.n	8006ed6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	68d9      	ldr	r1, [r3, #12]
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed2:	460a      	mov	r2, r1
 8006ed4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	bf0c      	ite	eq
 8006ee6:	2301      	moveq	r3, #1
 8006ee8:	2300      	movne	r3, #0
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69fa      	ldr	r2, [r7, #28]
 8006efe:	0151      	lsls	r1, r2, #5
 8006f00:	6a3a      	ldr	r2, [r7, #32]
 8006f02:	440a      	add	r2, r1
 8006f04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f0c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	7e7b      	ldrb	r3, [r7, #25]
 8006f1e:	075b      	lsls	r3, r3, #29
 8006f20:	69f9      	ldr	r1, [r7, #28]
 8006f22:	0148      	lsls	r0, r1, #5
 8006f24:	6a39      	ldr	r1, [r7, #32]
 8006f26:	4401      	add	r1, r0
 8006f28:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	015a      	lsls	r2, r3, #5
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f46:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	78db      	ldrb	r3, [r3, #3]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d004      	beq.n	8006f5a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f56:	613b      	str	r3, [r7, #16]
 8006f58:	e003      	b.n	8006f62 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f60:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f68:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f76:	461a      	mov	r2, r3
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006f7c:	79fb      	ldrb	r3, [r7, #7]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	e04e      	b.n	8007024 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	78db      	ldrb	r3, [r3, #3]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d149      	bne.n	8007022 <USB_HC_StartXfer+0x276>
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d045      	beq.n	8007022 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	79db      	ldrb	r3, [r3, #7]
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d830      	bhi.n	8007000 <USB_HC_StartXfer+0x254>
 8006f9e:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <USB_HC_StartXfer+0x1f8>)
 8006fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa4:	08006fb5 	.word	0x08006fb5
 8006fa8:	08006fd9 	.word	0x08006fd9
 8006fac:	08006fb5 	.word	0x08006fb5
 8006fb0:	08006fd9 	.word	0x08006fd9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	3303      	adds	r3, #3
 8006fba:	089b      	lsrs	r3, r3, #2
 8006fbc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006fbe:	8afa      	ldrh	r2, [r7, #22]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d91c      	bls.n	8007004 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	f043 0220 	orr.w	r2, r3, #32
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fd6:	e015      	b.n	8007004 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	3303      	adds	r3, #3
 8006fde:	089b      	lsrs	r3, r3, #2
 8006fe0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006fe2:	8afa      	ldrh	r2, [r7, #22]
 8006fe4:	6a3b      	ldr	r3, [r7, #32]
 8006fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d90a      	bls.n	8007008 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	619a      	str	r2, [r3, #24]
        }
        break;
 8006ffe:	e003      	b.n	8007008 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007000:	bf00      	nop
 8007002:	e002      	b.n	800700a <USB_HC_StartXfer+0x25e>
        break;
 8007004:	bf00      	nop
 8007006:	e000      	b.n	800700a <USB_HC_StartXfer+0x25e>
        break;
 8007008:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	68d9      	ldr	r1, [r3, #12]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	785a      	ldrb	r2, [r3, #1]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	b29b      	uxth	r3, r3
 8007018:	2000      	movs	r0, #0
 800701a:	9000      	str	r0, [sp, #0]
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f7ff fb31 	bl	8006684 <USB_WritePacket>
  }

  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3728      	adds	r7, #40	; 0x28
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	1ff80000 	.word	0x1ff80000

08007030 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	b29b      	uxth	r3, r3
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007052:	b480      	push	{r7}
 8007054:	b089      	sub	sp, #36	; 0x24
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	460b      	mov	r3, r1
 800705c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007062:	78fb      	ldrb	r3, [r7, #3]
 8007064:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	0c9b      	lsrs	r3, r3, #18
 800707a:	f003 0303 	and.w	r3, r3, #3
 800707e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	4413      	add	r3, r2
 8007088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	0fdb      	lsrs	r3, r3, #31
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f003 0320 	and.w	r3, r3, #32
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d104      	bne.n	80070ac <USB_HC_Halt+0x5a>
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	e0c8      	b.n	800723e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <USB_HC_Halt+0x66>
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d163      	bne.n	8007180 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	0151      	lsls	r1, r2, #5
 80070ca:	69fa      	ldr	r2, [r7, #28]
 80070cc:	440a      	add	r2, r1
 80070ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070d6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f003 0320 	and.w	r3, r3, #32
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f040 80ab 	bne.w	800723c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d133      	bne.n	800715a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	0151      	lsls	r1, r2, #5
 8007104:	69fa      	ldr	r2, [r7, #28]
 8007106:	440a      	add	r2, r1
 8007108:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800710c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007110:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	4413      	add	r3, r2
 800711a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	69ba      	ldr	r2, [r7, #24]
 8007122:	0151      	lsls	r1, r2, #5
 8007124:	69fa      	ldr	r2, [r7, #28]
 8007126:	440a      	add	r2, r1
 8007128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800712c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007130:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3301      	adds	r3, #1
 8007136:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800713e:	d81d      	bhi.n	800717c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	4413      	add	r3, r2
 8007148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007152:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007156:	d0ec      	beq.n	8007132 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007158:	e070      	b.n	800723c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	4413      	add	r3, r2
 8007162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	0151      	lsls	r1, r2, #5
 800716c:	69fa      	ldr	r2, [r7, #28]
 800716e:	440a      	add	r2, r1
 8007170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007178:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800717a:	e05f      	b.n	800723c <USB_HC_Halt+0x1ea>
            break;
 800717c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800717e:	e05d      	b.n	800723c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	4413      	add	r3, r2
 8007188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	0151      	lsls	r1, r2, #5
 8007192:	69fa      	ldr	r2, [r7, #28]
 8007194:	440a      	add	r2, r1
 8007196:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800719a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800719e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d133      	bne.n	8007218 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	0151      	lsls	r1, r2, #5
 80071c2:	69fa      	ldr	r2, [r7, #28]
 80071c4:	440a      	add	r2, r1
 80071c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071ce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	0151      	lsls	r1, r2, #5
 80071e2:	69fa      	ldr	r2, [r7, #28]
 80071e4:	440a      	add	r2, r1
 80071e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071ee:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3301      	adds	r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071fc:	d81d      	bhi.n	800723a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	015a      	lsls	r2, r3, #5
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	4413      	add	r3, r2
 8007206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007214:	d0ec      	beq.n	80071f0 <USB_HC_Halt+0x19e>
 8007216:	e011      	b.n	800723c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	4413      	add	r3, r2
 8007220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	69ba      	ldr	r2, [r7, #24]
 8007228:	0151      	lsls	r1, r2, #5
 800722a:	69fa      	ldr	r2, [r7, #28]
 800722c:	440a      	add	r2, r1
 800722e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	e000      	b.n	800723c <USB_HC_Halt+0x1ea>
          break;
 800723a:	bf00      	nop
    }
  }

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3724      	adds	r7, #36	; 0x24
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
	...

0800724c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800725c:	78fb      	ldrb	r3, [r7, #3]
 800725e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007260:	2301      	movs	r3, #1
 8007262:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	04da      	lsls	r2, r3, #19
 8007268:	4b15      	ldr	r3, [pc, #84]	; (80072c0 <USB_DoPing+0x74>)
 800726a:	4013      	ands	r3, r2
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	0151      	lsls	r1, r2, #5
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	440a      	add	r2, r1
 8007274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007278:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800727c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	4413      	add	r3, r2
 8007286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007294:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800729c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072aa:	461a      	mov	r2, r3
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	371c      	adds	r7, #28
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	1ff80000 	.word	0x1ff80000

080072c4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b088      	sub	sp, #32
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff f911 	bl	8006500 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072de:	2110      	movs	r1, #16
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7ff f96b 	bl	80065bc <USB_FlushTxFifo>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff f997 	bl	8006624 <USB_FlushRxFifo>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d001      	beq.n	8007300 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007300:	2300      	movs	r3, #0
 8007302:	61bb      	str	r3, [r7, #24]
 8007304:	e01f      	b.n	8007346 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	4413      	add	r3, r2
 800730e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800731c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007324:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800732c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	4413      	add	r3, r2
 8007336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733a:	461a      	mov	r2, r3
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	3301      	adds	r3, #1
 8007344:	61bb      	str	r3, [r7, #24]
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	2b0f      	cmp	r3, #15
 800734a:	d9dc      	bls.n	8007306 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800734c:	2300      	movs	r3, #0
 800734e:	61bb      	str	r3, [r7, #24]
 8007350:	e034      	b.n	80073bc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	4413      	add	r3, r2
 800735a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007368:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007370:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007378:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	4413      	add	r3, r2
 8007382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007386:	461a      	mov	r2, r3
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3301      	adds	r3, #1
 8007390:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007398:	d80c      	bhi.n	80073b4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073b0:	d0ec      	beq.n	800738c <USB_StopHost+0xc8>
 80073b2:	e000      	b.n	80073b6 <USB_StopHost+0xf2>
        break;
 80073b4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	3301      	adds	r3, #1
 80073ba:	61bb      	str	r3, [r7, #24]
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	2b0f      	cmp	r3, #15
 80073c0:	d9c7      	bls.n	8007352 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073c8:	461a      	mov	r2, r3
 80073ca:	f04f 33ff 	mov.w	r3, #4294967295
 80073ce:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f04f 32ff 	mov.w	r2, #4294967295
 80073d6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7ff f880 	bl	80064de <USB_EnableGlobalInt>

  return ret;
 80073de:	7ffb      	ldrb	r3, [r7, #31]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3720      	adds	r7, #32
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80073e8:	b590      	push	{r4, r7, lr}
 80073ea:	b089      	sub	sp, #36	; 0x24
 80073ec:	af04      	add	r7, sp, #16
 80073ee:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80073f0:	2301      	movs	r3, #1
 80073f2:	2202      	movs	r2, #2
 80073f4:	2102      	movs	r1, #2
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fc66 	bl	8007cc8 <USBH_FindInterface>
 80073fc:	4603      	mov	r3, r0
 80073fe:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	2bff      	cmp	r3, #255	; 0xff
 8007404:	d002      	beq.n	800740c <USBH_CDC_InterfaceInit+0x24>
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d901      	bls.n	8007410 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800740c:	2302      	movs	r3, #2
 800740e:	e13d      	b.n	800768c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007410:	7bfb      	ldrb	r3, [r7, #15]
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fc3b 	bl	8007c90 <USBH_SelectInterface>
 800741a:	4603      	mov	r3, r0
 800741c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007424:	2302      	movs	r3, #2
 8007426:	e131      	b.n	800768c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800742e:	2050      	movs	r0, #80	; 0x50
 8007430:	f002 fafa 	bl	8009a28 <malloc>
 8007434:	4603      	mov	r3, r0
 8007436:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007448:	2302      	movs	r3, #2
 800744a:	e11f      	b.n	800768c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800744c:	2250      	movs	r2, #80	; 0x50
 800744e:	2100      	movs	r1, #0
 8007450:	68b8      	ldr	r0, [r7, #8]
 8007452:	f002 faf9 	bl	8009a48 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	211a      	movs	r1, #26
 800745c:	fb01 f303 	mul.w	r3, r1, r3
 8007460:	4413      	add	r3, r2
 8007462:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	b25b      	sxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	da15      	bge.n	800749a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	211a      	movs	r1, #26
 8007474:	fb01 f303 	mul.w	r3, r1, r3
 8007478:	4413      	add	r3, r2
 800747a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800747e:	781a      	ldrb	r2, [r3, #0]
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	211a      	movs	r1, #26
 800748a:	fb01 f303 	mul.w	r3, r1, r3
 800748e:	4413      	add	r3, r2
 8007490:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007494:	881a      	ldrh	r2, [r3, #0]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	785b      	ldrb	r3, [r3, #1]
 800749e:	4619      	mov	r1, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f001 ff2c 	bl	80092fe <USBH_AllocPipe>
 80074a6:	4603      	mov	r3, r0
 80074a8:	461a      	mov	r2, r3
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	7819      	ldrb	r1, [r3, #0]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	7858      	ldrb	r0, [r3, #1]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	8952      	ldrh	r2, [r2, #10]
 80074c6:	9202      	str	r2, [sp, #8]
 80074c8:	2203      	movs	r2, #3
 80074ca:	9201      	str	r2, [sp, #4]
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	4623      	mov	r3, r4
 80074d0:	4602      	mov	r2, r0
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f001 fee4 	bl	80092a0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2200      	movs	r2, #0
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f002 f9f3 	bl	80098cc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80074e6:	2300      	movs	r3, #0
 80074e8:	2200      	movs	r2, #0
 80074ea:	210a      	movs	r1, #10
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fbeb 	bl	8007cc8 <USBH_FindInterface>
 80074f2:	4603      	mov	r3, r0
 80074f4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	2bff      	cmp	r3, #255	; 0xff
 80074fa:	d002      	beq.n	8007502 <USBH_CDC_InterfaceInit+0x11a>
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d901      	bls.n	8007506 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007502:	2302      	movs	r3, #2
 8007504:	e0c2      	b.n	800768c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007506:	7bfb      	ldrb	r3, [r7, #15]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	211a      	movs	r1, #26
 800750c:	fb01 f303 	mul.w	r3, r1, r3
 8007510:	4413      	add	r3, r2
 8007512:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	b25b      	sxtb	r3, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	da16      	bge.n	800754c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	211a      	movs	r1, #26
 8007524:	fb01 f303 	mul.w	r3, r1, r3
 8007528:	4413      	add	r3, r2
 800752a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800752e:	781a      	ldrb	r2, [r3, #0]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	211a      	movs	r1, #26
 800753a:	fb01 f303 	mul.w	r3, r1, r3
 800753e:	4413      	add	r3, r2
 8007540:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007544:	881a      	ldrh	r2, [r3, #0]
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	835a      	strh	r2, [r3, #26]
 800754a:	e015      	b.n	8007578 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800754c:	7bfb      	ldrb	r3, [r7, #15]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	211a      	movs	r1, #26
 8007552:	fb01 f303 	mul.w	r3, r1, r3
 8007556:	4413      	add	r3, r2
 8007558:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800755c:	781a      	ldrb	r2, [r3, #0]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	211a      	movs	r1, #26
 8007568:	fb01 f303 	mul.w	r3, r1, r3
 800756c:	4413      	add	r3, r2
 800756e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007572:	881a      	ldrh	r2, [r3, #0]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	211a      	movs	r1, #26
 800757e:	fb01 f303 	mul.w	r3, r1, r3
 8007582:	4413      	add	r3, r2
 8007584:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	b25b      	sxtb	r3, r3
 800758c:	2b00      	cmp	r3, #0
 800758e:	da16      	bge.n	80075be <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007590:	7bfb      	ldrb	r3, [r7, #15]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	211a      	movs	r1, #26
 8007596:	fb01 f303 	mul.w	r3, r1, r3
 800759a:	4413      	add	r3, r2
 800759c:	f203 3356 	addw	r3, r3, #854	; 0x356
 80075a0:	781a      	ldrb	r2, [r3, #0]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	211a      	movs	r1, #26
 80075ac:	fb01 f303 	mul.w	r3, r1, r3
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075b6:	881a      	ldrh	r2, [r3, #0]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	835a      	strh	r2, [r3, #26]
 80075bc:	e015      	b.n	80075ea <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	211a      	movs	r1, #26
 80075c4:	fb01 f303 	mul.w	r3, r1, r3
 80075c8:	4413      	add	r3, r2
 80075ca:	f203 3356 	addw	r3, r3, #854	; 0x356
 80075ce:	781a      	ldrb	r2, [r3, #0]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	211a      	movs	r1, #26
 80075da:	fb01 f303 	mul.w	r3, r1, r3
 80075de:	4413      	add	r3, r2
 80075e0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075e4:	881a      	ldrh	r2, [r3, #0]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	7b9b      	ldrb	r3, [r3, #14]
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f001 fe84 	bl	80092fe <USBH_AllocPipe>
 80075f6:	4603      	mov	r3, r0
 80075f8:	461a      	mov	r2, r3
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	7bdb      	ldrb	r3, [r3, #15]
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f001 fe7a 	bl	80092fe <USBH_AllocPipe>
 800760a:	4603      	mov	r3, r0
 800760c:	461a      	mov	r2, r3
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	7b59      	ldrb	r1, [r3, #13]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	7b98      	ldrb	r0, [r3, #14]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	8b12      	ldrh	r2, [r2, #24]
 800762a:	9202      	str	r2, [sp, #8]
 800762c:	2202      	movs	r2, #2
 800762e:	9201      	str	r2, [sp, #4]
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	4623      	mov	r3, r4
 8007634:	4602      	mov	r2, r0
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 fe32 	bl	80092a0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	7b19      	ldrb	r1, [r3, #12]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	7bd8      	ldrb	r0, [r3, #15]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	8b52      	ldrh	r2, [r2, #26]
 8007654:	9202      	str	r2, [sp, #8]
 8007656:	2202      	movs	r2, #2
 8007658:	9201      	str	r2, [sp, #4]
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	4623      	mov	r3, r4
 800765e:	4602      	mov	r2, r0
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f001 fe1d 	bl	80092a0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	7b5b      	ldrb	r3, [r3, #13]
 8007672:	2200      	movs	r2, #0
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f002 f928 	bl	80098cc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	7b1b      	ldrb	r3, [r3, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f002 f921 	bl	80098cc <USBH_LL_SetToggle>

  return USBH_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	bd90      	pop	{r4, r7, pc}

08007694 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076a2:	69db      	ldr	r3, [r3, #28]
 80076a4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00e      	beq.n	80076cc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	4619      	mov	r1, r3
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f001 fe12 	bl	80092de <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	4619      	mov	r1, r3
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f001 fe3d 	bl	8009340 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	7b1b      	ldrb	r3, [r3, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00e      	beq.n	80076f2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	7b1b      	ldrb	r3, [r3, #12]
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f001 fdff 	bl	80092de <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	7b1b      	ldrb	r3, [r3, #12]
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f001 fe2a 	bl	8009340 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	7b5b      	ldrb	r3, [r3, #13]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00e      	beq.n	8007718 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	7b5b      	ldrb	r3, [r3, #13]
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 fdec 	bl	80092de <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	7b5b      	ldrb	r3, [r3, #13]
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f001 fe17 	bl	8009340 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00b      	beq.n	800773c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800772a:	69db      	ldr	r3, [r3, #28]
 800772c:	4618      	mov	r0, r3
 800772e:	f002 f983 	bl	8009a38 <free>
    phost->pActiveClass->pData = 0U;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007738:	2200      	movs	r2, #0
 800773a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	3340      	adds	r3, #64	; 0x40
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f8b1 	bl	80078c6 <GetLineCoding>
 8007764:	4603      	mov	r3, r0
 8007766:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007768:	7afb      	ldrb	r3, [r7, #11]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d105      	bne.n	800777a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007774:	2102      	movs	r1, #2
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800777a:	7afb      	ldrb	r3, [r7, #11]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800778c:	2301      	movs	r3, #1
 800778e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007790:	2300      	movs	r3, #0
 8007792:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	d877      	bhi.n	8007898 <USBH_CDC_Process+0x114>
 80077a8:	a201      	add	r2, pc, #4	; (adr r2, 80077b0 <USBH_CDC_Process+0x2c>)
 80077aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ae:	bf00      	nop
 80077b0:	080077c5 	.word	0x080077c5
 80077b4:	080077cb 	.word	0x080077cb
 80077b8:	080077fb 	.word	0x080077fb
 80077bc:	0800786f 	.word	0x0800786f
 80077c0:	0800787d 	.word	0x0800787d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	73fb      	strb	r3, [r7, #15]
      break;
 80077c8:	e06d      	b.n	80078a6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f897 	bl	8007904 <SetLineCoding>
 80077d6:	4603      	mov	r3, r0
 80077d8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d104      	bne.n	80077ea <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80077e8:	e058      	b.n	800789c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d055      	beq.n	800789c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2204      	movs	r2, #4
 80077f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80077f8:	e050      	b.n	800789c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	3340      	adds	r3, #64	; 0x40
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f860 	bl	80078c6 <GetLineCoding>
 8007806:	4603      	mov	r3, r0
 8007808:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800780a:	7bbb      	ldrb	r3, [r7, #14]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d126      	bne.n	800785e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007822:	791b      	ldrb	r3, [r3, #4]
 8007824:	429a      	cmp	r2, r3
 8007826:	d13b      	bne.n	80078a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007832:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007834:	429a      	cmp	r2, r3
 8007836:	d133      	bne.n	80078a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007842:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007844:	429a      	cmp	r2, r3
 8007846:	d12b      	bne.n	80078a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007850:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007852:	429a      	cmp	r2, r3
 8007854:	d124      	bne.n	80078a0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f958 	bl	8007b0c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800785c:	e020      	b.n	80078a0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800785e:	7bbb      	ldrb	r3, [r7, #14]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d01d      	beq.n	80078a0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2204      	movs	r2, #4
 8007868:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800786c:	e018      	b.n	80078a0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f867 	bl	8007942 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f8da 	bl	8007a2e <CDC_ProcessReception>
      break;
 800787a:	e014      	b.n	80078a6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800787c:	2100      	movs	r1, #0
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 ffef 	bl	8008862 <USBH_ClrFeature>
 8007884:	4603      	mov	r3, r0
 8007886:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10a      	bne.n	80078a4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007896:	e005      	b.n	80078a4 <USBH_CDC_Process+0x120>

    default:
      break;
 8007898:	bf00      	nop
 800789a:	e004      	b.n	80078a6 <USBH_CDC_Process+0x122>
      break;
 800789c:	bf00      	nop
 800789e:	e002      	b.n	80078a6 <USBH_CDC_Process+0x122>
      break;
 80078a0:	bf00      	nop
 80078a2:	e000      	b.n	80078a6 <USBH_CDC_Process+0x122>
      break;
 80078a4:	bf00      	nop

  }

  return status;
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b082      	sub	sp, #8
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	22a1      	movs	r2, #161	; 0xa1
 80078d4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2221      	movs	r2, #33	; 0x21
 80078da:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2207      	movs	r2, #7
 80078ec:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2207      	movs	r2, #7
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f001 fa81 	bl	8008dfc <USBH_CtlReq>
 80078fa:	4603      	mov	r3, r0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2221      	movs	r2, #33	; 0x21
 8007912:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2220      	movs	r2, #32
 8007918:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2207      	movs	r2, #7
 800792a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2207      	movs	r2, #7
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f001 fa62 	bl	8008dfc <USBH_CtlReq>
 8007938:	4603      	mov	r3, r0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b086      	sub	sp, #24
 8007946:	af02      	add	r7, sp, #8
 8007948:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007954:	2300      	movs	r3, #0
 8007956:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800795e:	2b01      	cmp	r3, #1
 8007960:	d002      	beq.n	8007968 <CDC_ProcessTransmission+0x26>
 8007962:	2b02      	cmp	r3, #2
 8007964:	d023      	beq.n	80079ae <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007966:	e05e      	b.n	8007a26 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	8b12      	ldrh	r2, [r2, #24]
 8007970:	4293      	cmp	r3, r2
 8007972:	d90b      	bls.n	800798c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	69d9      	ldr	r1, [r3, #28]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8b1a      	ldrh	r2, [r3, #24]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	7b5b      	ldrb	r3, [r3, #13]
 8007980:	2001      	movs	r0, #1
 8007982:	9000      	str	r0, [sp, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f001 fc48 	bl	800921a <USBH_BulkSendData>
 800798a:	e00b      	b.n	80079a4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007994:	b29a      	uxth	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	7b5b      	ldrb	r3, [r3, #13]
 800799a:	2001      	movs	r0, #1
 800799c:	9000      	str	r0, [sp, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f001 fc3b 	bl	800921a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80079ac:	e03b      	b.n	8007a26 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	7b5b      	ldrb	r3, [r3, #13]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 ff5f 	bl	8009878 <USBH_LL_GetURBState>
 80079ba:	4603      	mov	r3, r0
 80079bc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80079be:	7afb      	ldrb	r3, [r7, #11]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d128      	bne.n	8007a16 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	8b12      	ldrh	r2, [r2, #24]
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d90e      	bls.n	80079ee <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	8b12      	ldrh	r2, [r2, #24]
 80079d8:	1a9a      	subs	r2, r3, r2
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	8b12      	ldrh	r2, [r2, #24]
 80079e6:	441a      	add	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	61da      	str	r2, [r3, #28]
 80079ec:	e002      	b.n	80079f4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d004      	beq.n	8007a06 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a04:	e00e      	b.n	8007a24 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f868 	bl	8007ae4 <USBH_CDC_TransmitCallback>
      break;
 8007a14:	e006      	b.n	8007a24 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007a16:	7afb      	ldrb	r3, [r7, #11]
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d103      	bne.n	8007a24 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a24:	bf00      	nop
  }
}
 8007a26:	bf00      	nop
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b086      	sub	sp, #24
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a40:	2300      	movs	r3, #0
 8007a42:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d002      	beq.n	8007a54 <CDC_ProcessReception+0x26>
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	d00e      	beq.n	8007a70 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007a52:	e043      	b.n	8007adc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	6a19      	ldr	r1, [r3, #32]
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	8b5a      	ldrh	r2, [r3, #26]
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	7b1b      	ldrb	r3, [r3, #12]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 fbff 	bl	8009264 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2204      	movs	r2, #4
 8007a6a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007a6e:	e035      	b.n	8007adc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	7b1b      	ldrb	r3, [r3, #12]
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 fefe 	bl	8009878 <USBH_LL_GetURBState>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007a80:	7cfb      	ldrb	r3, [r7, #19]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d129      	bne.n	8007ada <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	7b1b      	ldrb	r3, [r3, #12]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 fe61 	bl	8009754 <USBH_LL_GetLastXferSize>
 8007a92:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d016      	beq.n	8007acc <CDC_ProcessReception+0x9e>
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	8b5b      	ldrh	r3, [r3, #26]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d910      	bls.n	8007acc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	1ad2      	subs	r2, r2, r3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	6a1a      	ldr	r2, [r3, #32]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	441a      	add	r2, r3
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2203      	movs	r2, #3
 8007ac6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007aca:	e006      	b.n	8007ada <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f80f 	bl	8007af8 <USBH_CDC_ReceiveCallback>
      break;
 8007ada:	bf00      	nop
  }
}
 8007adc:	bf00      	nop
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007b34:	2302      	movs	r3, #2
 8007b36:	e029      	b.n	8007b8c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	79fa      	ldrb	r2, [r7, #7]
 8007b3c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 f81f 	bl	8007b94 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f001 fd31 	bl	80095ec <USBH_LL_Init>

  return USBH_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	e009      	b.n	8007bba <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	33e0      	adds	r3, #224	; 0xe0
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2b0f      	cmp	r3, #15
 8007bbe:	d9f2      	bls.n	8007ba6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	e009      	b.n	8007bda <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	60fb      	str	r3, [r7, #12]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007be0:	d3f1      	bcc.n	8007bc6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2240      	movs	r2, #64	; 0x40
 8007c06:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d016      	beq.n	8007c7e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10e      	bne.n	8007c78 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c60:	1c59      	adds	r1, r3, #1
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	33de      	adds	r3, #222	; 0xde
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	73fb      	strb	r3, [r7, #15]
 8007c76:	e004      	b.n	8007c82 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007c78:	2302      	movs	r3, #2
 8007c7a:	73fb      	strb	r3, [r7, #15]
 8007c7c:	e001      	b.n	8007c82 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007c7e:	2302      	movs	r3, #2
 8007c80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007ca6:	78fa      	ldrb	r2, [r7, #3]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d204      	bcs.n	8007cb6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	78fa      	ldrb	r2, [r7, #3]
 8007cb0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007cb4:	e001      	b.n	8007cba <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b087      	sub	sp, #28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	4608      	mov	r0, r1
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	70fb      	strb	r3, [r7, #3]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	70bb      	strb	r3, [r7, #2]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007cf0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007cf2:	e025      	b.n	8007d40 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007cf4:	7dfb      	ldrb	r3, [r7, #23]
 8007cf6:	221a      	movs	r2, #26
 8007cf8:	fb02 f303 	mul.w	r3, r2, r3
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	4413      	add	r3, r2
 8007d02:	3302      	adds	r3, #2
 8007d04:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	795b      	ldrb	r3, [r3, #5]
 8007d0a:	78fa      	ldrb	r2, [r7, #3]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d002      	beq.n	8007d16 <USBH_FindInterface+0x4e>
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	2bff      	cmp	r3, #255	; 0xff
 8007d14:	d111      	bne.n	8007d3a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d1a:	78ba      	ldrb	r2, [r7, #2]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d002      	beq.n	8007d26 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d20:	78bb      	ldrb	r3, [r7, #2]
 8007d22:	2bff      	cmp	r3, #255	; 0xff
 8007d24:	d109      	bne.n	8007d3a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d2a:	787a      	ldrb	r2, [r7, #1]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d002      	beq.n	8007d36 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d30:	787b      	ldrb	r3, [r7, #1]
 8007d32:	2bff      	cmp	r3, #255	; 0xff
 8007d34:	d101      	bne.n	8007d3a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007d36:	7dfb      	ldrb	r3, [r7, #23]
 8007d38:	e006      	b.n	8007d48 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007d3a:	7dfb      	ldrb	r3, [r7, #23]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d9d6      	bls.n	8007cf4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007d46:	23ff      	movs	r3, #255	; 0xff
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	371c      	adds	r7, #28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f001 fc81 	bl	8009664 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007d62:	2101      	movs	r1, #1
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f001 fd9a 	bl	800989e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b088      	sub	sp, #32
 8007d78:	af04      	add	r7, sp, #16
 8007d7a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007d80:	2300      	movs	r3, #0
 8007d82:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d102      	bne.n	8007d96 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2203      	movs	r2, #3
 8007d94:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b0b      	cmp	r3, #11
 8007d9e:	f200 81be 	bhi.w	800811e <USBH_Process+0x3aa>
 8007da2:	a201      	add	r2, pc, #4	; (adr r2, 8007da8 <USBH_Process+0x34>)
 8007da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da8:	08007dd9 	.word	0x08007dd9
 8007dac:	08007e0b 	.word	0x08007e0b
 8007db0:	08007e73 	.word	0x08007e73
 8007db4:	080080b9 	.word	0x080080b9
 8007db8:	0800811f 	.word	0x0800811f
 8007dbc:	08007f17 	.word	0x08007f17
 8007dc0:	0800805f 	.word	0x0800805f
 8007dc4:	08007f4d 	.word	0x08007f4d
 8007dc8:	08007f6d 	.word	0x08007f6d
 8007dcc:	08007f8d 	.word	0x08007f8d
 8007dd0:	08007fd1 	.word	0x08007fd1
 8007dd4:	080080a1 	.word	0x080080a1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 819e 	beq.w	8008122 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007dec:	20c8      	movs	r0, #200	; 0xc8
 8007dee:	f001 fd9d 	bl	800992c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f001 fc93 	bl	800971e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e08:	e18b      	b.n	8008122 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d107      	bne.n	8007e24 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e22:	e18d      	b.n	8008140 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e2e:	d914      	bls.n	8007e5a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007e36:	3301      	adds	r3, #1
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007e46:	2b03      	cmp	r3, #3
 8007e48:	d903      	bls.n	8007e52 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	220d      	movs	r2, #13
 8007e4e:	701a      	strb	r2, [r3, #0]
      break;
 8007e50:	e176      	b.n	8008140 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	701a      	strb	r2, [r3, #0]
      break;
 8007e58:	e172      	b.n	8008140 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007e60:	f103 020a 	add.w	r2, r3, #10
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007e6a:	200a      	movs	r0, #10
 8007e6c:	f001 fd5e 	bl	800992c <USBH_Delay>
      break;
 8007e70:	e166      	b.n	8008140 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e82:	2104      	movs	r1, #4
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007e88:	2064      	movs	r0, #100	; 0x64
 8007e8a:	f001 fd4f 	bl	800992c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f001 fc1e 	bl	80096d0 <USBH_LL_GetSpeed>
 8007e94:	4603      	mov	r3, r0
 8007e96:	461a      	mov	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2205      	movs	r2, #5
 8007ea2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f001 fa29 	bl	80092fe <USBH_AllocPipe>
 8007eac:	4603      	mov	r3, r0
 8007eae:	461a      	mov	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007eb4:	2180      	movs	r1, #128	; 0x80
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 fa21 	bl	80092fe <USBH_AllocPipe>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	7919      	ldrb	r1, [r3, #4]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ed8:	b292      	uxth	r2, r2
 8007eda:	9202      	str	r2, [sp, #8]
 8007edc:	2200      	movs	r2, #0
 8007ede:	9201      	str	r2, [sp, #4]
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2280      	movs	r2, #128	; 0x80
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f001 f9da 	bl	80092a0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	7959      	ldrb	r1, [r3, #5]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007f00:	b292      	uxth	r2, r2
 8007f02:	9202      	str	r2, [sp, #8]
 8007f04:	2200      	movs	r2, #0
 8007f06:	9201      	str	r2, [sp, #4]
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f001 f9c6 	bl	80092a0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f14:	e114      	b.n	8008140 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f918 	bl	800814c <USBH_HandleEnum>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007f20:	7bbb      	ldrb	r3, [r7, #14]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f040 80fe 	bne.w	8008126 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d103      	bne.n	8007f44 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2208      	movs	r2, #8
 8007f40:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007f42:	e0f0      	b.n	8008126 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2207      	movs	r2, #7
 8007f48:	701a      	strb	r2, [r3, #0]
      break;
 8007f4a:	e0ec      	b.n	8008126 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 80e9 	beq.w	800812a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f5e:	2101      	movs	r1, #1
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2208      	movs	r2, #8
 8007f68:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007f6a:	e0de      	b.n	800812a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	4619      	mov	r1, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fc2c 	bl	80087d4 <USBH_SetCfg>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f040 80d5 	bne.w	800812e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2209      	movs	r2, #9
 8007f88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f8a:	e0d0      	b.n	800812e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007f92:	f003 0320 	and.w	r3, r3, #32
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d016      	beq.n	8007fc8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fc3c 	bl	800881a <USBH_SetFeature>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d103      	bne.n	8007fb6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	220a      	movs	r2, #10
 8007fb2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fb4:	e0bd      	b.n	8008132 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007fb6:	7bbb      	ldrb	r3, [r7, #14]
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	f040 80b9 	bne.w	8008132 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	220a      	movs	r2, #10
 8007fc4:	701a      	strb	r2, [r3, #0]
      break;
 8007fc6:	e0b4      	b.n	8008132 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	220a      	movs	r2, #10
 8007fcc:	701a      	strb	r2, [r3, #0]
      break;
 8007fce:	e0b0      	b.n	8008132 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f000 80ad 	beq.w	8008136 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	73fb      	strb	r3, [r7, #15]
 8007fe8:	e016      	b.n	8008018 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007fea:	7bfa      	ldrb	r2, [r7, #15]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	32de      	adds	r2, #222	; 0xde
 8007ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff4:	791a      	ldrb	r2, [r3, #4]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d108      	bne.n	8008012 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008000:	7bfa      	ldrb	r2, [r7, #15]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	32de      	adds	r2, #222	; 0xde
 8008006:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008010:	e005      	b.n	800801e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008012:	7bfb      	ldrb	r3, [r7, #15]
 8008014:	3301      	adds	r3, #1
 8008016:	73fb      	strb	r3, [r7, #15]
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d0e5      	beq.n	8007fea <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008024:	2b00      	cmp	r3, #0
 8008026:	d016      	beq.n	8008056 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	4798      	blx	r3
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d109      	bne.n	800804e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2206      	movs	r2, #6
 800803e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008046:	2103      	movs	r1, #3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800804c:	e073      	b.n	8008136 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	220d      	movs	r2, #13
 8008052:	701a      	strb	r2, [r3, #0]
      break;
 8008054:	e06f      	b.n	8008136 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	220d      	movs	r2, #13
 800805a:	701a      	strb	r2, [r3, #0]
      break;
 800805c:	e06b      	b.n	8008136 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008064:	2b00      	cmp	r3, #0
 8008066:	d017      	beq.n	8008098 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	4798      	blx	r3
 8008074:	4603      	mov	r3, r0
 8008076:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008078:	7bbb      	ldrb	r3, [r7, #14]
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b00      	cmp	r3, #0
 800807e:	d103      	bne.n	8008088 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	220b      	movs	r2, #11
 8008084:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008086:	e058      	b.n	800813a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008088:	7bbb      	ldrb	r3, [r7, #14]
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b02      	cmp	r3, #2
 800808e:	d154      	bne.n	800813a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	220d      	movs	r2, #13
 8008094:	701a      	strb	r2, [r3, #0]
      break;
 8008096:	e050      	b.n	800813a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	220d      	movs	r2, #13
 800809c:	701a      	strb	r2, [r3, #0]
      break;
 800809e:	e04c      	b.n	800813a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d049      	beq.n	800813e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	4798      	blx	r3
      }
      break;
 80080b6:	e042      	b.n	800813e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7ff fd67 	bl	8007b94 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d009      	beq.n	80080e4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d005      	beq.n	80080fa <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080f4:	2105      	movs	r1, #5
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b01      	cmp	r3, #1
 8008104:	d107      	bne.n	8008116 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7ff fe20 	bl	8007d54 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008114:	e014      	b.n	8008140 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f001 faa4 	bl	8009664 <USBH_LL_Start>
      break;
 800811c:	e010      	b.n	8008140 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800811e:	bf00      	nop
 8008120:	e00e      	b.n	8008140 <USBH_Process+0x3cc>
      break;
 8008122:	bf00      	nop
 8008124:	e00c      	b.n	8008140 <USBH_Process+0x3cc>
      break;
 8008126:	bf00      	nop
 8008128:	e00a      	b.n	8008140 <USBH_Process+0x3cc>
    break;
 800812a:	bf00      	nop
 800812c:	e008      	b.n	8008140 <USBH_Process+0x3cc>
      break;
 800812e:	bf00      	nop
 8008130:	e006      	b.n	8008140 <USBH_Process+0x3cc>
      break;
 8008132:	bf00      	nop
 8008134:	e004      	b.n	8008140 <USBH_Process+0x3cc>
      break;
 8008136:	bf00      	nop
 8008138:	e002      	b.n	8008140 <USBH_Process+0x3cc>
      break;
 800813a:	bf00      	nop
 800813c:	e000      	b.n	8008140 <USBH_Process+0x3cc>
      break;
 800813e:	bf00      	nop
  }
  return USBH_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop

0800814c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af04      	add	r7, sp, #16
 8008152:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008154:	2301      	movs	r3, #1
 8008156:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008158:	2301      	movs	r3, #1
 800815a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	785b      	ldrb	r3, [r3, #1]
 8008160:	2b07      	cmp	r3, #7
 8008162:	f200 81c1 	bhi.w	80084e8 <USBH_HandleEnum+0x39c>
 8008166:	a201      	add	r2, pc, #4	; (adr r2, 800816c <USBH_HandleEnum+0x20>)
 8008168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816c:	0800818d 	.word	0x0800818d
 8008170:	0800824b 	.word	0x0800824b
 8008174:	080082b5 	.word	0x080082b5
 8008178:	08008343 	.word	0x08008343
 800817c:	080083ad 	.word	0x080083ad
 8008180:	0800841d 	.word	0x0800841d
 8008184:	08008463 	.word	0x08008463
 8008188:	080084a9 	.word	0x080084a9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800818c:	2108      	movs	r1, #8
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fa50 	bl	8008634 <USBH_Get_DevDesc>
 8008194:	4603      	mov	r3, r0
 8008196:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d130      	bne.n	8008200 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	7919      	ldrb	r1, [r3, #4]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80081c2:	b292      	uxth	r2, r2
 80081c4:	9202      	str	r2, [sp, #8]
 80081c6:	2200      	movs	r2, #0
 80081c8:	9201      	str	r2, [sp, #4]
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	4603      	mov	r3, r0
 80081ce:	2280      	movs	r2, #128	; 0x80
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f001 f865 	bl	80092a0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	7959      	ldrb	r1, [r3, #5]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081ea:	b292      	uxth	r2, r2
 80081ec:	9202      	str	r2, [sp, #8]
 80081ee:	2200      	movs	r2, #0
 80081f0:	9201      	str	r2, [sp, #4]
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	4603      	mov	r3, r0
 80081f6:	2200      	movs	r2, #0
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f001 f851 	bl	80092a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80081fe:	e175      	b.n	80084ec <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	2b03      	cmp	r3, #3
 8008204:	f040 8172 	bne.w	80084ec <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800820e:	3301      	adds	r3, #1
 8008210:	b2da      	uxtb	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800821e:	2b03      	cmp	r3, #3
 8008220:	d903      	bls.n	800822a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	220d      	movs	r2, #13
 8008226:	701a      	strb	r2, [r3, #0]
      break;
 8008228:	e160      	b.n	80084ec <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	795b      	ldrb	r3, [r3, #5]
 800822e:	4619      	mov	r1, r3
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f001 f885 	bl	8009340 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	791b      	ldrb	r3, [r3, #4]
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f001 f87f 	bl	8009340 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	701a      	strb	r2, [r3, #0]
      break;
 8008248:	e150      	b.n	80084ec <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800824a:	2112      	movs	r1, #18
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f9f1 	bl	8008634 <USBH_Get_DevDesc>
 8008252:	4603      	mov	r3, r0
 8008254:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d103      	bne.n	8008264 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008262:	e145      	b.n	80084f0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	2b03      	cmp	r3, #3
 8008268:	f040 8142 	bne.w	80084f0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008272:	3301      	adds	r3, #1
 8008274:	b2da      	uxtb	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008282:	2b03      	cmp	r3, #3
 8008284:	d903      	bls.n	800828e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	220d      	movs	r2, #13
 800828a:	701a      	strb	r2, [r3, #0]
      break;
 800828c:	e130      	b.n	80084f0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	795b      	ldrb	r3, [r3, #5]
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f001 f853 	bl	8009340 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	791b      	ldrb	r3, [r3, #4]
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 f84d 	bl	8009340 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	701a      	strb	r2, [r3, #0]
      break;
 80082b2:	e11d      	b.n	80084f0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80082b4:	2101      	movs	r1, #1
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fa68 	bl	800878c <USBH_SetAddress>
 80082bc:	4603      	mov	r3, r0
 80082be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d132      	bne.n	800832c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80082c6:	2002      	movs	r0, #2
 80082c8:	f001 fb30 	bl	800992c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2203      	movs	r2, #3
 80082d8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	7919      	ldrb	r1, [r3, #4]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80082ee:	b292      	uxth	r2, r2
 80082f0:	9202      	str	r2, [sp, #8]
 80082f2:	2200      	movs	r2, #0
 80082f4:	9201      	str	r2, [sp, #4]
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	4603      	mov	r3, r0
 80082fa:	2280      	movs	r2, #128	; 0x80
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 ffcf 	bl	80092a0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	7959      	ldrb	r1, [r3, #5]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008316:	b292      	uxth	r2, r2
 8008318:	9202      	str	r2, [sp, #8]
 800831a:	2200      	movs	r2, #0
 800831c:	9201      	str	r2, [sp, #4]
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	4603      	mov	r3, r0
 8008322:	2200      	movs	r2, #0
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 ffbb 	bl	80092a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800832a:	e0e3      	b.n	80084f4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800832c:	7bbb      	ldrb	r3, [r7, #14]
 800832e:	2b03      	cmp	r3, #3
 8008330:	f040 80e0 	bne.w	80084f4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	220d      	movs	r2, #13
 8008338:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	705a      	strb	r2, [r3, #1]
      break;
 8008340:	e0d8      	b.n	80084f4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008342:	2109      	movs	r1, #9
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f99d 	bl	8008684 <USBH_Get_CfgDesc>
 800834a:	4603      	mov	r3, r0
 800834c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800834e:	7bbb      	ldrb	r3, [r7, #14]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d103      	bne.n	800835c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2204      	movs	r2, #4
 8008358:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800835a:	e0cd      	b.n	80084f8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	2b03      	cmp	r3, #3
 8008360:	f040 80ca 	bne.w	80084f8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800836a:	3301      	adds	r3, #1
 800836c:	b2da      	uxtb	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800837a:	2b03      	cmp	r3, #3
 800837c:	d903      	bls.n	8008386 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	220d      	movs	r2, #13
 8008382:	701a      	strb	r2, [r3, #0]
      break;
 8008384:	e0b8      	b.n	80084f8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	795b      	ldrb	r3, [r3, #5]
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 ffd7 	bl	8009340 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	791b      	ldrb	r3, [r3, #4]
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 ffd1 	bl	8009340 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	701a      	strb	r2, [r3, #0]
      break;
 80083aa:	e0a5      	b.n	80084f8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f965 	bl	8008684 <USBH_Get_CfgDesc>
 80083ba:	4603      	mov	r3, r0
 80083bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d103      	bne.n	80083cc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2205      	movs	r2, #5
 80083c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80083ca:	e097      	b.n	80084fc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	f040 8094 	bne.w	80084fc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083da:	3301      	adds	r3, #1
 80083dc:	b2da      	uxtb	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083ea:	2b03      	cmp	r3, #3
 80083ec:	d903      	bls.n	80083f6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	220d      	movs	r2, #13
 80083f2:	701a      	strb	r2, [r3, #0]
      break;
 80083f4:	e082      	b.n	80084fc <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	795b      	ldrb	r3, [r3, #5]
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 ff9f 	bl	8009340 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	791b      	ldrb	r3, [r3, #4]
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 ff99 	bl	8009340 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	701a      	strb	r2, [r3, #0]
      break;
 800841a:	e06f      	b.n	80084fc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008422:	2b00      	cmp	r3, #0
 8008424:	d019      	beq.n	800845a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008432:	23ff      	movs	r3, #255	; 0xff
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f949 	bl	80086cc <USBH_Get_StringDesc>
 800843a:	4603      	mov	r3, r0
 800843c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d103      	bne.n	800844c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2206      	movs	r2, #6
 8008448:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800844a:	e059      	b.n	8008500 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800844c:	7bbb      	ldrb	r3, [r7, #14]
 800844e:	2b03      	cmp	r3, #3
 8008450:	d156      	bne.n	8008500 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2206      	movs	r2, #6
 8008456:	705a      	strb	r2, [r3, #1]
      break;
 8008458:	e052      	b.n	8008500 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2206      	movs	r2, #6
 800845e:	705a      	strb	r2, [r3, #1]
      break;
 8008460:	e04e      	b.n	8008500 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008468:	2b00      	cmp	r3, #0
 800846a:	d019      	beq.n	80084a0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008478:	23ff      	movs	r3, #255	; 0xff
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f926 	bl	80086cc <USBH_Get_StringDesc>
 8008480:	4603      	mov	r3, r0
 8008482:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008484:	7bbb      	ldrb	r3, [r7, #14]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d103      	bne.n	8008492 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2207      	movs	r2, #7
 800848e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008490:	e038      	b.n	8008504 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008492:	7bbb      	ldrb	r3, [r7, #14]
 8008494:	2b03      	cmp	r3, #3
 8008496:	d135      	bne.n	8008504 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2207      	movs	r2, #7
 800849c:	705a      	strb	r2, [r3, #1]
      break;
 800849e:	e031      	b.n	8008504 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2207      	movs	r2, #7
 80084a4:	705a      	strb	r2, [r3, #1]
      break;
 80084a6:	e02d      	b.n	8008504 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d017      	beq.n	80084e2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80084be:	23ff      	movs	r3, #255	; 0xff
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f903 	bl	80086cc <USBH_Get_StringDesc>
 80084c6:	4603      	mov	r3, r0
 80084c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d102      	bne.n	80084d6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80084d4:	e018      	b.n	8008508 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084d6:	7bbb      	ldrb	r3, [r7, #14]
 80084d8:	2b03      	cmp	r3, #3
 80084da:	d115      	bne.n	8008508 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	73fb      	strb	r3, [r7, #15]
      break;
 80084e0:	e012      	b.n	8008508 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	73fb      	strb	r3, [r7, #15]
      break;
 80084e6:	e00f      	b.n	8008508 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80084e8:	bf00      	nop
 80084ea:	e00e      	b.n	800850a <USBH_HandleEnum+0x3be>
      break;
 80084ec:	bf00      	nop
 80084ee:	e00c      	b.n	800850a <USBH_HandleEnum+0x3be>
      break;
 80084f0:	bf00      	nop
 80084f2:	e00a      	b.n	800850a <USBH_HandleEnum+0x3be>
      break;
 80084f4:	bf00      	nop
 80084f6:	e008      	b.n	800850a <USBH_HandleEnum+0x3be>
      break;
 80084f8:	bf00      	nop
 80084fa:	e006      	b.n	800850a <USBH_HandleEnum+0x3be>
      break;
 80084fc:	bf00      	nop
 80084fe:	e004      	b.n	800850a <USBH_HandleEnum+0x3be>
      break;
 8008500:	bf00      	nop
 8008502:	e002      	b.n	800850a <USBH_HandleEnum+0x3be>
      break;
 8008504:	bf00      	nop
 8008506:	e000      	b.n	800850a <USBH_HandleEnum+0x3be>
      break;
 8008508:	bf00      	nop
  }
  return Status;
 800850a:	7bfb      	ldrb	r3, [r7, #15]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008526:	bf00      	nop
 8008528:	370c      	adds	r7, #12
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b082      	sub	sp, #8
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008540:	1c5a      	adds	r2, r3, #1
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f804 	bl	8008556 <USBH_HandleSof>
}
 800854e:	bf00      	nop
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b082      	sub	sp, #8
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	b2db      	uxtb	r3, r3
 8008564:	2b0b      	cmp	r3, #11
 8008566:	d10a      	bne.n	800857e <USBH_HandleSof+0x28>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800856e:	2b00      	cmp	r3, #0
 8008570:	d005      	beq.n	800857e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	4798      	blx	r3
  }
}
 800857e:	bf00      	nop
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008586:	b480      	push	{r7}
 8008588:	b083      	sub	sp, #12
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008596:	bf00      	nop
}
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80085b2:	bf00      	nop
}
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80085be:	b480      	push	{r7}
 80085c0:	b083      	sub	sp, #12
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 f844 	bl	800969a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	791b      	ldrb	r3, [r3, #4]
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fe91 	bl	8009340 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	795b      	ldrb	r3, [r3, #5]
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fe8b 	bl	8009340 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af02      	add	r7, sp, #8
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008646:	78fb      	ldrb	r3, [r7, #3]
 8008648:	b29b      	uxth	r3, r3
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	4613      	mov	r3, r2
 800864e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008652:	2100      	movs	r1, #0
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f864 	bl	8008722 <USBH_GetDescriptor>
 800865a:	4603      	mov	r3, r0
 800865c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800865e:	7bfb      	ldrb	r3, [r7, #15]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10a      	bne.n	800867a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f203 3026 	addw	r0, r3, #806	; 0x326
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008670:	78fa      	ldrb	r2, [r7, #3]
 8008672:	b292      	uxth	r2, r2
 8008674:	4619      	mov	r1, r3
 8008676:	f000 f918 	bl	80088aa <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800867a:	7bfb      	ldrb	r3, [r7, #15]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af02      	add	r7, sp, #8
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	331c      	adds	r3, #28
 8008694:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008696:	887b      	ldrh	r3, [r7, #2]
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086a0:	2100      	movs	r1, #0
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f83d 	bl	8008722 <USBH_GetDescriptor>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d107      	bne.n	80086c2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80086b2:	887b      	ldrh	r3, [r7, #2]
 80086b4:	461a      	mov	r2, r3
 80086b6:	68b9      	ldr	r1, [r7, #8]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 f987 	bl	80089cc <USBH_ParseCfgDesc>
 80086be:	4603      	mov	r3, r0
 80086c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b088      	sub	sp, #32
 80086d0:	af02      	add	r7, sp, #8
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	607a      	str	r2, [r7, #4]
 80086d6:	461a      	mov	r2, r3
 80086d8:	460b      	mov	r3, r1
 80086da:	72fb      	strb	r3, [r7, #11]
 80086dc:	4613      	mov	r3, r2
 80086de:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80086e0:	7afb      	ldrb	r3, [r7, #11]
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80086e8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80086f0:	893b      	ldrh	r3, [r7, #8]
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	460b      	mov	r3, r1
 80086f6:	2100      	movs	r1, #0
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f000 f812 	bl	8008722 <USBH_GetDescriptor>
 80086fe:	4603      	mov	r3, r0
 8008700:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008702:	7dfb      	ldrb	r3, [r7, #23]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d107      	bne.n	8008718 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800870e:	893a      	ldrh	r2, [r7, #8]
 8008710:	6879      	ldr	r1, [r7, #4]
 8008712:	4618      	mov	r0, r3
 8008714:	f000 fb24 	bl	8008d60 <USBH_ParseStringDesc>
  }

  return status;
 8008718:	7dfb      	ldrb	r3, [r7, #23]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b084      	sub	sp, #16
 8008726:	af00      	add	r7, sp, #0
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	607b      	str	r3, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	72fb      	strb	r3, [r7, #11]
 8008730:	4613      	mov	r3, r2
 8008732:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	789b      	ldrb	r3, [r3, #2]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d11c      	bne.n	8008776 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800873c:	7afb      	ldrb	r3, [r7, #11]
 800873e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008742:	b2da      	uxtb	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2206      	movs	r2, #6
 800874c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	893a      	ldrh	r2, [r7, #8]
 8008752:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008754:	893b      	ldrh	r3, [r7, #8]
 8008756:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800875a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800875e:	d104      	bne.n	800876a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f240 4209 	movw	r2, #1033	; 0x409
 8008766:	829a      	strh	r2, [r3, #20]
 8008768:	e002      	b.n	8008770 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	8b3a      	ldrh	r2, [r7, #24]
 8008774:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008776:	8b3b      	ldrh	r3, [r7, #24]
 8008778:	461a      	mov	r2, r3
 800877a:	6879      	ldr	r1, [r7, #4]
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f000 fb3d 	bl	8008dfc <USBH_CtlReq>
 8008782:	4603      	mov	r3, r0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	460b      	mov	r3, r1
 8008796:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	789b      	ldrb	r3, [r3, #2]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d10f      	bne.n	80087c0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2205      	movs	r2, #5
 80087aa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80087ac:	78fb      	ldrb	r3, [r7, #3]
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80087c0:	2200      	movs	r2, #0
 80087c2:	2100      	movs	r1, #0
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fb19 	bl	8008dfc <USBH_CtlReq>
 80087ca:	4603      	mov	r3, r0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	789b      	ldrb	r3, [r3, #2]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d10e      	bne.n	8008806 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2209      	movs	r2, #9
 80087f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	887a      	ldrh	r2, [r7, #2]
 80087f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008806:	2200      	movs	r2, #0
 8008808:	2100      	movs	r1, #0
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 faf6 	bl	8008dfc <USBH_CtlReq>
 8008810:	4603      	mov	r3, r0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b082      	sub	sp, #8
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	460b      	mov	r3, r1
 8008824:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	789b      	ldrb	r3, [r3, #2]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d10f      	bne.n	800884e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2203      	movs	r2, #3
 8008838:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800883a:	78fb      	ldrb	r3, [r7, #3]
 800883c:	b29a      	uxth	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800884e:	2200      	movs	r2, #0
 8008850:	2100      	movs	r1, #0
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fad2 	bl	8008dfc <USBH_CtlReq>
 8008858:	4603      	mov	r3, r0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b082      	sub	sp, #8
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	460b      	mov	r3, r1
 800886c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	789b      	ldrb	r3, [r3, #2]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d10f      	bne.n	8008896 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2202      	movs	r2, #2
 800887a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008888:	78fb      	ldrb	r3, [r7, #3]
 800888a:	b29a      	uxth	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008896:	2200      	movs	r2, #0
 8008898:	2100      	movs	r1, #0
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 faae 	bl	8008dfc <USBH_CtlReq>
 80088a0:	4603      	mov	r3, r0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b085      	sub	sp, #20
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	60f8      	str	r0, [r7, #12]
 80088b2:	60b9      	str	r1, [r7, #8]
 80088b4:	4613      	mov	r3, r2
 80088b6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	781a      	ldrb	r2, [r3, #0]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	785a      	ldrb	r2, [r3, #1]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	3302      	adds	r3, #2
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	3303      	adds	r3, #3
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	021b      	lsls	r3, r3, #8
 80088da:	b29b      	uxth	r3, r3
 80088dc:	4313      	orrs	r3, r2
 80088de:	b29a      	uxth	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	791a      	ldrb	r2, [r3, #4]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	795a      	ldrb	r2, [r3, #5]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	799a      	ldrb	r2, [r3, #6]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	79da      	ldrb	r2, [r3, #7]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	79db      	ldrb	r3, [r3, #7]
 8008908:	2b20      	cmp	r3, #32
 800890a:	dc11      	bgt.n	8008930 <USBH_ParseDevDesc+0x86>
 800890c:	2b08      	cmp	r3, #8
 800890e:	db16      	blt.n	800893e <USBH_ParseDevDesc+0x94>
 8008910:	3b08      	subs	r3, #8
 8008912:	2201      	movs	r2, #1
 8008914:	fa02 f303 	lsl.w	r3, r2, r3
 8008918:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800891c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008920:	2b00      	cmp	r3, #0
 8008922:	bf14      	ite	ne
 8008924:	2301      	movne	r3, #1
 8008926:	2300      	moveq	r3, #0
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b00      	cmp	r3, #0
 800892c:	d102      	bne.n	8008934 <USBH_ParseDevDesc+0x8a>
 800892e:	e006      	b.n	800893e <USBH_ParseDevDesc+0x94>
 8008930:	2b40      	cmp	r3, #64	; 0x40
 8008932:	d104      	bne.n	800893e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	79da      	ldrb	r2, [r3, #7]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	71da      	strb	r2, [r3, #7]
      break;
 800893c:	e003      	b.n	8008946 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2240      	movs	r2, #64	; 0x40
 8008942:	71da      	strb	r2, [r3, #7]
      break;
 8008944:	bf00      	nop
  }

  if (length > 8U)
 8008946:	88fb      	ldrh	r3, [r7, #6]
 8008948:	2b08      	cmp	r3, #8
 800894a:	d939      	bls.n	80089c0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	3308      	adds	r3, #8
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	b29a      	uxth	r2, r3
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	3309      	adds	r3, #9
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	b29b      	uxth	r3, r3
 800895c:	021b      	lsls	r3, r3, #8
 800895e:	b29b      	uxth	r3, r3
 8008960:	4313      	orrs	r3, r2
 8008962:	b29a      	uxth	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	330a      	adds	r3, #10
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	b29a      	uxth	r2, r3
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	330b      	adds	r3, #11
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	b29b      	uxth	r3, r3
 8008978:	021b      	lsls	r3, r3, #8
 800897a:	b29b      	uxth	r3, r3
 800897c:	4313      	orrs	r3, r2
 800897e:	b29a      	uxth	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	330c      	adds	r3, #12
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	b29a      	uxth	r2, r3
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	330d      	adds	r3, #13
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	b29b      	uxth	r3, r3
 8008994:	021b      	lsls	r3, r3, #8
 8008996:	b29b      	uxth	r3, r3
 8008998:	4313      	orrs	r3, r2
 800899a:	b29a      	uxth	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	7b9a      	ldrb	r2, [r3, #14]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	7bda      	ldrb	r2, [r3, #15]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	7c1a      	ldrb	r2, [r3, #16]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	7c5a      	ldrb	r2, [r3, #17]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	745a      	strb	r2, [r3, #17]
  }
}
 80089c0:	bf00      	nop
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b08c      	sub	sp, #48	; 0x30
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	4613      	mov	r3, r2
 80089d8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80089e0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	781a      	ldrb	r2, [r3, #0]
 8008a00:	6a3b      	ldr	r3, [r7, #32]
 8008a02:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	785a      	ldrb	r2, [r3, #1]
 8008a08:	6a3b      	ldr	r3, [r7, #32]
 8008a0a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	3302      	adds	r3, #2
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	3303      	adds	r3, #3
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	021b      	lsls	r3, r3, #8
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	4313      	orrs	r3, r2
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a28:	bf28      	it	cs
 8008a2a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	791a      	ldrb	r2, [r3, #4]
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	795a      	ldrb	r2, [r3, #5]
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	799a      	ldrb	r2, [r3, #6]
 8008a48:	6a3b      	ldr	r3, [r7, #32]
 8008a4a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	79da      	ldrb	r2, [r3, #7]
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	7a1a      	ldrb	r2, [r3, #8]
 8008a58:	6a3b      	ldr	r3, [r7, #32]
 8008a5a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008a5c:	6a3b      	ldr	r3, [r7, #32]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	2b09      	cmp	r3, #9
 8008a62:	d002      	beq.n	8008a6a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008a64:	6a3b      	ldr	r3, [r7, #32]
 8008a66:	2209      	movs	r2, #9
 8008a68:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008a6a:	88fb      	ldrh	r3, [r7, #6]
 8008a6c:	2b09      	cmp	r3, #9
 8008a6e:	f240 809d 	bls.w	8008bac <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008a72:	2309      	movs	r3, #9
 8008a74:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008a76:	2300      	movs	r3, #0
 8008a78:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a7a:	e081      	b.n	8008b80 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a7c:	f107 0316 	add.w	r3, r7, #22
 8008a80:	4619      	mov	r1, r3
 8008a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a84:	f000 f99f 	bl	8008dc6 <USBH_GetNextDesc>
 8008a88:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8c:	785b      	ldrb	r3, [r3, #1]
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	d176      	bne.n	8008b80 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	2b09      	cmp	r3, #9
 8008a98:	d002      	beq.n	8008aa0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9c:	2209      	movs	r2, #9
 8008a9e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008aa4:	221a      	movs	r2, #26
 8008aa6:	fb02 f303 	mul.w	r3, r2, r3
 8008aaa:	3308      	adds	r3, #8
 8008aac:	6a3a      	ldr	r2, [r7, #32]
 8008aae:	4413      	add	r3, r2
 8008ab0:	3302      	adds	r3, #2
 8008ab2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ab6:	69f8      	ldr	r0, [r7, #28]
 8008ab8:	f000 f87e 	bl	8008bb8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008abc:	2300      	movs	r3, #0
 8008abe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008ac6:	e043      	b.n	8008b50 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008ac8:	f107 0316 	add.w	r3, r7, #22
 8008acc:	4619      	mov	r1, r3
 8008ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ad0:	f000 f979 	bl	8008dc6 <USBH_GetNextDesc>
 8008ad4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad8:	785b      	ldrb	r3, [r3, #1]
 8008ada:	2b05      	cmp	r3, #5
 8008adc:	d138      	bne.n	8008b50 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	795b      	ldrb	r3, [r3, #5]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d10f      	bne.n	8008b06 <USBH_ParseCfgDesc+0x13a>
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	799b      	ldrb	r3, [r3, #6]
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d10b      	bne.n	8008b06 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	79db      	ldrb	r3, [r3, #7]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10f      	bne.n	8008b16 <USBH_ParseCfgDesc+0x14a>
 8008af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	2b09      	cmp	r3, #9
 8008afc:	d00b      	beq.n	8008b16 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b00:	2209      	movs	r2, #9
 8008b02:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008b04:	e007      	b.n	8008b16 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	2b07      	cmp	r3, #7
 8008b0c:	d004      	beq.n	8008b18 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b10:	2207      	movs	r2, #7
 8008b12:	701a      	strb	r2, [r3, #0]
 8008b14:	e000      	b.n	8008b18 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008b16:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b1c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b20:	3201      	adds	r2, #1
 8008b22:	00d2      	lsls	r2, r2, #3
 8008b24:	211a      	movs	r1, #26
 8008b26:	fb01 f303 	mul.w	r3, r1, r3
 8008b2a:	4413      	add	r3, r2
 8008b2c:	3308      	adds	r3, #8
 8008b2e:	6a3a      	ldr	r2, [r7, #32]
 8008b30:	4413      	add	r3, r2
 8008b32:	3304      	adds	r3, #4
 8008b34:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b38:	69b9      	ldr	r1, [r7, #24]
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f000 f86b 	bl	8008c16 <USBH_ParseEPDesc>
 8008b40:	4603      	mov	r3, r0
 8008b42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008b46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	791b      	ldrb	r3, [r3, #4]
 8008b54:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d204      	bcs.n	8008b66 <USBH_ParseCfgDesc+0x19a>
 8008b5c:	6a3b      	ldr	r3, [r7, #32]
 8008b5e:	885a      	ldrh	r2, [r3, #2]
 8008b60:	8afb      	ldrh	r3, [r7, #22]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d8b0      	bhi.n	8008ac8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	791b      	ldrb	r3, [r3, #4]
 8008b6a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d201      	bcs.n	8008b76 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e01c      	b.n	8008bb0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008b76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d805      	bhi.n	8008b94 <USBH_ParseCfgDesc+0x1c8>
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	885a      	ldrh	r2, [r3, #2]
 8008b8c:	8afb      	ldrh	r3, [r7, #22]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	f63f af74 	bhi.w	8008a7c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008b94:	6a3b      	ldr	r3, [r7, #32]
 8008b96:	791b      	ldrb	r3, [r3, #4]
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	bf28      	it	cs
 8008b9c:	2302      	movcs	r3, #2
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d201      	bcs.n	8008bac <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e001      	b.n	8008bb0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008bac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3730      	adds	r7, #48	; 0x30
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781a      	ldrb	r2, [r3, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	785a      	ldrb	r2, [r3, #1]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	789a      	ldrb	r2, [r3, #2]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	78da      	ldrb	r2, [r3, #3]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	791a      	ldrb	r2, [r3, #4]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	795a      	ldrb	r2, [r3, #5]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	799a      	ldrb	r2, [r3, #6]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	79da      	ldrb	r2, [r3, #7]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	7a1a      	ldrb	r2, [r3, #8]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	721a      	strb	r2, [r3, #8]
}
 8008c0a:	bf00      	nop
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008c16:	b480      	push	{r7}
 8008c18:	b087      	sub	sp, #28
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	60f8      	str	r0, [r7, #12]
 8008c1e:	60b9      	str	r1, [r7, #8]
 8008c20:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	781a      	ldrb	r2, [r3, #0]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	785a      	ldrb	r2, [r3, #1]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	789a      	ldrb	r2, [r3, #2]
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	78da      	ldrb	r2, [r3, #3]
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	3304      	adds	r3, #4
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	3305      	adds	r3, #5
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	021b      	lsls	r3, r3, #8
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	799a      	ldrb	r2, [r3, #6]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	889b      	ldrh	r3, [r3, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d102      	bne.n	8008c78 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008c72:	2303      	movs	r3, #3
 8008c74:	75fb      	strb	r3, [r7, #23]
 8008c76:	e033      	b.n	8008ce0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	889b      	ldrh	r3, [r3, #4]
 8008c7c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008c80:	f023 0307 	bic.w	r3, r3, #7
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	889b      	ldrh	r3, [r3, #4]
 8008c8e:	b21a      	sxth	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	3304      	adds	r3, #4
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	b299      	uxth	r1, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	3305      	adds	r3, #5
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	021b      	lsls	r3, r3, #8
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	430b      	orrs	r3, r1
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d110      	bne.n	8008cd2 <USBH_ParseEPDesc+0xbc>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	b299      	uxth	r1, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	3305      	adds	r3, #5
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	021b      	lsls	r3, r3, #8
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	430b      	orrs	r3, r1
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	b21b      	sxth	r3, r3
 8008cca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008cce:	b21b      	sxth	r3, r3
 8008cd0:	e001      	b.n	8008cd6 <USBH_ParseEPDesc+0xc0>
 8008cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	b21b      	sxth	r3, r3
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d116      	bne.n	8008d18 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	78db      	ldrb	r3, [r3, #3]
 8008cee:	f003 0303 	and.w	r3, r3, #3
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d005      	beq.n	8008d02 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	78db      	ldrb	r3, [r3, #3]
 8008cfa:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	d127      	bne.n	8008d52 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	799b      	ldrb	r3, [r3, #6]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d003      	beq.n	8008d12 <USBH_ParseEPDesc+0xfc>
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	799b      	ldrb	r3, [r3, #6]
 8008d0e:	2b10      	cmp	r3, #16
 8008d10:	d91f      	bls.n	8008d52 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008d12:	2303      	movs	r3, #3
 8008d14:	75fb      	strb	r3, [r7, #23]
 8008d16:	e01c      	b.n	8008d52 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	78db      	ldrb	r3, [r3, #3]
 8008d1c:	f003 0303 	and.w	r3, r3, #3
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d10a      	bne.n	8008d3a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	799b      	ldrb	r3, [r3, #6]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d003      	beq.n	8008d34 <USBH_ParseEPDesc+0x11e>
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	799b      	ldrb	r3, [r3, #6]
 8008d30:	2b10      	cmp	r3, #16
 8008d32:	d90e      	bls.n	8008d52 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008d34:	2303      	movs	r3, #3
 8008d36:	75fb      	strb	r3, [r7, #23]
 8008d38:	e00b      	b.n	8008d52 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	78db      	ldrb	r3, [r3, #3]
 8008d3e:	f003 0303 	and.w	r3, r3, #3
 8008d42:	2b03      	cmp	r3, #3
 8008d44:	d105      	bne.n	8008d52 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	799b      	ldrb	r3, [r3, #6]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	371c      	adds	r7, #28
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	3301      	adds	r3, #1
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	2b03      	cmp	r3, #3
 8008d76:	d120      	bne.n	8008dba <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	1e9a      	subs	r2, r3, #2
 8008d7e:	88fb      	ldrh	r3, [r7, #6]
 8008d80:	4293      	cmp	r3, r2
 8008d82:	bf28      	it	cs
 8008d84:	4613      	movcs	r3, r2
 8008d86:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	3302      	adds	r3, #2
 8008d8c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008d8e:	2300      	movs	r3, #0
 8008d90:	82fb      	strh	r3, [r7, #22]
 8008d92:	e00b      	b.n	8008dac <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008d94:	8afb      	ldrh	r3, [r7, #22]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	4413      	add	r3, r2
 8008d9a:	781a      	ldrb	r2, [r3, #0]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	3301      	adds	r3, #1
 8008da4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008da6:	8afb      	ldrh	r3, [r7, #22]
 8008da8:	3302      	adds	r3, #2
 8008daa:	82fb      	strh	r3, [r7, #22]
 8008dac:	8afa      	ldrh	r2, [r7, #22]
 8008dae:	8abb      	ldrh	r3, [r7, #20]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d3ef      	bcc.n	8008d94 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2200      	movs	r2, #0
 8008db8:	701a      	strb	r2, [r3, #0]
  }
}
 8008dba:	bf00      	nop
 8008dbc:	371c      	adds	r7, #28
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b085      	sub	sp, #20
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	881a      	ldrh	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	4413      	add	r3, r2
 8008ddc:	b29a      	uxth	r2, r3
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4413      	add	r3, r2
 8008dec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008dee:	68fb      	ldr	r3, [r7, #12]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	4613      	mov	r3, r2
 8008e08:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	789b      	ldrb	r3, [r3, #2]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d002      	beq.n	8008e1c <USBH_CtlReq+0x20>
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d00f      	beq.n	8008e3a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008e1a:	e027      	b.n	8008e6c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	88fa      	ldrh	r2, [r7, #6]
 8008e26:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2202      	movs	r2, #2
 8008e32:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008e34:	2301      	movs	r3, #1
 8008e36:	75fb      	strb	r3, [r7, #23]
      break;
 8008e38:	e018      	b.n	8008e6c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 f81c 	bl	8008e78 <USBH_HandleControl>
 8008e40:	4603      	mov	r3, r0
 8008e42:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d002      	beq.n	8008e50 <USBH_CtlReq+0x54>
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
 8008e4c:	2b03      	cmp	r3, #3
 8008e4e:	d106      	bne.n	8008e5e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2201      	movs	r2, #1
 8008e54:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	761a      	strb	r2, [r3, #24]
      break;
 8008e5c:	e005      	b.n	8008e6a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008e5e:	7dfb      	ldrb	r3, [r7, #23]
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d102      	bne.n	8008e6a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2201      	movs	r2, #1
 8008e68:	709a      	strb	r2, [r3, #2]
      break;
 8008e6a:	bf00      	nop
  }
  return status;
 8008e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3718      	adds	r7, #24
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af02      	add	r7, sp, #8
 8008e7e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e80:	2301      	movs	r3, #1
 8008e82:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e84:	2300      	movs	r3, #0
 8008e86:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	7e1b      	ldrb	r3, [r3, #24]
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	2b0a      	cmp	r3, #10
 8008e90:	f200 8156 	bhi.w	8009140 <USBH_HandleControl+0x2c8>
 8008e94:	a201      	add	r2, pc, #4	; (adr r2, 8008e9c <USBH_HandleControl+0x24>)
 8008e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9a:	bf00      	nop
 8008e9c:	08008ec9 	.word	0x08008ec9
 8008ea0:	08008ee3 	.word	0x08008ee3
 8008ea4:	08008f4d 	.word	0x08008f4d
 8008ea8:	08008f73 	.word	0x08008f73
 8008eac:	08008fab 	.word	0x08008fab
 8008eb0:	08008fd5 	.word	0x08008fd5
 8008eb4:	08009027 	.word	0x08009027
 8008eb8:	08009049 	.word	0x08009049
 8008ebc:	08009085 	.word	0x08009085
 8008ec0:	080090ab 	.word	0x080090ab
 8008ec4:	080090e9 	.word	0x080090e9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f103 0110 	add.w	r1, r3, #16
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	795b      	ldrb	r3, [r3, #5]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f943 	bl	8009160 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2202      	movs	r2, #2
 8008ede:	761a      	strb	r2, [r3, #24]
      break;
 8008ee0:	e139      	b.n	8009156 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	795b      	ldrb	r3, [r3, #5]
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fcc5 	bl	8009878 <USBH_LL_GetURBState>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008ef2:	7bbb      	ldrb	r3, [r7, #14]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d11e      	bne.n	8008f36 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	7c1b      	ldrb	r3, [r3, #16]
 8008efc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f00:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	8adb      	ldrh	r3, [r3, #22]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00a      	beq.n	8008f20 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008f0a:	7b7b      	ldrb	r3, [r7, #13]
 8008f0c:	2b80      	cmp	r3, #128	; 0x80
 8008f0e:	d103      	bne.n	8008f18 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2203      	movs	r2, #3
 8008f14:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f16:	e115      	b.n	8009144 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2205      	movs	r2, #5
 8008f1c:	761a      	strb	r2, [r3, #24]
      break;
 8008f1e:	e111      	b.n	8009144 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008f20:	7b7b      	ldrb	r3, [r7, #13]
 8008f22:	2b80      	cmp	r3, #128	; 0x80
 8008f24:	d103      	bne.n	8008f2e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2209      	movs	r2, #9
 8008f2a:	761a      	strb	r2, [r3, #24]
      break;
 8008f2c:	e10a      	b.n	8009144 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2207      	movs	r2, #7
 8008f32:	761a      	strb	r2, [r3, #24]
      break;
 8008f34:	e106      	b.n	8009144 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008f36:	7bbb      	ldrb	r3, [r7, #14]
 8008f38:	2b04      	cmp	r3, #4
 8008f3a:	d003      	beq.n	8008f44 <USBH_HandleControl+0xcc>
 8008f3c:	7bbb      	ldrb	r3, [r7, #14]
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	f040 8100 	bne.w	8009144 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	220b      	movs	r2, #11
 8008f48:	761a      	strb	r2, [r3, #24]
      break;
 8008f4a:	e0fb      	b.n	8009144 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6899      	ldr	r1, [r3, #8]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	899a      	ldrh	r2, [r3, #12]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	791b      	ldrb	r3, [r3, #4]
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f93a 	bl	80091de <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2204      	movs	r2, #4
 8008f6e:	761a      	strb	r2, [r3, #24]
      break;
 8008f70:	e0f1      	b.n	8009156 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	791b      	ldrb	r3, [r3, #4]
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fc7d 	bl	8009878 <USBH_LL_GetURBState>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f82:	7bbb      	ldrb	r3, [r7, #14]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d102      	bne.n	8008f8e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2209      	movs	r2, #9
 8008f8c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008f8e:	7bbb      	ldrb	r3, [r7, #14]
 8008f90:	2b05      	cmp	r3, #5
 8008f92:	d102      	bne.n	8008f9a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008f94:	2303      	movs	r3, #3
 8008f96:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f98:	e0d6      	b.n	8009148 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008f9a:	7bbb      	ldrb	r3, [r7, #14]
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	f040 80d3 	bne.w	8009148 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	220b      	movs	r2, #11
 8008fa6:	761a      	strb	r2, [r3, #24]
      break;
 8008fa8:	e0ce      	b.n	8009148 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6899      	ldr	r1, [r3, #8]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	899a      	ldrh	r2, [r3, #12]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	795b      	ldrb	r3, [r3, #5]
 8008fb6:	2001      	movs	r0, #1
 8008fb8:	9000      	str	r0, [sp, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f8ea 	bl	8009194 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2206      	movs	r2, #6
 8008fd0:	761a      	strb	r2, [r3, #24]
      break;
 8008fd2:	e0c0      	b.n	8009156 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	795b      	ldrb	r3, [r3, #5]
 8008fd8:	4619      	mov	r1, r3
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fc4c 	bl	8009878 <USBH_LL_GetURBState>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008fe4:	7bbb      	ldrb	r3, [r7, #14]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d103      	bne.n	8008ff2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2207      	movs	r2, #7
 8008fee:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ff0:	e0ac      	b.n	800914c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008ff2:	7bbb      	ldrb	r3, [r7, #14]
 8008ff4:	2b05      	cmp	r3, #5
 8008ff6:	d105      	bne.n	8009004 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	220c      	movs	r2, #12
 8008ffc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008ffe:	2303      	movs	r3, #3
 8009000:	73fb      	strb	r3, [r7, #15]
      break;
 8009002:	e0a3      	b.n	800914c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009004:	7bbb      	ldrb	r3, [r7, #14]
 8009006:	2b02      	cmp	r3, #2
 8009008:	d103      	bne.n	8009012 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2205      	movs	r2, #5
 800900e:	761a      	strb	r2, [r3, #24]
      break;
 8009010:	e09c      	b.n	800914c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009012:	7bbb      	ldrb	r3, [r7, #14]
 8009014:	2b04      	cmp	r3, #4
 8009016:	f040 8099 	bne.w	800914c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	220b      	movs	r2, #11
 800901e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009020:	2302      	movs	r3, #2
 8009022:	73fb      	strb	r3, [r7, #15]
      break;
 8009024:	e092      	b.n	800914c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	791b      	ldrb	r3, [r3, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	2100      	movs	r1, #0
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f8d5 	bl	80091de <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800903a:	b29a      	uxth	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2208      	movs	r2, #8
 8009044:	761a      	strb	r2, [r3, #24]

      break;
 8009046:	e086      	b.n	8009156 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	791b      	ldrb	r3, [r3, #4]
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fc12 	bl	8009878 <USBH_LL_GetURBState>
 8009054:	4603      	mov	r3, r0
 8009056:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009058:	7bbb      	ldrb	r3, [r7, #14]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d105      	bne.n	800906a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	220d      	movs	r2, #13
 8009062:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009068:	e072      	b.n	8009150 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800906a:	7bbb      	ldrb	r3, [r7, #14]
 800906c:	2b04      	cmp	r3, #4
 800906e:	d103      	bne.n	8009078 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	220b      	movs	r2, #11
 8009074:	761a      	strb	r2, [r3, #24]
      break;
 8009076:	e06b      	b.n	8009150 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009078:	7bbb      	ldrb	r3, [r7, #14]
 800907a:	2b05      	cmp	r3, #5
 800907c:	d168      	bne.n	8009150 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800907e:	2303      	movs	r3, #3
 8009080:	73fb      	strb	r3, [r7, #15]
      break;
 8009082:	e065      	b.n	8009150 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	795b      	ldrb	r3, [r3, #5]
 8009088:	2201      	movs	r2, #1
 800908a:	9200      	str	r2, [sp, #0]
 800908c:	2200      	movs	r2, #0
 800908e:	2100      	movs	r1, #0
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f87f 	bl	8009194 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800909c:	b29a      	uxth	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	220a      	movs	r2, #10
 80090a6:	761a      	strb	r2, [r3, #24]
      break;
 80090a8:	e055      	b.n	8009156 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	795b      	ldrb	r3, [r3, #5]
 80090ae:	4619      	mov	r1, r3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 fbe1 	bl	8009878 <USBH_LL_GetURBState>
 80090b6:	4603      	mov	r3, r0
 80090b8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d105      	bne.n	80090cc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	220d      	movs	r2, #13
 80090c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090ca:	e043      	b.n	8009154 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80090cc:	7bbb      	ldrb	r3, [r7, #14]
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d103      	bne.n	80090da <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2209      	movs	r2, #9
 80090d6:	761a      	strb	r2, [r3, #24]
      break;
 80090d8:	e03c      	b.n	8009154 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80090da:	7bbb      	ldrb	r3, [r7, #14]
 80090dc:	2b04      	cmp	r3, #4
 80090de:	d139      	bne.n	8009154 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	220b      	movs	r2, #11
 80090e4:	761a      	strb	r2, [r3, #24]
      break;
 80090e6:	e035      	b.n	8009154 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	7e5b      	ldrb	r3, [r3, #25]
 80090ec:	3301      	adds	r3, #1
 80090ee:	b2da      	uxtb	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	765a      	strb	r2, [r3, #25]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	7e5b      	ldrb	r3, [r3, #25]
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d806      	bhi.n	800910a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2201      	movs	r2, #1
 8009106:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009108:	e025      	b.n	8009156 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009110:	2106      	movs	r1, #6
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	795b      	ldrb	r3, [r3, #5]
 8009120:	4619      	mov	r1, r3
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f90c 	bl	8009340 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	791b      	ldrb	r3, [r3, #4]
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f906 	bl	8009340 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800913a:	2302      	movs	r3, #2
 800913c:	73fb      	strb	r3, [r7, #15]
      break;
 800913e:	e00a      	b.n	8009156 <USBH_HandleControl+0x2de>

    default:
      break;
 8009140:	bf00      	nop
 8009142:	e008      	b.n	8009156 <USBH_HandleControl+0x2de>
      break;
 8009144:	bf00      	nop
 8009146:	e006      	b.n	8009156 <USBH_HandleControl+0x2de>
      break;
 8009148:	bf00      	nop
 800914a:	e004      	b.n	8009156 <USBH_HandleControl+0x2de>
      break;
 800914c:	bf00      	nop
 800914e:	e002      	b.n	8009156 <USBH_HandleControl+0x2de>
      break;
 8009150:	bf00      	nop
 8009152:	e000      	b.n	8009156 <USBH_HandleControl+0x2de>
      break;
 8009154:	bf00      	nop
  }

  return status;
 8009156:	7bfb      	ldrb	r3, [r7, #15]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b088      	sub	sp, #32
 8009164:	af04      	add	r7, sp, #16
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	4613      	mov	r3, r2
 800916c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800916e:	79f9      	ldrb	r1, [r7, #7]
 8009170:	2300      	movs	r3, #0
 8009172:	9303      	str	r3, [sp, #12]
 8009174:	2308      	movs	r3, #8
 8009176:	9302      	str	r3, [sp, #8]
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	9301      	str	r3, [sp, #4]
 800917c:	2300      	movs	r3, #0
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	2300      	movs	r3, #0
 8009182:	2200      	movs	r2, #0
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f000 fb46 	bl	8009816 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b088      	sub	sp, #32
 8009198:	af04      	add	r7, sp, #16
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	4611      	mov	r1, r2
 80091a0:	461a      	mov	r2, r3
 80091a2:	460b      	mov	r3, r1
 80091a4:	80fb      	strh	r3, [r7, #6]
 80091a6:	4613      	mov	r3, r2
 80091a8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d001      	beq.n	80091b8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80091b4:	2300      	movs	r3, #0
 80091b6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091b8:	7979      	ldrb	r1, [r7, #5]
 80091ba:	7e3b      	ldrb	r3, [r7, #24]
 80091bc:	9303      	str	r3, [sp, #12]
 80091be:	88fb      	ldrh	r3, [r7, #6]
 80091c0:	9302      	str	r3, [sp, #8]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	9301      	str	r3, [sp, #4]
 80091c6:	2301      	movs	r3, #1
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	2300      	movs	r3, #0
 80091cc:	2200      	movs	r2, #0
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f000 fb21 	bl	8009816 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b088      	sub	sp, #32
 80091e2:	af04      	add	r7, sp, #16
 80091e4:	60f8      	str	r0, [r7, #12]
 80091e6:	60b9      	str	r1, [r7, #8]
 80091e8:	4611      	mov	r1, r2
 80091ea:	461a      	mov	r2, r3
 80091ec:	460b      	mov	r3, r1
 80091ee:	80fb      	strh	r3, [r7, #6]
 80091f0:	4613      	mov	r3, r2
 80091f2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091f4:	7979      	ldrb	r1, [r7, #5]
 80091f6:	2300      	movs	r3, #0
 80091f8:	9303      	str	r3, [sp, #12]
 80091fa:	88fb      	ldrh	r3, [r7, #6]
 80091fc:	9302      	str	r3, [sp, #8]
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	9301      	str	r3, [sp, #4]
 8009202:	2301      	movs	r3, #1
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	2300      	movs	r3, #0
 8009208:	2201      	movs	r2, #1
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f000 fb03 	bl	8009816 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009210:	2300      	movs	r3, #0

}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b088      	sub	sp, #32
 800921e:	af04      	add	r7, sp, #16
 8009220:	60f8      	str	r0, [r7, #12]
 8009222:	60b9      	str	r1, [r7, #8]
 8009224:	4611      	mov	r1, r2
 8009226:	461a      	mov	r2, r3
 8009228:	460b      	mov	r3, r1
 800922a:	80fb      	strh	r3, [r7, #6]
 800922c:	4613      	mov	r3, r2
 800922e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800923a:	2300      	movs	r3, #0
 800923c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800923e:	7979      	ldrb	r1, [r7, #5]
 8009240:	7e3b      	ldrb	r3, [r7, #24]
 8009242:	9303      	str	r3, [sp, #12]
 8009244:	88fb      	ldrh	r3, [r7, #6]
 8009246:	9302      	str	r3, [sp, #8]
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	9301      	str	r3, [sp, #4]
 800924c:	2301      	movs	r3, #1
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	2302      	movs	r3, #2
 8009252:	2200      	movs	r2, #0
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f000 fade 	bl	8009816 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b088      	sub	sp, #32
 8009268:	af04      	add	r7, sp, #16
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	4611      	mov	r1, r2
 8009270:	461a      	mov	r2, r3
 8009272:	460b      	mov	r3, r1
 8009274:	80fb      	strh	r3, [r7, #6]
 8009276:	4613      	mov	r3, r2
 8009278:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800927a:	7979      	ldrb	r1, [r7, #5]
 800927c:	2300      	movs	r3, #0
 800927e:	9303      	str	r3, [sp, #12]
 8009280:	88fb      	ldrh	r3, [r7, #6]
 8009282:	9302      	str	r3, [sp, #8]
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	9301      	str	r3, [sp, #4]
 8009288:	2301      	movs	r3, #1
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	2302      	movs	r3, #2
 800928e:	2201      	movs	r2, #1
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f000 fac0 	bl	8009816 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af04      	add	r7, sp, #16
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	4608      	mov	r0, r1
 80092aa:	4611      	mov	r1, r2
 80092ac:	461a      	mov	r2, r3
 80092ae:	4603      	mov	r3, r0
 80092b0:	70fb      	strb	r3, [r7, #3]
 80092b2:	460b      	mov	r3, r1
 80092b4:	70bb      	strb	r3, [r7, #2]
 80092b6:	4613      	mov	r3, r2
 80092b8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80092ba:	7878      	ldrb	r0, [r7, #1]
 80092bc:	78ba      	ldrb	r2, [r7, #2]
 80092be:	78f9      	ldrb	r1, [r7, #3]
 80092c0:	8b3b      	ldrh	r3, [r7, #24]
 80092c2:	9302      	str	r3, [sp, #8]
 80092c4:	7d3b      	ldrb	r3, [r7, #20]
 80092c6:	9301      	str	r3, [sp, #4]
 80092c8:	7c3b      	ldrb	r3, [r7, #16]
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	4603      	mov	r3, r0
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fa53 	bl	800977a <USBH_LL_OpenPipe>

  return USBH_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b082      	sub	sp, #8
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	460b      	mov	r3, r1
 80092e8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80092ea:	78fb      	ldrb	r3, [r7, #3]
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fa72 	bl	80097d8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	460b      	mov	r3, r1
 8009308:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f836 	bl	800937c <USBH_GetFreePipe>
 8009310:	4603      	mov	r3, r0
 8009312:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009314:	89fb      	ldrh	r3, [r7, #14]
 8009316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800931a:	4293      	cmp	r3, r2
 800931c:	d00a      	beq.n	8009334 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800931e:	78fa      	ldrb	r2, [r7, #3]
 8009320:	89fb      	ldrh	r3, [r7, #14]
 8009322:	f003 030f 	and.w	r3, r3, #15
 8009326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800932a:	6879      	ldr	r1, [r7, #4]
 800932c:	33e0      	adds	r3, #224	; 0xe0
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	440b      	add	r3, r1
 8009332:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009334:	89fb      	ldrh	r3, [r7, #14]
 8009336:	b2db      	uxtb	r3, r3
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800934c:	78fb      	ldrb	r3, [r7, #3]
 800934e:	2b0f      	cmp	r3, #15
 8009350:	d80d      	bhi.n	800936e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009352:	78fb      	ldrb	r3, [r7, #3]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	33e0      	adds	r3, #224	; 0xe0
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4413      	add	r3, r2
 800935c:	685a      	ldr	r2, [r3, #4]
 800935e:	78fb      	ldrb	r3, [r7, #3]
 8009360:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009364:	6879      	ldr	r1, [r7, #4]
 8009366:	33e0      	adds	r3, #224	; 0xe0
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	440b      	add	r3, r1
 800936c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009384:	2300      	movs	r3, #0
 8009386:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009388:	2300      	movs	r3, #0
 800938a:	73fb      	strb	r3, [r7, #15]
 800938c:	e00f      	b.n	80093ae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800938e:	7bfb      	ldrb	r3, [r7, #15]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	33e0      	adds	r3, #224	; 0xe0
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4413      	add	r3, r2
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d102      	bne.n	80093a8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80093a2:	7bfb      	ldrb	r3, [r7, #15]
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	e007      	b.n	80093b8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
 80093aa:	3301      	adds	r3, #1
 80093ac:	73fb      	strb	r3, [r7, #15]
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
 80093b0:	2b0f      	cmp	r3, #15
 80093b2:	d9ec      	bls.n	800938e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80093b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80093c8:	2201      	movs	r2, #1
 80093ca:	490e      	ldr	r1, [pc, #56]	; (8009404 <MX_USB_HOST_Init+0x40>)
 80093cc:	480e      	ldr	r0, [pc, #56]	; (8009408 <MX_USB_HOST_Init+0x44>)
 80093ce:	f7fe fba7 	bl	8007b20 <USBH_Init>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80093d8:	f7f7 fbb8 	bl	8000b4c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80093dc:	490b      	ldr	r1, [pc, #44]	; (800940c <MX_USB_HOST_Init+0x48>)
 80093de:	480a      	ldr	r0, [pc, #40]	; (8009408 <MX_USB_HOST_Init+0x44>)
 80093e0:	f7fe fc2c 	bl	8007c3c <USBH_RegisterClass>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80093ea:	f7f7 fbaf 	bl	8000b4c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80093ee:	4806      	ldr	r0, [pc, #24]	; (8009408 <MX_USB_HOST_Init+0x44>)
 80093f0:	f7fe fcb0 	bl	8007d54 <USBH_Start>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d001      	beq.n	80093fe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80093fa:	f7f7 fba7 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80093fe:	bf00      	nop
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	08009425 	.word	0x08009425
 8009408:	200002bc 	.word	0x200002bc
 800940c:	2000000c 	.word	0x2000000c

08009410 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009414:	4802      	ldr	r0, [pc, #8]	; (8009420 <MX_USB_HOST_Process+0x10>)
 8009416:	f7fe fcad 	bl	8007d74 <USBH_Process>
}
 800941a:	bf00      	nop
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	200002bc 	.word	0x200002bc

08009424 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	460b      	mov	r3, r1
 800942e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009430:	78fb      	ldrb	r3, [r7, #3]
 8009432:	3b01      	subs	r3, #1
 8009434:	2b04      	cmp	r3, #4
 8009436:	d819      	bhi.n	800946c <USBH_UserProcess+0x48>
 8009438:	a201      	add	r2, pc, #4	; (adr r2, 8009440 <USBH_UserProcess+0x1c>)
 800943a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943e:	bf00      	nop
 8009440:	0800946d 	.word	0x0800946d
 8009444:	0800945d 	.word	0x0800945d
 8009448:	0800946d 	.word	0x0800946d
 800944c:	08009465 	.word	0x08009465
 8009450:	08009455 	.word	0x08009455
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009454:	4b09      	ldr	r3, [pc, #36]	; (800947c <USBH_UserProcess+0x58>)
 8009456:	2203      	movs	r2, #3
 8009458:	701a      	strb	r2, [r3, #0]
  break;
 800945a:	e008      	b.n	800946e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800945c:	4b07      	ldr	r3, [pc, #28]	; (800947c <USBH_UserProcess+0x58>)
 800945e:	2202      	movs	r2, #2
 8009460:	701a      	strb	r2, [r3, #0]
  break;
 8009462:	e004      	b.n	800946e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009464:	4b05      	ldr	r3, [pc, #20]	; (800947c <USBH_UserProcess+0x58>)
 8009466:	2201      	movs	r2, #1
 8009468:	701a      	strb	r2, [r3, #0]
  break;
 800946a:	e000      	b.n	800946e <USBH_UserProcess+0x4a>

  default:
  break;
 800946c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800946e:	bf00      	nop
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr
 800947a:	bf00      	nop
 800947c:	20000694 	.word	0x20000694

08009480 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b08a      	sub	sp, #40	; 0x28
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009488:	f107 0314 	add.w	r3, r7, #20
 800948c:	2200      	movs	r2, #0
 800948e:	601a      	str	r2, [r3, #0]
 8009490:	605a      	str	r2, [r3, #4]
 8009492:	609a      	str	r2, [r3, #8]
 8009494:	60da      	str	r2, [r3, #12]
 8009496:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094a0:	d147      	bne.n	8009532 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094a2:	2300      	movs	r3, #0
 80094a4:	613b      	str	r3, [r7, #16]
 80094a6:	4b25      	ldr	r3, [pc, #148]	; (800953c <HAL_HCD_MspInit+0xbc>)
 80094a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094aa:	4a24      	ldr	r2, [pc, #144]	; (800953c <HAL_HCD_MspInit+0xbc>)
 80094ac:	f043 0301 	orr.w	r3, r3, #1
 80094b0:	6313      	str	r3, [r2, #48]	; 0x30
 80094b2:	4b22      	ldr	r3, [pc, #136]	; (800953c <HAL_HCD_MspInit+0xbc>)
 80094b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b6:	f003 0301 	and.w	r3, r3, #1
 80094ba:	613b      	str	r3, [r7, #16]
 80094bc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80094be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80094c4:	2300      	movs	r3, #0
 80094c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094c8:	2300      	movs	r3, #0
 80094ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80094cc:	f107 0314 	add.w	r3, r7, #20
 80094d0:	4619      	mov	r1, r3
 80094d2:	481b      	ldr	r0, [pc, #108]	; (8009540 <HAL_HCD_MspInit+0xc0>)
 80094d4:	f7f8 fb9c 	bl	8001c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80094d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80094dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094de:	2302      	movs	r3, #2
 80094e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094e2:	2300      	movs	r3, #0
 80094e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094e6:	2300      	movs	r3, #0
 80094e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094ea:	230a      	movs	r3, #10
 80094ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094ee:	f107 0314 	add.w	r3, r7, #20
 80094f2:	4619      	mov	r1, r3
 80094f4:	4812      	ldr	r0, [pc, #72]	; (8009540 <HAL_HCD_MspInit+0xc0>)
 80094f6:	f7f8 fb8b 	bl	8001c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094fa:	4b10      	ldr	r3, [pc, #64]	; (800953c <HAL_HCD_MspInit+0xbc>)
 80094fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094fe:	4a0f      	ldr	r2, [pc, #60]	; (800953c <HAL_HCD_MspInit+0xbc>)
 8009500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009504:	6353      	str	r3, [r2, #52]	; 0x34
 8009506:	2300      	movs	r3, #0
 8009508:	60fb      	str	r3, [r7, #12]
 800950a:	4b0c      	ldr	r3, [pc, #48]	; (800953c <HAL_HCD_MspInit+0xbc>)
 800950c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800950e:	4a0b      	ldr	r2, [pc, #44]	; (800953c <HAL_HCD_MspInit+0xbc>)
 8009510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009514:	6453      	str	r3, [r2, #68]	; 0x44
 8009516:	4b09      	ldr	r3, [pc, #36]	; (800953c <HAL_HCD_MspInit+0xbc>)
 8009518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800951a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800951e:	60fb      	str	r3, [r7, #12]
 8009520:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009522:	2200      	movs	r2, #0
 8009524:	2100      	movs	r1, #0
 8009526:	2043      	movs	r0, #67	; 0x43
 8009528:	f7f7 ff39 	bl	800139e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800952c:	2043      	movs	r0, #67	; 0x43
 800952e:	f7f7 ff52 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009532:	bf00      	nop
 8009534:	3728      	adds	r7, #40	; 0x28
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	40023800 	.word	0x40023800
 8009540:	40020000 	.word	0x40020000

08009544 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009552:	4618      	mov	r0, r3
 8009554:	f7fe ffed 	bl	8008532 <USBH_LL_IncTimer>
}
 8009558:	bf00      	nop
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800956e:	4618      	mov	r0, r3
 8009570:	f7ff f825 	bl	80085be <USBH_LL_Connect>
}
 8009574:	bf00      	nop
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800958a:	4618      	mov	r0, r3
 800958c:	f7ff f82e 	bl	80085ec <USBH_LL_Disconnect>
}
 8009590:	bf00      	nop
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
 80095a4:	4613      	mov	r3, r2
 80095a6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe ffdf 	bl	8008586 <USBH_LL_PortEnabled>
}
 80095c8:	bf00      	nop
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fe ffdf 	bl	80085a2 <USBH_LL_PortDisabled>
}
 80095e4:	bf00      	nop
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d12a      	bne.n	8009654 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80095fe:	4a18      	ldr	r2, [pc, #96]	; (8009660 <USBH_LL_Init+0x74>)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a15      	ldr	r2, [pc, #84]	; (8009660 <USBH_LL_Init+0x74>)
 800960a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800960e:	4b14      	ldr	r3, [pc, #80]	; (8009660 <USBH_LL_Init+0x74>)
 8009610:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009614:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009616:	4b12      	ldr	r3, [pc, #72]	; (8009660 <USBH_LL_Init+0x74>)
 8009618:	2208      	movs	r2, #8
 800961a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800961c:	4b10      	ldr	r3, [pc, #64]	; (8009660 <USBH_LL_Init+0x74>)
 800961e:	2201      	movs	r2, #1
 8009620:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009622:	4b0f      	ldr	r3, [pc, #60]	; (8009660 <USBH_LL_Init+0x74>)
 8009624:	2200      	movs	r2, #0
 8009626:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009628:	4b0d      	ldr	r3, [pc, #52]	; (8009660 <USBH_LL_Init+0x74>)
 800962a:	2202      	movs	r2, #2
 800962c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800962e:	4b0c      	ldr	r3, [pc, #48]	; (8009660 <USBH_LL_Init+0x74>)
 8009630:	2200      	movs	r2, #0
 8009632:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009634:	480a      	ldr	r0, [pc, #40]	; (8009660 <USBH_LL_Init+0x74>)
 8009636:	f7f8 fca0 	bl	8001f7a <HAL_HCD_Init>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009640:	f7f7 fa84 	bl	8000b4c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009644:	4806      	ldr	r0, [pc, #24]	; (8009660 <USBH_LL_Init+0x74>)
 8009646:	f7f9 f884 	bl	8002752 <HAL_HCD_GetCurrentFrame>
 800964a:	4603      	mov	r3, r0
 800964c:	4619      	mov	r1, r3
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7fe ff60 	bl	8008514 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	20000698 	.word	0x20000698

08009664 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800966c:	2300      	movs	r3, #0
 800966e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800967a:	4618      	mov	r0, r3
 800967c:	f7f8 fff3 	bl	8002666 <HAL_HCD_Start>
 8009680:	4603      	mov	r3, r0
 8009682:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009684:	7bfb      	ldrb	r3, [r7, #15]
 8009686:	4618      	mov	r0, r3
 8009688:	f000 f95c 	bl	8009944 <USBH_Get_USB_Status>
 800968c:	4603      	mov	r3, r0
 800968e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009690:	7bbb      	ldrb	r3, [r7, #14]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b084      	sub	sp, #16
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7f8 fffb 	bl	80026ac <HAL_HCD_Stop>
 80096b6:	4603      	mov	r3, r0
 80096b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
 80096bc:	4618      	mov	r0, r3
 80096be:	f000 f941 	bl	8009944 <USBH_Get_USB_Status>
 80096c2:	4603      	mov	r3, r0
 80096c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80096d8:	2301      	movs	r3, #1
 80096da:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7f9 f843 	bl	800276e <HAL_HCD_GetCurrentSpeed>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d00c      	beq.n	8009708 <USBH_LL_GetSpeed+0x38>
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d80d      	bhi.n	800970e <USBH_LL_GetSpeed+0x3e>
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d002      	beq.n	80096fc <USBH_LL_GetSpeed+0x2c>
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d003      	beq.n	8009702 <USBH_LL_GetSpeed+0x32>
 80096fa:	e008      	b.n	800970e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80096fc:	2300      	movs	r3, #0
 80096fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009700:	e008      	b.n	8009714 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009702:	2301      	movs	r3, #1
 8009704:	73fb      	strb	r3, [r7, #15]
    break;
 8009706:	e005      	b.n	8009714 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009708:	2302      	movs	r3, #2
 800970a:	73fb      	strb	r3, [r7, #15]
    break;
 800970c:	e002      	b.n	8009714 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800970e:	2301      	movs	r3, #1
 8009710:	73fb      	strb	r3, [r7, #15]
    break;
 8009712:	bf00      	nop
  }
  return  speed;
 8009714:	7bfb      	ldrb	r3, [r7, #15]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b084      	sub	sp, #16
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009734:	4618      	mov	r0, r3
 8009736:	f7f8 ffd6 	bl	80026e6 <HAL_HCD_ResetPort>
 800973a:	4603      	mov	r3, r0
 800973c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800973e:	7bfb      	ldrb	r3, [r7, #15]
 8009740:	4618      	mov	r0, r3
 8009742:	f000 f8ff 	bl	8009944 <USBH_Get_USB_Status>
 8009746:	4603      	mov	r3, r0
 8009748:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800974a:	7bbb      	ldrb	r3, [r7, #14]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	460b      	mov	r3, r1
 800975e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009766:	78fa      	ldrb	r2, [r7, #3]
 8009768:	4611      	mov	r1, r2
 800976a:	4618      	mov	r0, r3
 800976c:	f7f8 ffdd 	bl	800272a <HAL_HCD_HC_GetXferCount>
 8009770:	4603      	mov	r3, r0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3708      	adds	r7, #8
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800977a:	b590      	push	{r4, r7, lr}
 800977c:	b089      	sub	sp, #36	; 0x24
 800977e:	af04      	add	r7, sp, #16
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	4608      	mov	r0, r1
 8009784:	4611      	mov	r1, r2
 8009786:	461a      	mov	r2, r3
 8009788:	4603      	mov	r3, r0
 800978a:	70fb      	strb	r3, [r7, #3]
 800978c:	460b      	mov	r3, r1
 800978e:	70bb      	strb	r3, [r7, #2]
 8009790:	4613      	mov	r3, r2
 8009792:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80097a2:	787c      	ldrb	r4, [r7, #1]
 80097a4:	78ba      	ldrb	r2, [r7, #2]
 80097a6:	78f9      	ldrb	r1, [r7, #3]
 80097a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80097aa:	9302      	str	r3, [sp, #8]
 80097ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80097b0:	9301      	str	r3, [sp, #4]
 80097b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	4623      	mov	r3, r4
 80097ba:	f7f8 fc40 	bl	800203e <HAL_HCD_HC_Init>
 80097be:	4603      	mov	r3, r0
 80097c0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80097c2:	7bfb      	ldrb	r3, [r7, #15]
 80097c4:	4618      	mov	r0, r3
 80097c6:	f000 f8bd 	bl	8009944 <USBH_Get_USB_Status>
 80097ca:	4603      	mov	r3, r0
 80097cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd90      	pop	{r4, r7, pc}

080097d8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	460b      	mov	r3, r1
 80097e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80097f2:	78fa      	ldrb	r2, [r7, #3]
 80097f4:	4611      	mov	r1, r2
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7f8 fcb0 	bl	800215c <HAL_HCD_HC_Halt>
 80097fc:	4603      	mov	r3, r0
 80097fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009800:	7bfb      	ldrb	r3, [r7, #15]
 8009802:	4618      	mov	r0, r3
 8009804:	f000 f89e 	bl	8009944 <USBH_Get_USB_Status>
 8009808:	4603      	mov	r3, r0
 800980a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800980c:	7bbb      	ldrb	r3, [r7, #14]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009816:	b590      	push	{r4, r7, lr}
 8009818:	b089      	sub	sp, #36	; 0x24
 800981a:	af04      	add	r7, sp, #16
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	4608      	mov	r0, r1
 8009820:	4611      	mov	r1, r2
 8009822:	461a      	mov	r2, r3
 8009824:	4603      	mov	r3, r0
 8009826:	70fb      	strb	r3, [r7, #3]
 8009828:	460b      	mov	r3, r1
 800982a:	70bb      	strb	r3, [r7, #2]
 800982c:	4613      	mov	r3, r2
 800982e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800983e:	787c      	ldrb	r4, [r7, #1]
 8009840:	78ba      	ldrb	r2, [r7, #2]
 8009842:	78f9      	ldrb	r1, [r7, #3]
 8009844:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009848:	9303      	str	r3, [sp, #12]
 800984a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800984c:	9302      	str	r3, [sp, #8]
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	9301      	str	r3, [sp, #4]
 8009852:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	4623      	mov	r3, r4
 800985a:	f7f8 fca3 	bl	80021a4 <HAL_HCD_HC_SubmitRequest>
 800985e:	4603      	mov	r3, r0
 8009860:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009862:	7bfb      	ldrb	r3, [r7, #15]
 8009864:	4618      	mov	r0, r3
 8009866:	f000 f86d 	bl	8009944 <USBH_Get_USB_Status>
 800986a:	4603      	mov	r3, r0
 800986c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800986e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	bd90      	pop	{r4, r7, pc}

08009878 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	460b      	mov	r3, r1
 8009882:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800988a:	78fa      	ldrb	r2, [r7, #3]
 800988c:	4611      	mov	r1, r2
 800988e:	4618      	mov	r0, r3
 8009890:	f7f8 ff37 	bl	8002702 <HAL_HCD_HC_GetURBState>
 8009894:	4603      	mov	r3, r0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b082      	sub	sp, #8
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	460b      	mov	r3, r1
 80098a8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d103      	bne.n	80098bc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80098b4:	78fb      	ldrb	r3, [r7, #3]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 f870 	bl	800999c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80098bc:	20c8      	movs	r0, #200	; 0xc8
 80098be:	f7f7 fc6f 	bl	80011a0 <HAL_Delay>
  return USBH_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	460b      	mov	r3, r1
 80098d6:	70fb      	strb	r3, [r7, #3]
 80098d8:	4613      	mov	r3, r2
 80098da:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098e2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80098e4:	78fb      	ldrb	r3, [r7, #3]
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	212c      	movs	r1, #44	; 0x2c
 80098ea:	fb01 f303 	mul.w	r3, r1, r3
 80098ee:	4413      	add	r3, r2
 80098f0:	333b      	adds	r3, #59	; 0x3b
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d009      	beq.n	800990c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80098f8:	78fb      	ldrb	r3, [r7, #3]
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	212c      	movs	r1, #44	; 0x2c
 80098fe:	fb01 f303 	mul.w	r3, r1, r3
 8009902:	4413      	add	r3, r2
 8009904:	3354      	adds	r3, #84	; 0x54
 8009906:	78ba      	ldrb	r2, [r7, #2]
 8009908:	701a      	strb	r2, [r3, #0]
 800990a:	e008      	b.n	800991e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800990c:	78fb      	ldrb	r3, [r7, #3]
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	212c      	movs	r1, #44	; 0x2c
 8009912:	fb01 f303 	mul.w	r3, r1, r3
 8009916:	4413      	add	r3, r2
 8009918:	3355      	adds	r3, #85	; 0x55
 800991a:	78ba      	ldrb	r2, [r7, #2]
 800991c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3714      	adds	r7, #20
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f7f7 fc33 	bl	80011a0 <HAL_Delay>
}
 800993a:	bf00      	nop
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
	...

08009944 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009952:	79fb      	ldrb	r3, [r7, #7]
 8009954:	2b03      	cmp	r3, #3
 8009956:	d817      	bhi.n	8009988 <USBH_Get_USB_Status+0x44>
 8009958:	a201      	add	r2, pc, #4	; (adr r2, 8009960 <USBH_Get_USB_Status+0x1c>)
 800995a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995e:	bf00      	nop
 8009960:	08009971 	.word	0x08009971
 8009964:	08009977 	.word	0x08009977
 8009968:	0800997d 	.word	0x0800997d
 800996c:	08009983 	.word	0x08009983
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009970:	2300      	movs	r3, #0
 8009972:	73fb      	strb	r3, [r7, #15]
    break;
 8009974:	e00b      	b.n	800998e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009976:	2302      	movs	r3, #2
 8009978:	73fb      	strb	r3, [r7, #15]
    break;
 800997a:	e008      	b.n	800998e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800997c:	2301      	movs	r3, #1
 800997e:	73fb      	strb	r3, [r7, #15]
    break;
 8009980:	e005      	b.n	800998e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009982:	2302      	movs	r3, #2
 8009984:	73fb      	strb	r3, [r7, #15]
    break;
 8009986:	e002      	b.n	800998e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009988:	2302      	movs	r3, #2
 800998a:	73fb      	strb	r3, [r7, #15]
    break;
 800998c:	bf00      	nop
  }
  return usb_status;
 800998e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3714      	adds	r7, #20
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	4603      	mov	r3, r0
 80099a4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80099a6:	79fb      	ldrb	r3, [r7, #7]
 80099a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80099aa:	79fb      	ldrb	r3, [r7, #7]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d102      	bne.n	80099b6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80099b0:	2300      	movs	r3, #0
 80099b2:	73fb      	strb	r3, [r7, #15]
 80099b4:	e001      	b.n	80099ba <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80099b6:	2301      	movs	r3, #1
 80099b8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80099ba:	7bfb      	ldrb	r3, [r7, #15]
 80099bc:	461a      	mov	r2, r3
 80099be:	2101      	movs	r1, #1
 80099c0:	4803      	ldr	r0, [pc, #12]	; (80099d0 <MX_DriverVbusFS+0x34>)
 80099c2:	f7f8 fac1 	bl	8001f48 <HAL_GPIO_WritePin>
}
 80099c6:	bf00      	nop
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	40020800 	.word	0x40020800

080099d4 <__errno>:
 80099d4:	4b01      	ldr	r3, [pc, #4]	; (80099dc <__errno+0x8>)
 80099d6:	6818      	ldr	r0, [r3, #0]
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	2000002c 	.word	0x2000002c

080099e0 <__libc_init_array>:
 80099e0:	b570      	push	{r4, r5, r6, lr}
 80099e2:	4d0d      	ldr	r5, [pc, #52]	; (8009a18 <__libc_init_array+0x38>)
 80099e4:	4c0d      	ldr	r4, [pc, #52]	; (8009a1c <__libc_init_array+0x3c>)
 80099e6:	1b64      	subs	r4, r4, r5
 80099e8:	10a4      	asrs	r4, r4, #2
 80099ea:	2600      	movs	r6, #0
 80099ec:	42a6      	cmp	r6, r4
 80099ee:	d109      	bne.n	8009a04 <__libc_init_array+0x24>
 80099f0:	4d0b      	ldr	r5, [pc, #44]	; (8009a20 <__libc_init_array+0x40>)
 80099f2:	4c0c      	ldr	r4, [pc, #48]	; (8009a24 <__libc_init_array+0x44>)
 80099f4:	f000 fc9e 	bl	800a334 <_init>
 80099f8:	1b64      	subs	r4, r4, r5
 80099fa:	10a4      	asrs	r4, r4, #2
 80099fc:	2600      	movs	r6, #0
 80099fe:	42a6      	cmp	r6, r4
 8009a00:	d105      	bne.n	8009a0e <__libc_init_array+0x2e>
 8009a02:	bd70      	pop	{r4, r5, r6, pc}
 8009a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a08:	4798      	blx	r3
 8009a0a:	3601      	adds	r6, #1
 8009a0c:	e7ee      	b.n	80099ec <__libc_init_array+0xc>
 8009a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a12:	4798      	blx	r3
 8009a14:	3601      	adds	r6, #1
 8009a16:	e7f2      	b.n	80099fe <__libc_init_array+0x1e>
 8009a18:	0800a3b4 	.word	0x0800a3b4
 8009a1c:	0800a3b4 	.word	0x0800a3b4
 8009a20:	0800a3b4 	.word	0x0800a3b4
 8009a24:	0800a3b8 	.word	0x0800a3b8

08009a28 <malloc>:
 8009a28:	4b02      	ldr	r3, [pc, #8]	; (8009a34 <malloc+0xc>)
 8009a2a:	4601      	mov	r1, r0
 8009a2c:	6818      	ldr	r0, [r3, #0]
 8009a2e:	f000 b87f 	b.w	8009b30 <_malloc_r>
 8009a32:	bf00      	nop
 8009a34:	2000002c 	.word	0x2000002c

08009a38 <free>:
 8009a38:	4b02      	ldr	r3, [pc, #8]	; (8009a44 <free+0xc>)
 8009a3a:	4601      	mov	r1, r0
 8009a3c:	6818      	ldr	r0, [r3, #0]
 8009a3e:	f000 b80b 	b.w	8009a58 <_free_r>
 8009a42:	bf00      	nop
 8009a44:	2000002c 	.word	0x2000002c

08009a48 <memset>:
 8009a48:	4402      	add	r2, r0
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d100      	bne.n	8009a52 <memset+0xa>
 8009a50:	4770      	bx	lr
 8009a52:	f803 1b01 	strb.w	r1, [r3], #1
 8009a56:	e7f9      	b.n	8009a4c <memset+0x4>

08009a58 <_free_r>:
 8009a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a5a:	2900      	cmp	r1, #0
 8009a5c:	d044      	beq.n	8009ae8 <_free_r+0x90>
 8009a5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a62:	9001      	str	r0, [sp, #4]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f1a1 0404 	sub.w	r4, r1, #4
 8009a6a:	bfb8      	it	lt
 8009a6c:	18e4      	addlt	r4, r4, r3
 8009a6e:	f000 f903 	bl	8009c78 <__malloc_lock>
 8009a72:	4a1e      	ldr	r2, [pc, #120]	; (8009aec <_free_r+0x94>)
 8009a74:	9801      	ldr	r0, [sp, #4]
 8009a76:	6813      	ldr	r3, [r2, #0]
 8009a78:	b933      	cbnz	r3, 8009a88 <_free_r+0x30>
 8009a7a:	6063      	str	r3, [r4, #4]
 8009a7c:	6014      	str	r4, [r2, #0]
 8009a7e:	b003      	add	sp, #12
 8009a80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a84:	f000 b8fe 	b.w	8009c84 <__malloc_unlock>
 8009a88:	42a3      	cmp	r3, r4
 8009a8a:	d908      	bls.n	8009a9e <_free_r+0x46>
 8009a8c:	6825      	ldr	r5, [r4, #0]
 8009a8e:	1961      	adds	r1, r4, r5
 8009a90:	428b      	cmp	r3, r1
 8009a92:	bf01      	itttt	eq
 8009a94:	6819      	ldreq	r1, [r3, #0]
 8009a96:	685b      	ldreq	r3, [r3, #4]
 8009a98:	1949      	addeq	r1, r1, r5
 8009a9a:	6021      	streq	r1, [r4, #0]
 8009a9c:	e7ed      	b.n	8009a7a <_free_r+0x22>
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	b10b      	cbz	r3, 8009aa8 <_free_r+0x50>
 8009aa4:	42a3      	cmp	r3, r4
 8009aa6:	d9fa      	bls.n	8009a9e <_free_r+0x46>
 8009aa8:	6811      	ldr	r1, [r2, #0]
 8009aaa:	1855      	adds	r5, r2, r1
 8009aac:	42a5      	cmp	r5, r4
 8009aae:	d10b      	bne.n	8009ac8 <_free_r+0x70>
 8009ab0:	6824      	ldr	r4, [r4, #0]
 8009ab2:	4421      	add	r1, r4
 8009ab4:	1854      	adds	r4, r2, r1
 8009ab6:	42a3      	cmp	r3, r4
 8009ab8:	6011      	str	r1, [r2, #0]
 8009aba:	d1e0      	bne.n	8009a7e <_free_r+0x26>
 8009abc:	681c      	ldr	r4, [r3, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	6053      	str	r3, [r2, #4]
 8009ac2:	4421      	add	r1, r4
 8009ac4:	6011      	str	r1, [r2, #0]
 8009ac6:	e7da      	b.n	8009a7e <_free_r+0x26>
 8009ac8:	d902      	bls.n	8009ad0 <_free_r+0x78>
 8009aca:	230c      	movs	r3, #12
 8009acc:	6003      	str	r3, [r0, #0]
 8009ace:	e7d6      	b.n	8009a7e <_free_r+0x26>
 8009ad0:	6825      	ldr	r5, [r4, #0]
 8009ad2:	1961      	adds	r1, r4, r5
 8009ad4:	428b      	cmp	r3, r1
 8009ad6:	bf04      	itt	eq
 8009ad8:	6819      	ldreq	r1, [r3, #0]
 8009ada:	685b      	ldreq	r3, [r3, #4]
 8009adc:	6063      	str	r3, [r4, #4]
 8009ade:	bf04      	itt	eq
 8009ae0:	1949      	addeq	r1, r1, r5
 8009ae2:	6021      	streq	r1, [r4, #0]
 8009ae4:	6054      	str	r4, [r2, #4]
 8009ae6:	e7ca      	b.n	8009a7e <_free_r+0x26>
 8009ae8:	b003      	add	sp, #12
 8009aea:	bd30      	pop	{r4, r5, pc}
 8009aec:	2000099c 	.word	0x2000099c

08009af0 <sbrk_aligned>:
 8009af0:	b570      	push	{r4, r5, r6, lr}
 8009af2:	4e0e      	ldr	r6, [pc, #56]	; (8009b2c <sbrk_aligned+0x3c>)
 8009af4:	460c      	mov	r4, r1
 8009af6:	6831      	ldr	r1, [r6, #0]
 8009af8:	4605      	mov	r5, r0
 8009afa:	b911      	cbnz	r1, 8009b02 <sbrk_aligned+0x12>
 8009afc:	f000 f88c 	bl	8009c18 <_sbrk_r>
 8009b00:	6030      	str	r0, [r6, #0]
 8009b02:	4621      	mov	r1, r4
 8009b04:	4628      	mov	r0, r5
 8009b06:	f000 f887 	bl	8009c18 <_sbrk_r>
 8009b0a:	1c43      	adds	r3, r0, #1
 8009b0c:	d00a      	beq.n	8009b24 <sbrk_aligned+0x34>
 8009b0e:	1cc4      	adds	r4, r0, #3
 8009b10:	f024 0403 	bic.w	r4, r4, #3
 8009b14:	42a0      	cmp	r0, r4
 8009b16:	d007      	beq.n	8009b28 <sbrk_aligned+0x38>
 8009b18:	1a21      	subs	r1, r4, r0
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	f000 f87c 	bl	8009c18 <_sbrk_r>
 8009b20:	3001      	adds	r0, #1
 8009b22:	d101      	bne.n	8009b28 <sbrk_aligned+0x38>
 8009b24:	f04f 34ff 	mov.w	r4, #4294967295
 8009b28:	4620      	mov	r0, r4
 8009b2a:	bd70      	pop	{r4, r5, r6, pc}
 8009b2c:	200009a0 	.word	0x200009a0

08009b30 <_malloc_r>:
 8009b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b34:	1ccd      	adds	r5, r1, #3
 8009b36:	f025 0503 	bic.w	r5, r5, #3
 8009b3a:	3508      	adds	r5, #8
 8009b3c:	2d0c      	cmp	r5, #12
 8009b3e:	bf38      	it	cc
 8009b40:	250c      	movcc	r5, #12
 8009b42:	2d00      	cmp	r5, #0
 8009b44:	4607      	mov	r7, r0
 8009b46:	db01      	blt.n	8009b4c <_malloc_r+0x1c>
 8009b48:	42a9      	cmp	r1, r5
 8009b4a:	d905      	bls.n	8009b58 <_malloc_r+0x28>
 8009b4c:	230c      	movs	r3, #12
 8009b4e:	603b      	str	r3, [r7, #0]
 8009b50:	2600      	movs	r6, #0
 8009b52:	4630      	mov	r0, r6
 8009b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b58:	4e2e      	ldr	r6, [pc, #184]	; (8009c14 <_malloc_r+0xe4>)
 8009b5a:	f000 f88d 	bl	8009c78 <__malloc_lock>
 8009b5e:	6833      	ldr	r3, [r6, #0]
 8009b60:	461c      	mov	r4, r3
 8009b62:	bb34      	cbnz	r4, 8009bb2 <_malloc_r+0x82>
 8009b64:	4629      	mov	r1, r5
 8009b66:	4638      	mov	r0, r7
 8009b68:	f7ff ffc2 	bl	8009af0 <sbrk_aligned>
 8009b6c:	1c43      	adds	r3, r0, #1
 8009b6e:	4604      	mov	r4, r0
 8009b70:	d14d      	bne.n	8009c0e <_malloc_r+0xde>
 8009b72:	6834      	ldr	r4, [r6, #0]
 8009b74:	4626      	mov	r6, r4
 8009b76:	2e00      	cmp	r6, #0
 8009b78:	d140      	bne.n	8009bfc <_malloc_r+0xcc>
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	4631      	mov	r1, r6
 8009b7e:	4638      	mov	r0, r7
 8009b80:	eb04 0803 	add.w	r8, r4, r3
 8009b84:	f000 f848 	bl	8009c18 <_sbrk_r>
 8009b88:	4580      	cmp	r8, r0
 8009b8a:	d13a      	bne.n	8009c02 <_malloc_r+0xd2>
 8009b8c:	6821      	ldr	r1, [r4, #0]
 8009b8e:	3503      	adds	r5, #3
 8009b90:	1a6d      	subs	r5, r5, r1
 8009b92:	f025 0503 	bic.w	r5, r5, #3
 8009b96:	3508      	adds	r5, #8
 8009b98:	2d0c      	cmp	r5, #12
 8009b9a:	bf38      	it	cc
 8009b9c:	250c      	movcc	r5, #12
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	4638      	mov	r0, r7
 8009ba2:	f7ff ffa5 	bl	8009af0 <sbrk_aligned>
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	d02b      	beq.n	8009c02 <_malloc_r+0xd2>
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	442b      	add	r3, r5
 8009bae:	6023      	str	r3, [r4, #0]
 8009bb0:	e00e      	b.n	8009bd0 <_malloc_r+0xa0>
 8009bb2:	6822      	ldr	r2, [r4, #0]
 8009bb4:	1b52      	subs	r2, r2, r5
 8009bb6:	d41e      	bmi.n	8009bf6 <_malloc_r+0xc6>
 8009bb8:	2a0b      	cmp	r2, #11
 8009bba:	d916      	bls.n	8009bea <_malloc_r+0xba>
 8009bbc:	1961      	adds	r1, r4, r5
 8009bbe:	42a3      	cmp	r3, r4
 8009bc0:	6025      	str	r5, [r4, #0]
 8009bc2:	bf18      	it	ne
 8009bc4:	6059      	strne	r1, [r3, #4]
 8009bc6:	6863      	ldr	r3, [r4, #4]
 8009bc8:	bf08      	it	eq
 8009bca:	6031      	streq	r1, [r6, #0]
 8009bcc:	5162      	str	r2, [r4, r5]
 8009bce:	604b      	str	r3, [r1, #4]
 8009bd0:	4638      	mov	r0, r7
 8009bd2:	f104 060b 	add.w	r6, r4, #11
 8009bd6:	f000 f855 	bl	8009c84 <__malloc_unlock>
 8009bda:	f026 0607 	bic.w	r6, r6, #7
 8009bde:	1d23      	adds	r3, r4, #4
 8009be0:	1af2      	subs	r2, r6, r3
 8009be2:	d0b6      	beq.n	8009b52 <_malloc_r+0x22>
 8009be4:	1b9b      	subs	r3, r3, r6
 8009be6:	50a3      	str	r3, [r4, r2]
 8009be8:	e7b3      	b.n	8009b52 <_malloc_r+0x22>
 8009bea:	6862      	ldr	r2, [r4, #4]
 8009bec:	42a3      	cmp	r3, r4
 8009bee:	bf0c      	ite	eq
 8009bf0:	6032      	streq	r2, [r6, #0]
 8009bf2:	605a      	strne	r2, [r3, #4]
 8009bf4:	e7ec      	b.n	8009bd0 <_malloc_r+0xa0>
 8009bf6:	4623      	mov	r3, r4
 8009bf8:	6864      	ldr	r4, [r4, #4]
 8009bfa:	e7b2      	b.n	8009b62 <_malloc_r+0x32>
 8009bfc:	4634      	mov	r4, r6
 8009bfe:	6876      	ldr	r6, [r6, #4]
 8009c00:	e7b9      	b.n	8009b76 <_malloc_r+0x46>
 8009c02:	230c      	movs	r3, #12
 8009c04:	603b      	str	r3, [r7, #0]
 8009c06:	4638      	mov	r0, r7
 8009c08:	f000 f83c 	bl	8009c84 <__malloc_unlock>
 8009c0c:	e7a1      	b.n	8009b52 <_malloc_r+0x22>
 8009c0e:	6025      	str	r5, [r4, #0]
 8009c10:	e7de      	b.n	8009bd0 <_malloc_r+0xa0>
 8009c12:	bf00      	nop
 8009c14:	2000099c 	.word	0x2000099c

08009c18 <_sbrk_r>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	4d06      	ldr	r5, [pc, #24]	; (8009c34 <_sbrk_r+0x1c>)
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	4604      	mov	r4, r0
 8009c20:	4608      	mov	r0, r1
 8009c22:	602b      	str	r3, [r5, #0]
 8009c24:	f7f7 f9d8 	bl	8000fd8 <_sbrk>
 8009c28:	1c43      	adds	r3, r0, #1
 8009c2a:	d102      	bne.n	8009c32 <_sbrk_r+0x1a>
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	b103      	cbz	r3, 8009c32 <_sbrk_r+0x1a>
 8009c30:	6023      	str	r3, [r4, #0]
 8009c32:	bd38      	pop	{r3, r4, r5, pc}
 8009c34:	200009a4 	.word	0x200009a4

08009c38 <siprintf>:
 8009c38:	b40e      	push	{r1, r2, r3}
 8009c3a:	b500      	push	{lr}
 8009c3c:	b09c      	sub	sp, #112	; 0x70
 8009c3e:	ab1d      	add	r3, sp, #116	; 0x74
 8009c40:	9002      	str	r0, [sp, #8]
 8009c42:	9006      	str	r0, [sp, #24]
 8009c44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c48:	4809      	ldr	r0, [pc, #36]	; (8009c70 <siprintf+0x38>)
 8009c4a:	9107      	str	r1, [sp, #28]
 8009c4c:	9104      	str	r1, [sp, #16]
 8009c4e:	4909      	ldr	r1, [pc, #36]	; (8009c74 <siprintf+0x3c>)
 8009c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c54:	9105      	str	r1, [sp, #20]
 8009c56:	6800      	ldr	r0, [r0, #0]
 8009c58:	9301      	str	r3, [sp, #4]
 8009c5a:	a902      	add	r1, sp, #8
 8009c5c:	f000 f874 	bl	8009d48 <_svfiprintf_r>
 8009c60:	9b02      	ldr	r3, [sp, #8]
 8009c62:	2200      	movs	r2, #0
 8009c64:	701a      	strb	r2, [r3, #0]
 8009c66:	b01c      	add	sp, #112	; 0x70
 8009c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c6c:	b003      	add	sp, #12
 8009c6e:	4770      	bx	lr
 8009c70:	2000002c 	.word	0x2000002c
 8009c74:	ffff0208 	.word	0xffff0208

08009c78 <__malloc_lock>:
 8009c78:	4801      	ldr	r0, [pc, #4]	; (8009c80 <__malloc_lock+0x8>)
 8009c7a:	f000 baf9 	b.w	800a270 <__retarget_lock_acquire_recursive>
 8009c7e:	bf00      	nop
 8009c80:	200009a8 	.word	0x200009a8

08009c84 <__malloc_unlock>:
 8009c84:	4801      	ldr	r0, [pc, #4]	; (8009c8c <__malloc_unlock+0x8>)
 8009c86:	f000 baf4 	b.w	800a272 <__retarget_lock_release_recursive>
 8009c8a:	bf00      	nop
 8009c8c:	200009a8 	.word	0x200009a8

08009c90 <__ssputs_r>:
 8009c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c94:	688e      	ldr	r6, [r1, #8]
 8009c96:	429e      	cmp	r6, r3
 8009c98:	4682      	mov	sl, r0
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	4690      	mov	r8, r2
 8009c9e:	461f      	mov	r7, r3
 8009ca0:	d838      	bhi.n	8009d14 <__ssputs_r+0x84>
 8009ca2:	898a      	ldrh	r2, [r1, #12]
 8009ca4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ca8:	d032      	beq.n	8009d10 <__ssputs_r+0x80>
 8009caa:	6825      	ldr	r5, [r4, #0]
 8009cac:	6909      	ldr	r1, [r1, #16]
 8009cae:	eba5 0901 	sub.w	r9, r5, r1
 8009cb2:	6965      	ldr	r5, [r4, #20]
 8009cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	444b      	add	r3, r9
 8009cc0:	106d      	asrs	r5, r5, #1
 8009cc2:	429d      	cmp	r5, r3
 8009cc4:	bf38      	it	cc
 8009cc6:	461d      	movcc	r5, r3
 8009cc8:	0553      	lsls	r3, r2, #21
 8009cca:	d531      	bpl.n	8009d30 <__ssputs_r+0xa0>
 8009ccc:	4629      	mov	r1, r5
 8009cce:	f7ff ff2f 	bl	8009b30 <_malloc_r>
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	b950      	cbnz	r0, 8009cec <__ssputs_r+0x5c>
 8009cd6:	230c      	movs	r3, #12
 8009cd8:	f8ca 3000 	str.w	r3, [sl]
 8009cdc:	89a3      	ldrh	r3, [r4, #12]
 8009cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ce2:	81a3      	strh	r3, [r4, #12]
 8009ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cec:	6921      	ldr	r1, [r4, #16]
 8009cee:	464a      	mov	r2, r9
 8009cf0:	f000 fac0 	bl	800a274 <memcpy>
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cfe:	81a3      	strh	r3, [r4, #12]
 8009d00:	6126      	str	r6, [r4, #16]
 8009d02:	6165      	str	r5, [r4, #20]
 8009d04:	444e      	add	r6, r9
 8009d06:	eba5 0509 	sub.w	r5, r5, r9
 8009d0a:	6026      	str	r6, [r4, #0]
 8009d0c:	60a5      	str	r5, [r4, #8]
 8009d0e:	463e      	mov	r6, r7
 8009d10:	42be      	cmp	r6, r7
 8009d12:	d900      	bls.n	8009d16 <__ssputs_r+0x86>
 8009d14:	463e      	mov	r6, r7
 8009d16:	6820      	ldr	r0, [r4, #0]
 8009d18:	4632      	mov	r2, r6
 8009d1a:	4641      	mov	r1, r8
 8009d1c:	f000 fab8 	bl	800a290 <memmove>
 8009d20:	68a3      	ldr	r3, [r4, #8]
 8009d22:	1b9b      	subs	r3, r3, r6
 8009d24:	60a3      	str	r3, [r4, #8]
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	4433      	add	r3, r6
 8009d2a:	6023      	str	r3, [r4, #0]
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	e7db      	b.n	8009ce8 <__ssputs_r+0x58>
 8009d30:	462a      	mov	r2, r5
 8009d32:	f000 fac7 	bl	800a2c4 <_realloc_r>
 8009d36:	4606      	mov	r6, r0
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	d1e1      	bne.n	8009d00 <__ssputs_r+0x70>
 8009d3c:	6921      	ldr	r1, [r4, #16]
 8009d3e:	4650      	mov	r0, sl
 8009d40:	f7ff fe8a 	bl	8009a58 <_free_r>
 8009d44:	e7c7      	b.n	8009cd6 <__ssputs_r+0x46>
	...

08009d48 <_svfiprintf_r>:
 8009d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	4698      	mov	r8, r3
 8009d4e:	898b      	ldrh	r3, [r1, #12]
 8009d50:	061b      	lsls	r3, r3, #24
 8009d52:	b09d      	sub	sp, #116	; 0x74
 8009d54:	4607      	mov	r7, r0
 8009d56:	460d      	mov	r5, r1
 8009d58:	4614      	mov	r4, r2
 8009d5a:	d50e      	bpl.n	8009d7a <_svfiprintf_r+0x32>
 8009d5c:	690b      	ldr	r3, [r1, #16]
 8009d5e:	b963      	cbnz	r3, 8009d7a <_svfiprintf_r+0x32>
 8009d60:	2140      	movs	r1, #64	; 0x40
 8009d62:	f7ff fee5 	bl	8009b30 <_malloc_r>
 8009d66:	6028      	str	r0, [r5, #0]
 8009d68:	6128      	str	r0, [r5, #16]
 8009d6a:	b920      	cbnz	r0, 8009d76 <_svfiprintf_r+0x2e>
 8009d6c:	230c      	movs	r3, #12
 8009d6e:	603b      	str	r3, [r7, #0]
 8009d70:	f04f 30ff 	mov.w	r0, #4294967295
 8009d74:	e0d1      	b.n	8009f1a <_svfiprintf_r+0x1d2>
 8009d76:	2340      	movs	r3, #64	; 0x40
 8009d78:	616b      	str	r3, [r5, #20]
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d7e:	2320      	movs	r3, #32
 8009d80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d84:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d88:	2330      	movs	r3, #48	; 0x30
 8009d8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f34 <_svfiprintf_r+0x1ec>
 8009d8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d92:	f04f 0901 	mov.w	r9, #1
 8009d96:	4623      	mov	r3, r4
 8009d98:	469a      	mov	sl, r3
 8009d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d9e:	b10a      	cbz	r2, 8009da4 <_svfiprintf_r+0x5c>
 8009da0:	2a25      	cmp	r2, #37	; 0x25
 8009da2:	d1f9      	bne.n	8009d98 <_svfiprintf_r+0x50>
 8009da4:	ebba 0b04 	subs.w	fp, sl, r4
 8009da8:	d00b      	beq.n	8009dc2 <_svfiprintf_r+0x7a>
 8009daa:	465b      	mov	r3, fp
 8009dac:	4622      	mov	r2, r4
 8009dae:	4629      	mov	r1, r5
 8009db0:	4638      	mov	r0, r7
 8009db2:	f7ff ff6d 	bl	8009c90 <__ssputs_r>
 8009db6:	3001      	adds	r0, #1
 8009db8:	f000 80aa 	beq.w	8009f10 <_svfiprintf_r+0x1c8>
 8009dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dbe:	445a      	add	r2, fp
 8009dc0:	9209      	str	r2, [sp, #36]	; 0x24
 8009dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 80a2 	beq.w	8009f10 <_svfiprintf_r+0x1c8>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dd6:	f10a 0a01 	add.w	sl, sl, #1
 8009dda:	9304      	str	r3, [sp, #16]
 8009ddc:	9307      	str	r3, [sp, #28]
 8009dde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009de2:	931a      	str	r3, [sp, #104]	; 0x68
 8009de4:	4654      	mov	r4, sl
 8009de6:	2205      	movs	r2, #5
 8009de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dec:	4851      	ldr	r0, [pc, #324]	; (8009f34 <_svfiprintf_r+0x1ec>)
 8009dee:	f7f6 f9f7 	bl	80001e0 <memchr>
 8009df2:	9a04      	ldr	r2, [sp, #16]
 8009df4:	b9d8      	cbnz	r0, 8009e2e <_svfiprintf_r+0xe6>
 8009df6:	06d0      	lsls	r0, r2, #27
 8009df8:	bf44      	itt	mi
 8009dfa:	2320      	movmi	r3, #32
 8009dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e00:	0711      	lsls	r1, r2, #28
 8009e02:	bf44      	itt	mi
 8009e04:	232b      	movmi	r3, #43	; 0x2b
 8009e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e10:	d015      	beq.n	8009e3e <_svfiprintf_r+0xf6>
 8009e12:	9a07      	ldr	r2, [sp, #28]
 8009e14:	4654      	mov	r4, sl
 8009e16:	2000      	movs	r0, #0
 8009e18:	f04f 0c0a 	mov.w	ip, #10
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e22:	3b30      	subs	r3, #48	; 0x30
 8009e24:	2b09      	cmp	r3, #9
 8009e26:	d94e      	bls.n	8009ec6 <_svfiprintf_r+0x17e>
 8009e28:	b1b0      	cbz	r0, 8009e58 <_svfiprintf_r+0x110>
 8009e2a:	9207      	str	r2, [sp, #28]
 8009e2c:	e014      	b.n	8009e58 <_svfiprintf_r+0x110>
 8009e2e:	eba0 0308 	sub.w	r3, r0, r8
 8009e32:	fa09 f303 	lsl.w	r3, r9, r3
 8009e36:	4313      	orrs	r3, r2
 8009e38:	9304      	str	r3, [sp, #16]
 8009e3a:	46a2      	mov	sl, r4
 8009e3c:	e7d2      	b.n	8009de4 <_svfiprintf_r+0x9c>
 8009e3e:	9b03      	ldr	r3, [sp, #12]
 8009e40:	1d19      	adds	r1, r3, #4
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	9103      	str	r1, [sp, #12]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	bfbb      	ittet	lt
 8009e4a:	425b      	neglt	r3, r3
 8009e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8009e50:	9307      	strge	r3, [sp, #28]
 8009e52:	9307      	strlt	r3, [sp, #28]
 8009e54:	bfb8      	it	lt
 8009e56:	9204      	strlt	r2, [sp, #16]
 8009e58:	7823      	ldrb	r3, [r4, #0]
 8009e5a:	2b2e      	cmp	r3, #46	; 0x2e
 8009e5c:	d10c      	bne.n	8009e78 <_svfiprintf_r+0x130>
 8009e5e:	7863      	ldrb	r3, [r4, #1]
 8009e60:	2b2a      	cmp	r3, #42	; 0x2a
 8009e62:	d135      	bne.n	8009ed0 <_svfiprintf_r+0x188>
 8009e64:	9b03      	ldr	r3, [sp, #12]
 8009e66:	1d1a      	adds	r2, r3, #4
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	9203      	str	r2, [sp, #12]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	bfb8      	it	lt
 8009e70:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e74:	3402      	adds	r4, #2
 8009e76:	9305      	str	r3, [sp, #20]
 8009e78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f44 <_svfiprintf_r+0x1fc>
 8009e7c:	7821      	ldrb	r1, [r4, #0]
 8009e7e:	2203      	movs	r2, #3
 8009e80:	4650      	mov	r0, sl
 8009e82:	f7f6 f9ad 	bl	80001e0 <memchr>
 8009e86:	b140      	cbz	r0, 8009e9a <_svfiprintf_r+0x152>
 8009e88:	2340      	movs	r3, #64	; 0x40
 8009e8a:	eba0 000a 	sub.w	r0, r0, sl
 8009e8e:	fa03 f000 	lsl.w	r0, r3, r0
 8009e92:	9b04      	ldr	r3, [sp, #16]
 8009e94:	4303      	orrs	r3, r0
 8009e96:	3401      	adds	r4, #1
 8009e98:	9304      	str	r3, [sp, #16]
 8009e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e9e:	4826      	ldr	r0, [pc, #152]	; (8009f38 <_svfiprintf_r+0x1f0>)
 8009ea0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ea4:	2206      	movs	r2, #6
 8009ea6:	f7f6 f99b 	bl	80001e0 <memchr>
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d038      	beq.n	8009f20 <_svfiprintf_r+0x1d8>
 8009eae:	4b23      	ldr	r3, [pc, #140]	; (8009f3c <_svfiprintf_r+0x1f4>)
 8009eb0:	bb1b      	cbnz	r3, 8009efa <_svfiprintf_r+0x1b2>
 8009eb2:	9b03      	ldr	r3, [sp, #12]
 8009eb4:	3307      	adds	r3, #7
 8009eb6:	f023 0307 	bic.w	r3, r3, #7
 8009eba:	3308      	adds	r3, #8
 8009ebc:	9303      	str	r3, [sp, #12]
 8009ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec0:	4433      	add	r3, r6
 8009ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec4:	e767      	b.n	8009d96 <_svfiprintf_r+0x4e>
 8009ec6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eca:	460c      	mov	r4, r1
 8009ecc:	2001      	movs	r0, #1
 8009ece:	e7a5      	b.n	8009e1c <_svfiprintf_r+0xd4>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	3401      	adds	r4, #1
 8009ed4:	9305      	str	r3, [sp, #20]
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	f04f 0c0a 	mov.w	ip, #10
 8009edc:	4620      	mov	r0, r4
 8009ede:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ee2:	3a30      	subs	r2, #48	; 0x30
 8009ee4:	2a09      	cmp	r2, #9
 8009ee6:	d903      	bls.n	8009ef0 <_svfiprintf_r+0x1a8>
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d0c5      	beq.n	8009e78 <_svfiprintf_r+0x130>
 8009eec:	9105      	str	r1, [sp, #20]
 8009eee:	e7c3      	b.n	8009e78 <_svfiprintf_r+0x130>
 8009ef0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e7f0      	b.n	8009edc <_svfiprintf_r+0x194>
 8009efa:	ab03      	add	r3, sp, #12
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	462a      	mov	r2, r5
 8009f00:	4b0f      	ldr	r3, [pc, #60]	; (8009f40 <_svfiprintf_r+0x1f8>)
 8009f02:	a904      	add	r1, sp, #16
 8009f04:	4638      	mov	r0, r7
 8009f06:	f3af 8000 	nop.w
 8009f0a:	1c42      	adds	r2, r0, #1
 8009f0c:	4606      	mov	r6, r0
 8009f0e:	d1d6      	bne.n	8009ebe <_svfiprintf_r+0x176>
 8009f10:	89ab      	ldrh	r3, [r5, #12]
 8009f12:	065b      	lsls	r3, r3, #25
 8009f14:	f53f af2c 	bmi.w	8009d70 <_svfiprintf_r+0x28>
 8009f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f1a:	b01d      	add	sp, #116	; 0x74
 8009f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f20:	ab03      	add	r3, sp, #12
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	462a      	mov	r2, r5
 8009f26:	4b06      	ldr	r3, [pc, #24]	; (8009f40 <_svfiprintf_r+0x1f8>)
 8009f28:	a904      	add	r1, sp, #16
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	f000 f87a 	bl	800a024 <_printf_i>
 8009f30:	e7eb      	b.n	8009f0a <_svfiprintf_r+0x1c2>
 8009f32:	bf00      	nop
 8009f34:	0800a378 	.word	0x0800a378
 8009f38:	0800a382 	.word	0x0800a382
 8009f3c:	00000000 	.word	0x00000000
 8009f40:	08009c91 	.word	0x08009c91
 8009f44:	0800a37e 	.word	0x0800a37e

08009f48 <_printf_common>:
 8009f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f4c:	4616      	mov	r6, r2
 8009f4e:	4699      	mov	r9, r3
 8009f50:	688a      	ldr	r2, [r1, #8]
 8009f52:	690b      	ldr	r3, [r1, #16]
 8009f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	bfb8      	it	lt
 8009f5c:	4613      	movlt	r3, r2
 8009f5e:	6033      	str	r3, [r6, #0]
 8009f60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f64:	4607      	mov	r7, r0
 8009f66:	460c      	mov	r4, r1
 8009f68:	b10a      	cbz	r2, 8009f6e <_printf_common+0x26>
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	6033      	str	r3, [r6, #0]
 8009f6e:	6823      	ldr	r3, [r4, #0]
 8009f70:	0699      	lsls	r1, r3, #26
 8009f72:	bf42      	ittt	mi
 8009f74:	6833      	ldrmi	r3, [r6, #0]
 8009f76:	3302      	addmi	r3, #2
 8009f78:	6033      	strmi	r3, [r6, #0]
 8009f7a:	6825      	ldr	r5, [r4, #0]
 8009f7c:	f015 0506 	ands.w	r5, r5, #6
 8009f80:	d106      	bne.n	8009f90 <_printf_common+0x48>
 8009f82:	f104 0a19 	add.w	sl, r4, #25
 8009f86:	68e3      	ldr	r3, [r4, #12]
 8009f88:	6832      	ldr	r2, [r6, #0]
 8009f8a:	1a9b      	subs	r3, r3, r2
 8009f8c:	42ab      	cmp	r3, r5
 8009f8e:	dc26      	bgt.n	8009fde <_printf_common+0x96>
 8009f90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f94:	1e13      	subs	r3, r2, #0
 8009f96:	6822      	ldr	r2, [r4, #0]
 8009f98:	bf18      	it	ne
 8009f9a:	2301      	movne	r3, #1
 8009f9c:	0692      	lsls	r2, r2, #26
 8009f9e:	d42b      	bmi.n	8009ff8 <_printf_common+0xb0>
 8009fa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	47c0      	blx	r8
 8009faa:	3001      	adds	r0, #1
 8009fac:	d01e      	beq.n	8009fec <_printf_common+0xa4>
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	68e5      	ldr	r5, [r4, #12]
 8009fb2:	6832      	ldr	r2, [r6, #0]
 8009fb4:	f003 0306 	and.w	r3, r3, #6
 8009fb8:	2b04      	cmp	r3, #4
 8009fba:	bf08      	it	eq
 8009fbc:	1aad      	subeq	r5, r5, r2
 8009fbe:	68a3      	ldr	r3, [r4, #8]
 8009fc0:	6922      	ldr	r2, [r4, #16]
 8009fc2:	bf0c      	ite	eq
 8009fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fc8:	2500      	movne	r5, #0
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	bfc4      	itt	gt
 8009fce:	1a9b      	subgt	r3, r3, r2
 8009fd0:	18ed      	addgt	r5, r5, r3
 8009fd2:	2600      	movs	r6, #0
 8009fd4:	341a      	adds	r4, #26
 8009fd6:	42b5      	cmp	r5, r6
 8009fd8:	d11a      	bne.n	800a010 <_printf_common+0xc8>
 8009fda:	2000      	movs	r0, #0
 8009fdc:	e008      	b.n	8009ff0 <_printf_common+0xa8>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	4652      	mov	r2, sl
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	47c0      	blx	r8
 8009fe8:	3001      	adds	r0, #1
 8009fea:	d103      	bne.n	8009ff4 <_printf_common+0xac>
 8009fec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff4:	3501      	adds	r5, #1
 8009ff6:	e7c6      	b.n	8009f86 <_printf_common+0x3e>
 8009ff8:	18e1      	adds	r1, r4, r3
 8009ffa:	1c5a      	adds	r2, r3, #1
 8009ffc:	2030      	movs	r0, #48	; 0x30
 8009ffe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a002:	4422      	add	r2, r4
 800a004:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a008:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a00c:	3302      	adds	r3, #2
 800a00e:	e7c7      	b.n	8009fa0 <_printf_common+0x58>
 800a010:	2301      	movs	r3, #1
 800a012:	4622      	mov	r2, r4
 800a014:	4649      	mov	r1, r9
 800a016:	4638      	mov	r0, r7
 800a018:	47c0      	blx	r8
 800a01a:	3001      	adds	r0, #1
 800a01c:	d0e6      	beq.n	8009fec <_printf_common+0xa4>
 800a01e:	3601      	adds	r6, #1
 800a020:	e7d9      	b.n	8009fd6 <_printf_common+0x8e>
	...

0800a024 <_printf_i>:
 800a024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a028:	7e0f      	ldrb	r7, [r1, #24]
 800a02a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a02c:	2f78      	cmp	r7, #120	; 0x78
 800a02e:	4691      	mov	r9, r2
 800a030:	4680      	mov	r8, r0
 800a032:	460c      	mov	r4, r1
 800a034:	469a      	mov	sl, r3
 800a036:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a03a:	d807      	bhi.n	800a04c <_printf_i+0x28>
 800a03c:	2f62      	cmp	r7, #98	; 0x62
 800a03e:	d80a      	bhi.n	800a056 <_printf_i+0x32>
 800a040:	2f00      	cmp	r7, #0
 800a042:	f000 80d8 	beq.w	800a1f6 <_printf_i+0x1d2>
 800a046:	2f58      	cmp	r7, #88	; 0x58
 800a048:	f000 80a3 	beq.w	800a192 <_printf_i+0x16e>
 800a04c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a050:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a054:	e03a      	b.n	800a0cc <_printf_i+0xa8>
 800a056:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a05a:	2b15      	cmp	r3, #21
 800a05c:	d8f6      	bhi.n	800a04c <_printf_i+0x28>
 800a05e:	a101      	add	r1, pc, #4	; (adr r1, 800a064 <_printf_i+0x40>)
 800a060:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a064:	0800a0bd 	.word	0x0800a0bd
 800a068:	0800a0d1 	.word	0x0800a0d1
 800a06c:	0800a04d 	.word	0x0800a04d
 800a070:	0800a04d 	.word	0x0800a04d
 800a074:	0800a04d 	.word	0x0800a04d
 800a078:	0800a04d 	.word	0x0800a04d
 800a07c:	0800a0d1 	.word	0x0800a0d1
 800a080:	0800a04d 	.word	0x0800a04d
 800a084:	0800a04d 	.word	0x0800a04d
 800a088:	0800a04d 	.word	0x0800a04d
 800a08c:	0800a04d 	.word	0x0800a04d
 800a090:	0800a1dd 	.word	0x0800a1dd
 800a094:	0800a101 	.word	0x0800a101
 800a098:	0800a1bf 	.word	0x0800a1bf
 800a09c:	0800a04d 	.word	0x0800a04d
 800a0a0:	0800a04d 	.word	0x0800a04d
 800a0a4:	0800a1ff 	.word	0x0800a1ff
 800a0a8:	0800a04d 	.word	0x0800a04d
 800a0ac:	0800a101 	.word	0x0800a101
 800a0b0:	0800a04d 	.word	0x0800a04d
 800a0b4:	0800a04d 	.word	0x0800a04d
 800a0b8:	0800a1c7 	.word	0x0800a1c7
 800a0bc:	682b      	ldr	r3, [r5, #0]
 800a0be:	1d1a      	adds	r2, r3, #4
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	602a      	str	r2, [r5, #0]
 800a0c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e0a3      	b.n	800a218 <_printf_i+0x1f4>
 800a0d0:	6820      	ldr	r0, [r4, #0]
 800a0d2:	6829      	ldr	r1, [r5, #0]
 800a0d4:	0606      	lsls	r6, r0, #24
 800a0d6:	f101 0304 	add.w	r3, r1, #4
 800a0da:	d50a      	bpl.n	800a0f2 <_printf_i+0xce>
 800a0dc:	680e      	ldr	r6, [r1, #0]
 800a0de:	602b      	str	r3, [r5, #0]
 800a0e0:	2e00      	cmp	r6, #0
 800a0e2:	da03      	bge.n	800a0ec <_printf_i+0xc8>
 800a0e4:	232d      	movs	r3, #45	; 0x2d
 800a0e6:	4276      	negs	r6, r6
 800a0e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0ec:	485e      	ldr	r0, [pc, #376]	; (800a268 <_printf_i+0x244>)
 800a0ee:	230a      	movs	r3, #10
 800a0f0:	e019      	b.n	800a126 <_printf_i+0x102>
 800a0f2:	680e      	ldr	r6, [r1, #0]
 800a0f4:	602b      	str	r3, [r5, #0]
 800a0f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0fa:	bf18      	it	ne
 800a0fc:	b236      	sxthne	r6, r6
 800a0fe:	e7ef      	b.n	800a0e0 <_printf_i+0xbc>
 800a100:	682b      	ldr	r3, [r5, #0]
 800a102:	6820      	ldr	r0, [r4, #0]
 800a104:	1d19      	adds	r1, r3, #4
 800a106:	6029      	str	r1, [r5, #0]
 800a108:	0601      	lsls	r1, r0, #24
 800a10a:	d501      	bpl.n	800a110 <_printf_i+0xec>
 800a10c:	681e      	ldr	r6, [r3, #0]
 800a10e:	e002      	b.n	800a116 <_printf_i+0xf2>
 800a110:	0646      	lsls	r6, r0, #25
 800a112:	d5fb      	bpl.n	800a10c <_printf_i+0xe8>
 800a114:	881e      	ldrh	r6, [r3, #0]
 800a116:	4854      	ldr	r0, [pc, #336]	; (800a268 <_printf_i+0x244>)
 800a118:	2f6f      	cmp	r7, #111	; 0x6f
 800a11a:	bf0c      	ite	eq
 800a11c:	2308      	moveq	r3, #8
 800a11e:	230a      	movne	r3, #10
 800a120:	2100      	movs	r1, #0
 800a122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a126:	6865      	ldr	r5, [r4, #4]
 800a128:	60a5      	str	r5, [r4, #8]
 800a12a:	2d00      	cmp	r5, #0
 800a12c:	bfa2      	ittt	ge
 800a12e:	6821      	ldrge	r1, [r4, #0]
 800a130:	f021 0104 	bicge.w	r1, r1, #4
 800a134:	6021      	strge	r1, [r4, #0]
 800a136:	b90e      	cbnz	r6, 800a13c <_printf_i+0x118>
 800a138:	2d00      	cmp	r5, #0
 800a13a:	d04d      	beq.n	800a1d8 <_printf_i+0x1b4>
 800a13c:	4615      	mov	r5, r2
 800a13e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a142:	fb03 6711 	mls	r7, r3, r1, r6
 800a146:	5dc7      	ldrb	r7, [r0, r7]
 800a148:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a14c:	4637      	mov	r7, r6
 800a14e:	42bb      	cmp	r3, r7
 800a150:	460e      	mov	r6, r1
 800a152:	d9f4      	bls.n	800a13e <_printf_i+0x11a>
 800a154:	2b08      	cmp	r3, #8
 800a156:	d10b      	bne.n	800a170 <_printf_i+0x14c>
 800a158:	6823      	ldr	r3, [r4, #0]
 800a15a:	07de      	lsls	r6, r3, #31
 800a15c:	d508      	bpl.n	800a170 <_printf_i+0x14c>
 800a15e:	6923      	ldr	r3, [r4, #16]
 800a160:	6861      	ldr	r1, [r4, #4]
 800a162:	4299      	cmp	r1, r3
 800a164:	bfde      	ittt	le
 800a166:	2330      	movle	r3, #48	; 0x30
 800a168:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a16c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a170:	1b52      	subs	r2, r2, r5
 800a172:	6122      	str	r2, [r4, #16]
 800a174:	f8cd a000 	str.w	sl, [sp]
 800a178:	464b      	mov	r3, r9
 800a17a:	aa03      	add	r2, sp, #12
 800a17c:	4621      	mov	r1, r4
 800a17e:	4640      	mov	r0, r8
 800a180:	f7ff fee2 	bl	8009f48 <_printf_common>
 800a184:	3001      	adds	r0, #1
 800a186:	d14c      	bne.n	800a222 <_printf_i+0x1fe>
 800a188:	f04f 30ff 	mov.w	r0, #4294967295
 800a18c:	b004      	add	sp, #16
 800a18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a192:	4835      	ldr	r0, [pc, #212]	; (800a268 <_printf_i+0x244>)
 800a194:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a198:	6829      	ldr	r1, [r5, #0]
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1a0:	6029      	str	r1, [r5, #0]
 800a1a2:	061d      	lsls	r5, r3, #24
 800a1a4:	d514      	bpl.n	800a1d0 <_printf_i+0x1ac>
 800a1a6:	07df      	lsls	r7, r3, #31
 800a1a8:	bf44      	itt	mi
 800a1aa:	f043 0320 	orrmi.w	r3, r3, #32
 800a1ae:	6023      	strmi	r3, [r4, #0]
 800a1b0:	b91e      	cbnz	r6, 800a1ba <_printf_i+0x196>
 800a1b2:	6823      	ldr	r3, [r4, #0]
 800a1b4:	f023 0320 	bic.w	r3, r3, #32
 800a1b8:	6023      	str	r3, [r4, #0]
 800a1ba:	2310      	movs	r3, #16
 800a1bc:	e7b0      	b.n	800a120 <_printf_i+0xfc>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	f043 0320 	orr.w	r3, r3, #32
 800a1c4:	6023      	str	r3, [r4, #0]
 800a1c6:	2378      	movs	r3, #120	; 0x78
 800a1c8:	4828      	ldr	r0, [pc, #160]	; (800a26c <_printf_i+0x248>)
 800a1ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1ce:	e7e3      	b.n	800a198 <_printf_i+0x174>
 800a1d0:	0659      	lsls	r1, r3, #25
 800a1d2:	bf48      	it	mi
 800a1d4:	b2b6      	uxthmi	r6, r6
 800a1d6:	e7e6      	b.n	800a1a6 <_printf_i+0x182>
 800a1d8:	4615      	mov	r5, r2
 800a1da:	e7bb      	b.n	800a154 <_printf_i+0x130>
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	6826      	ldr	r6, [r4, #0]
 800a1e0:	6961      	ldr	r1, [r4, #20]
 800a1e2:	1d18      	adds	r0, r3, #4
 800a1e4:	6028      	str	r0, [r5, #0]
 800a1e6:	0635      	lsls	r5, r6, #24
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	d501      	bpl.n	800a1f0 <_printf_i+0x1cc>
 800a1ec:	6019      	str	r1, [r3, #0]
 800a1ee:	e002      	b.n	800a1f6 <_printf_i+0x1d2>
 800a1f0:	0670      	lsls	r0, r6, #25
 800a1f2:	d5fb      	bpl.n	800a1ec <_printf_i+0x1c8>
 800a1f4:	8019      	strh	r1, [r3, #0]
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	6123      	str	r3, [r4, #16]
 800a1fa:	4615      	mov	r5, r2
 800a1fc:	e7ba      	b.n	800a174 <_printf_i+0x150>
 800a1fe:	682b      	ldr	r3, [r5, #0]
 800a200:	1d1a      	adds	r2, r3, #4
 800a202:	602a      	str	r2, [r5, #0]
 800a204:	681d      	ldr	r5, [r3, #0]
 800a206:	6862      	ldr	r2, [r4, #4]
 800a208:	2100      	movs	r1, #0
 800a20a:	4628      	mov	r0, r5
 800a20c:	f7f5 ffe8 	bl	80001e0 <memchr>
 800a210:	b108      	cbz	r0, 800a216 <_printf_i+0x1f2>
 800a212:	1b40      	subs	r0, r0, r5
 800a214:	6060      	str	r0, [r4, #4]
 800a216:	6863      	ldr	r3, [r4, #4]
 800a218:	6123      	str	r3, [r4, #16]
 800a21a:	2300      	movs	r3, #0
 800a21c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a220:	e7a8      	b.n	800a174 <_printf_i+0x150>
 800a222:	6923      	ldr	r3, [r4, #16]
 800a224:	462a      	mov	r2, r5
 800a226:	4649      	mov	r1, r9
 800a228:	4640      	mov	r0, r8
 800a22a:	47d0      	blx	sl
 800a22c:	3001      	adds	r0, #1
 800a22e:	d0ab      	beq.n	800a188 <_printf_i+0x164>
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	079b      	lsls	r3, r3, #30
 800a234:	d413      	bmi.n	800a25e <_printf_i+0x23a>
 800a236:	68e0      	ldr	r0, [r4, #12]
 800a238:	9b03      	ldr	r3, [sp, #12]
 800a23a:	4298      	cmp	r0, r3
 800a23c:	bfb8      	it	lt
 800a23e:	4618      	movlt	r0, r3
 800a240:	e7a4      	b.n	800a18c <_printf_i+0x168>
 800a242:	2301      	movs	r3, #1
 800a244:	4632      	mov	r2, r6
 800a246:	4649      	mov	r1, r9
 800a248:	4640      	mov	r0, r8
 800a24a:	47d0      	blx	sl
 800a24c:	3001      	adds	r0, #1
 800a24e:	d09b      	beq.n	800a188 <_printf_i+0x164>
 800a250:	3501      	adds	r5, #1
 800a252:	68e3      	ldr	r3, [r4, #12]
 800a254:	9903      	ldr	r1, [sp, #12]
 800a256:	1a5b      	subs	r3, r3, r1
 800a258:	42ab      	cmp	r3, r5
 800a25a:	dcf2      	bgt.n	800a242 <_printf_i+0x21e>
 800a25c:	e7eb      	b.n	800a236 <_printf_i+0x212>
 800a25e:	2500      	movs	r5, #0
 800a260:	f104 0619 	add.w	r6, r4, #25
 800a264:	e7f5      	b.n	800a252 <_printf_i+0x22e>
 800a266:	bf00      	nop
 800a268:	0800a389 	.word	0x0800a389
 800a26c:	0800a39a 	.word	0x0800a39a

0800a270 <__retarget_lock_acquire_recursive>:
 800a270:	4770      	bx	lr

0800a272 <__retarget_lock_release_recursive>:
 800a272:	4770      	bx	lr

0800a274 <memcpy>:
 800a274:	440a      	add	r2, r1
 800a276:	4291      	cmp	r1, r2
 800a278:	f100 33ff 	add.w	r3, r0, #4294967295
 800a27c:	d100      	bne.n	800a280 <memcpy+0xc>
 800a27e:	4770      	bx	lr
 800a280:	b510      	push	{r4, lr}
 800a282:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a286:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a28a:	4291      	cmp	r1, r2
 800a28c:	d1f9      	bne.n	800a282 <memcpy+0xe>
 800a28e:	bd10      	pop	{r4, pc}

0800a290 <memmove>:
 800a290:	4288      	cmp	r0, r1
 800a292:	b510      	push	{r4, lr}
 800a294:	eb01 0402 	add.w	r4, r1, r2
 800a298:	d902      	bls.n	800a2a0 <memmove+0x10>
 800a29a:	4284      	cmp	r4, r0
 800a29c:	4623      	mov	r3, r4
 800a29e:	d807      	bhi.n	800a2b0 <memmove+0x20>
 800a2a0:	1e43      	subs	r3, r0, #1
 800a2a2:	42a1      	cmp	r1, r4
 800a2a4:	d008      	beq.n	800a2b8 <memmove+0x28>
 800a2a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2ae:	e7f8      	b.n	800a2a2 <memmove+0x12>
 800a2b0:	4402      	add	r2, r0
 800a2b2:	4601      	mov	r1, r0
 800a2b4:	428a      	cmp	r2, r1
 800a2b6:	d100      	bne.n	800a2ba <memmove+0x2a>
 800a2b8:	bd10      	pop	{r4, pc}
 800a2ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2c2:	e7f7      	b.n	800a2b4 <memmove+0x24>

0800a2c4 <_realloc_r>:
 800a2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c8:	4680      	mov	r8, r0
 800a2ca:	4614      	mov	r4, r2
 800a2cc:	460e      	mov	r6, r1
 800a2ce:	b921      	cbnz	r1, 800a2da <_realloc_r+0x16>
 800a2d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d4:	4611      	mov	r1, r2
 800a2d6:	f7ff bc2b 	b.w	8009b30 <_malloc_r>
 800a2da:	b92a      	cbnz	r2, 800a2e8 <_realloc_r+0x24>
 800a2dc:	f7ff fbbc 	bl	8009a58 <_free_r>
 800a2e0:	4625      	mov	r5, r4
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e8:	f000 f81b 	bl	800a322 <_malloc_usable_size_r>
 800a2ec:	4284      	cmp	r4, r0
 800a2ee:	4607      	mov	r7, r0
 800a2f0:	d802      	bhi.n	800a2f8 <_realloc_r+0x34>
 800a2f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2f6:	d812      	bhi.n	800a31e <_realloc_r+0x5a>
 800a2f8:	4621      	mov	r1, r4
 800a2fa:	4640      	mov	r0, r8
 800a2fc:	f7ff fc18 	bl	8009b30 <_malloc_r>
 800a300:	4605      	mov	r5, r0
 800a302:	2800      	cmp	r0, #0
 800a304:	d0ed      	beq.n	800a2e2 <_realloc_r+0x1e>
 800a306:	42bc      	cmp	r4, r7
 800a308:	4622      	mov	r2, r4
 800a30a:	4631      	mov	r1, r6
 800a30c:	bf28      	it	cs
 800a30e:	463a      	movcs	r2, r7
 800a310:	f7ff ffb0 	bl	800a274 <memcpy>
 800a314:	4631      	mov	r1, r6
 800a316:	4640      	mov	r0, r8
 800a318:	f7ff fb9e 	bl	8009a58 <_free_r>
 800a31c:	e7e1      	b.n	800a2e2 <_realloc_r+0x1e>
 800a31e:	4635      	mov	r5, r6
 800a320:	e7df      	b.n	800a2e2 <_realloc_r+0x1e>

0800a322 <_malloc_usable_size_r>:
 800a322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a326:	1f18      	subs	r0, r3, #4
 800a328:	2b00      	cmp	r3, #0
 800a32a:	bfbc      	itt	lt
 800a32c:	580b      	ldrlt	r3, [r1, r0]
 800a32e:	18c0      	addlt	r0, r0, r3
 800a330:	4770      	bx	lr
	...

0800a334 <_init>:
 800a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a336:	bf00      	nop
 800a338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33a:	bc08      	pop	{r3}
 800a33c:	469e      	mov	lr, r3
 800a33e:	4770      	bx	lr

0800a340 <_fini>:
 800a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a342:	bf00      	nop
 800a344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a346:	bc08      	pop	{r3}
 800a348:	469e      	mov	lr, r3
 800a34a:	4770      	bx	lr
